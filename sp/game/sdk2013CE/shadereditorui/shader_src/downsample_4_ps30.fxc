// ********************************
// ** auto generated pixelshader **
// ********************************


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );

// Constants
const float2 _g_TexelSize		: register( c16 );

// Arrays
static const float2 g_cArray_202[4] =
{
	float2( 0.000000f, 0.000000f ),
	float2( 2.000000f, 0.000000f ),
	float2( 0.000000f, 2.000000f ),
	float2( 2.000000f, 2.000000f ),
};

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float4 _var0 = float4( 0.000000, 0.000000, 0.000000, 0.000000 );
	float2 _var1 = _g_TexelSize * float( 0.500000 );
	_var1 = In.vTexCoord_0 + _var1;
	for ( int _var2 = 0; _var2 < 4; _var2++ )
	{
		float2 _var3 = _var1;
		float2 _var4 = g_cArray_202[_var2] * _g_TexelSize;
		_var3 = _var3 + _var4;
		float4 _var5 = tex2D( _Sampler_00, _var3 ).rgba;
		_var0 = _var0 + _var5;
	}
	_var0 = _var0 * float( 0.250000 );
	Out.vColor_0 = _var0;
	return Out;
}