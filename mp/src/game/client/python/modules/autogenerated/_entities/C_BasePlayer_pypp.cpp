// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "takedamageinfo.h"
#include "c_ai_basenpc.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "C_BasePlayer_pypp.hpp"

namespace bp = boost::python;

struct C_BasePlayer_wrapper : C_BasePlayer, bp::wrapper< C_BasePlayer > {

    C_BasePlayer_wrapper( )
    : C_BasePlayer( )
      , bp::wrapper< C_BasePlayer >(){
        // null constructor
    
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: C_BasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BasePlayer::GetTracerType(  );
            }
        else
            return this->C_BasePlayer::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return C_BasePlayer::GetTracerType( );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: C_BasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BasePlayer::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->C_BasePlayer::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        C_BasePlayer::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual bool ShouldDraw(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldDraw: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldDraw(  ) of Class: C_BasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldDraw = this->get_override( "ShouldDraw" );
        if( func_ShouldDraw.ptr() != Py_None )
            try {
                return func_ShouldDraw(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BasePlayer::ShouldDraw(  );
            }
        else
            return this->C_BasePlayer::ShouldDraw(  );
    }
    
    bool default_ShouldDraw(  ) {
        return C_BasePlayer::ShouldDraw( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: C_BasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BasePlayer::Spawn(  );
            }
        else
            this->C_BasePlayer::Spawn(  );
    }
    
    void default_Spawn(  ) {
        C_BasePlayer::Spawn( );
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Activate(  );
            }
        else
            this->C_BaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        C_BaseEntity::Activate( );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::CreateVPhysics(  );
            }
        else
            return this->C_BaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return C_BaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual ::CollideType_t GetCollideType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetCollideType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetCollideType(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetCollideType = this->get_override( "GetCollideType" );
        if( func_GetCollideType.ptr() != Py_None )
            try {
                return func_GetCollideType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseAnimating::GetCollideType(  );
            }
        else
            return this->C_BaseAnimating::GetCollideType(  );
    }
    
    ::CollideType_t default_GetCollideType(  ) {
        return C_BaseAnimating::GetCollideType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return C_BaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return C_BaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Precache(  );
            }
        else
            this->C_BaseEntity::Precache(  );
    }
    
    void default_Precache(  ) {
        C_BaseEntity::Precache( );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::UpdateOnRemove(  );
            }
        else
            this->C_BaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        C_BaseEntity::UpdateOnRemove( );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ClientClass* GetClientClass() {
    if( GetCurrentThreadId() != g_hPythonThreadID )
        return C_BasePlayer::GetClientClass();
    ClientClass *pClientClass = SrcPySystem()->Get<ClientClass *>( "pyClientClass", GetPyInstance(), NULL, true );
    if( pClientClass )
        return pClientClass;
    return C_BasePlayer::GetClientClass();
}

};

void register_C_BasePlayer_class(){

    bp::class_< C_BasePlayer_wrapper, bp::bases< C_BaseCombatCharacter >, boost::noncopyable >( "C_BasePlayer", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AbortReload"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::AbortReload ) )    
        .def( 
            "AddEntity"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::AddEntity ) )    
        .def( 
            "AddToPlayerSimulationList"
            , (void ( ::C_BasePlayer::* )( ::C_BaseEntity * ) )( &::C_BasePlayer::AddToPlayerSimulationList )
            , ( bp::arg("other") ) )    
        .def( 
            "AudioStateIsUnderwater"
            , (bool ( ::C_BasePlayer::* )( ::Vector ) )( &::C_BasePlayer::AudioStateIsUnderwater )
            , ( bp::arg("vecMainViewOrigin") ) )    
        .def( 
            "AvoidPhysicsProps"
            , (void ( ::C_BasePlayer::* )( ::CUserCmd * ) )( &::C_BasePlayer::AvoidPhysicsProps )
            , ( bp::arg("pCmd") ) )    
        .def( 
            "BuildFirstPersonMeathookTransformations"
            , (void ( ::C_BasePlayer::* )( ::CStudioHdr *,::Vector *,::Quaternion *,::matrix3x4_t const &,int,::CBoneBitList &,char const * ) )( &::C_BasePlayer::BuildFirstPersonMeathookTransformations )
            , ( bp::arg("hdr"), bp::arg("pos"), bp::arg("q"), bp::arg("cameraTransform"), bp::arg("boneMask"), bp::arg("boneComputed"), bp::arg("pchHeadBoneName") ) )    
        .def( 
            "CacheVehicleView"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::CacheVehicleView ) )    
        .def( 
            "CalcRoll"
            , (float ( ::C_BasePlayer::* )( ::QAngle const &,::Vector const &,float,float ) )( &::C_BasePlayer::CalcRoll )
            , ( bp::arg("angles"), bp::arg("velocity"), bp::arg("rollangle"), bp::arg("rollspeed") ) )    
        .def( 
            "CalcView"
            , (void ( ::C_BasePlayer::* )( ::Vector &,::QAngle &,float &,float &,float & ) )( &::C_BasePlayer::CalcView )
            , ( bp::arg("eyeOrigin"), bp::arg("eyeAngles"), bp::arg("zNear"), bp::arg("zFar"), bp::arg("fov") ) )    
        .def( 
            "CalcViewModelView"
            , (void ( ::C_BasePlayer::* )( ::Vector const &,::QAngle const & ) )( &::C_BasePlayer::CalcViewModelView )
            , ( bp::arg("eyeOrigin"), bp::arg("eyeAngles") ) )    
        .def( 
            "CalcViewRoll"
            , (void ( ::C_BasePlayer::* )( ::QAngle & ) )( &::C_BasePlayer::CalcViewRoll )
            , ( bp::arg("eyeAngles") ) )    
        .def( 
            "CalculateVisionUsingCurrentFlags"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::CalculateVisionUsingCurrentFlags ) )    
        .def( 
            "CanSetSoundMixer"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::CanSetSoundMixer ) )    
        .def( 
            "CanUseFirstPersonCommand"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::CanUseFirstPersonCommand ) )    
        .def( 
            "ClearPlayerSimulationList"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ClearPlayerSimulationList ) )    
        .def( 
            "ClearZoomOwner"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ClearZoomOwner ) )    
        .def( 
            "CreateMove"
            , (bool ( ::C_BasePlayer::* )( float,::CUserCmd * ) )( &::C_BasePlayer::CreateMove )
            , ( bp::arg("flInputSampleTime"), bp::arg("pCmd") ) )    
        .def( 
            "CreateWaterEffects"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::CreateWaterEffects ) )    
        .def( 
            "CurrentCommandNumber"
            , (int ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::CurrentCommandNumber ) )    
        .def( 
            "DoMuzzleFlash"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::DoMuzzleFlash ) )    
        .def( 
            "DrawModel"
            , (int ( ::C_BasePlayer::* )( int ) )( &::C_BasePlayer::DrawModel )
            , ( bp::arg("flags") ) )    
        .def( 
            "DrawOverriddenViewmodel"
            , (int ( ::C_BasePlayer::* )( ::C_BaseViewModel *,int ) )( &::C_BasePlayer::DrawOverriddenViewmodel )
            , ( bp::arg("pViewmodel"), bp::arg("flags") ) )    
        .def( 
            "ExitLadder"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ExitLadder ) )    
        .def( 
            "EyeAngles"
            , (::QAngle const & ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::EyeAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "EyePosition"
            , (::Vector ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::EyePosition ) )    
        .def( 
            "EyePositionAndVectors"
            , (void ( ::C_BasePlayer::* )( ::Vector *,::Vector *,::Vector *,::Vector * ) )( &::C_BasePlayer::EyePositionAndVectors )
            , ( bp::arg("pPosition"), bp::arg("pForward"), bp::arg("pRight"), bp::arg("pUp") ) )    
        .def( 
            "EyeVectors"
            , (void ( ::C_BasePlayer::* )( ::Vector *,::Vector *,::Vector * ) )( &::C_BasePlayer::EyeVectors )
            , ( bp::arg("pForward"), bp::arg("pRight")=bp::object(), bp::arg("pUp")=bp::object() ) )    
        .def( 
            "FindUseEntity"
            , (::C_BaseEntity * ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::FindUseEntity )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "Flashlight"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::Flashlight ) )    
        .def( 
            "FogControllerChanged"
            , (void ( ::C_BasePlayer::* )( bool ) )( &::C_BasePlayer::FogControllerChanged )
            , ( bp::arg("bSnap") ) )    
        .def( 
            "GetActiveWeapon"
            , (::C_BaseCombatWeapon * ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetActiveWeapon )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetActiveWeaponForSelection"
            , (::C_BaseCombatWeapon * ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetActiveWeaponForSelection )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetAutoaimVector"
            , (::Vector ( ::C_BasePlayer::* )( float ) )( &::C_BasePlayer::GetAutoaimVector )
            , ( bp::arg("flScale") ) )    
        .def( 
            "GetBonusChallenge"
            , (int ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetBonusChallenge ) )    
        .def( 
            "GetBonusProgress"
            , (int ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetBonusProgress ) )    
        .def( 
            "GetDeathTime"
            , (float ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetDeathTime ) )    
        .def( 
            "GetDefaultAnimSpeed"
            , (float ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetDefaultAnimSpeed ) )    
        .def( 
            "GetDefaultFOV"
            , (int ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetDefaultFOV ) )    
        .def( 
            "GetFOV"
            , (float ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetFOV ) )    
        .def( 
            "GetFOVDistanceAdjustFactor"
            , (float ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetFOVDistanceAdjustFactor ) )    
        .def( 
            "GetFOVTime"
            , (float ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetFOVTime ) )    
        .def( 
            "GetFinalPredictedTime"
            , (float ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetFinalPredictedTime ) )    
        .def( 
            "GetHealth"
            , (int ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetHealth ) )    
        .def( 
            "GetImpulse"
            , (int ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetImpulse ) )    
        .def( 
            "GetLaggedMovementValue"
            , (float ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetLaggedMovementValue ) )    
        .def( 
            "GetLastKnownPlaceName"
            , (char const * ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetLastKnownPlaceName ) )    
        .def( 
            "GetLastWeapon"
            , (::C_BaseCombatWeapon * ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetLastWeapon )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetLocalPlayer"
            , (::C_BasePlayer * (*)(  ))( &::C_BasePlayer::GetLocalPlayer )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetMinFOV"
            , (float ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetMinFOV ) )    
        .def( 
            "GetObserverMode"
            , (int ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetObserverMode ) )    
        .def( 
            "GetObserverTarget"
            , (::C_BaseEntity * ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetObserverTarget )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetOffset_m_Local"
            , (int (*)(  ))( &::C_BasePlayer::GetOffset_m_Local ) )    
        .def( 
            "GetOverrideStepSound"
            , (char const * ( ::C_BasePlayer::* )( char const * ) )( &::C_BasePlayer::GetOverrideStepSound )
            , ( bp::arg("pszBaseStepSoundName") ) )    
        .def( 
            "GetPlayerMaxSpeed"
            , (float ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetPlayerMaxSpeed ) )    
        .def( 
            "GetPlayerMaxs"
            , (::Vector const ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetPlayerMaxs ) )    
        .def( 
            "GetPlayerMins"
            , (::Vector const ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetPlayerMins ) )    
        .def( 
            "GetPlayerName"
            , (char const * ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetPlayerName ) )    
        .def( 
            "GetPredictionErrorSmoothingVector"
            , (void ( ::C_BasePlayer::* )( ::Vector & ) )( &::C_BasePlayer::GetPredictionErrorSmoothingVector )
            , ( bp::arg("vOffset") ) )    
        .def( 
            "GetPreviouslyPredictedOrigin"
            , (::Vector const & ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetPreviouslyPredictedOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetPunchAngle"
            , (::QAngle const & ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetPunchAngle )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetPyNetworkType"
            , (int (*)(  ))( &::C_BasePlayer::GetPyNetworkType ) )    
        .def( 
            "GetRagdollInitBoneArrays"
            , (void ( ::C_BasePlayer::* )( ::matrix3x4_t *,::matrix3x4_t *,::matrix3x4_t *,float ) )( &::C_BasePlayer::GetRagdollInitBoneArrays )
            , ( bp::arg("pDeltaBones0"), bp::arg("pDeltaBones1"), bp::arg("pCurrentBones"), bp::arg("boneDt") ) )    
        .def( 
            "GetRenderedWeaponModel"
            , (::C_BaseAnimating * ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetRenderedWeaponModel )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetSteamID"
            , (bool ( ::C_BasePlayer::* )( ::CSteamID * ) )( &::C_BasePlayer::GetSteamID )
            , ( bp::arg("pID") ) )    
        .def( 
            "GetStepSoundVelocities"
            , (void ( ::C_BasePlayer::* )( float *,float * ) )( &::C_BasePlayer::GetStepSoundVelocities )
            , ( bp::arg("velwalk"), bp::arg("velrun") ) )    
        .def( 
            "GetSwimSoundTime"
            , (float ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetSwimSoundTime ) )    
        .def( 
            "GetTimeBase"
            , (float ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetTimeBase ) )    
        .def( 
            "GetToolRecordingState"
            , (void ( ::C_BasePlayer::* )( ::KeyValues * ) )( &::C_BasePlayer::GetToolRecordingState )
            , ( bp::arg("msg") ) )    
        .def( 
            "GetTracerType"
            , (char const * ( ::C_BasePlayer::* )(  ) )(&::C_BasePlayer::GetTracerType)
            , (char const * ( C_BasePlayer_wrapper::* )(  ) )(&C_BasePlayer_wrapper::default_GetTracerType) )    
        .def( 
            "GetUseEntity"
            , (::C_BaseEntity * ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetUseEntity )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetUserID"
            , (int ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::GetUserID ) )    
        .def( 
            "GetViewModel"
            , (::C_BaseViewModel * ( ::C_BasePlayer::* )( int,bool ) )( &::C_BasePlayer::GetViewModel )
            , ( bp::arg("viewmodelindex")=(int)(0), bp::arg("bObserverOK")=(bool)(true) )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetVisionFilterFlags"
            , (int ( ::C_BasePlayer::* )( bool ) )( &::C_BasePlayer::GetVisionFilterFlags )
            , ( bp::arg("bWeaponsCheck")=(bool)(false) ) )    
        .def( 
            "GetWaterJumpTime"
            , (float ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::GetWaterJumpTime ) )    
        .def( 
            "HasFiredWeapon"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::HasFiredWeapon ) )    
        .def( 
            "HasVisionFilterFlags"
            , (bool ( ::C_BasePlayer::* )( int,bool ) )( &::C_BasePlayer::HasVisionFilterFlags )
            , ( bp::arg("nFlags"), bp::arg("bWeaponsCheck")=(bool)(false) ) )    
        .def( 
            "HintMessage"
            , (bool ( ::C_BasePlayer::* )( int,bool,bool ) )( &::C_BasePlayer::HintMessage )
            , ( bp::arg("hint"), bp::arg("bForce")=(bool)(false), bp::arg("bOnlyIfClear")=(bool)(false) ) )    
        .def( 
            "HintMessage"
            , (void ( ::C_BasePlayer::* )( char const * ) )( &::C_BasePlayer::HintMessage )
            , ( bp::arg("pMessage") ) )    
        .def( 
            "InFirstPersonView"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::InFirstPersonView ) )    
        .def( 
            "IsAllowedToSwitchWeapons"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::IsAllowedToSwitchWeapons ) )    
        .def( 
            "IsBot"
            , (bool ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::IsBot ) )    
        .def( 
            "IsHLTV"
            , (bool ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::IsHLTV ) )    
        .def( 
            "IsInAVehicle"
            , (bool ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::IsInAVehicle ) )    
        .def( 
            "IsInVGuiInputMode"
            , (bool ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::IsInVGuiInputMode ) )    
        .def( 
            "IsInViewModelVGuiInputMode"
            , (bool ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::IsInViewModelVGuiInputMode ) )    
        .def( 
            "IsLocalPlayer"
            , (bool ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::IsLocalPlayer ) )    
        .def( 
            "IsObserver"
            , (bool ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::IsObserver ) )    
        .def( 
            "IsOverridingViewmodel"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::IsOverridingViewmodel ) )    
        .def( 
            "IsPlayer"
            , (bool ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::IsPlayer ) )    
        .def( 
            "IsPlayerDead"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::IsPlayerDead ) )    
        .def( 
            "IsPlayerUnderwater"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::IsPlayerUnderwater ) )    
        .def( 
            "IsPoisoned"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::IsPoisoned ) )    
        .def( 
            "IsReplay"
            , (bool ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::IsReplay ) )    
        .def( 
            "IsSuitEquipped"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::IsSuitEquipped ) )    
        .def( 
            "IsUseableEntity"
            , (bool ( ::C_BasePlayer::* )( ::C_BaseEntity *,unsigned int ) )( &::C_BasePlayer::IsUseableEntity )
            , ( bp::arg("pEntity"), bp::arg("requiredCaps") ) )    
        .def( 
            "IsZoomed"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::IsZoomed ) )    
        .def( 
            "ItemPostFrame"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ItemPostFrame ) )    
        .def( 
            "ItemPreFrame"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ItemPreFrame ) )    
        .def( 
            "LeaveVehicle"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::LeaveVehicle ) )    
        .def( 
            "LocalEyeAngles"
            , (::QAngle const & ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::LocalEyeAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "LocalPlayerInFirstPersonView"
            , (bool (*)(  ))( &::C_BasePlayer::LocalPlayerInFirstPersonView ) )    
        .def( 
            "MakeTracer"
            , (void ( ::C_BasePlayer::* )( ::Vector const &,::trace_t const &,int ) )(&::C_BasePlayer::MakeTracer)
            , (void ( C_BasePlayer_wrapper::* )( ::Vector const &,::trace_t const &,int ) )(&C_BasePlayer_wrapper::default_MakeTracer)
            , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) )    
        .def( 
            "MaxSpeed"
            , (float ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::MaxSpeed ) )    
        .def( 
            "NotePredictionError"
            , (void ( ::C_BasePlayer::* )( ::Vector const & ) )( &::C_BasePlayer::NotePredictionError )
            , ( bp::arg("vDelta") ) )    
        .def( 
            "OnAchievementAchieved"
            , (void ( ::C_BasePlayer::* )( int ) )( &::C_BasePlayer::OnAchievementAchieved )
            , ( bp::arg("iAchievement") ) )    
        .def( 
            "OnDataChanged"
            , (void ( ::C_BasePlayer::* )( ::DataUpdateType_t ) )( &::C_BasePlayer::OnDataChanged )
            , ( bp::arg("updateType") ) )    
        .def( 
            "OnEmitFootstepSound"
            , (void ( ::C_BasePlayer::* )( ::CSoundParameters const &,::Vector const &,float ) )( &::C_BasePlayer::OnEmitFootstepSound )
            , ( bp::arg("params"), bp::arg("vecOrigin"), bp::arg("fVolume") ) )    
        .def( 
            "OnPreDataChanged"
            , (void ( ::C_BasePlayer::* )( ::DataUpdateType_t ) )( &::C_BasePlayer::OnPreDataChanged )
            , ( bp::arg("updateType") ) )    
        .def( 
            "OnRestore"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::OnRestore ) )    
        .def( 
            "OverrideView"
            , (void ( ::C_BasePlayer::* )( ::CViewSetup * ) )( &::C_BasePlayer::OverrideView )
            , ( bp::arg("pSetup") ) )    
        .def( 
            "PhysicsSimulate"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::PhysicsSimulate ) )    
        .def( 
            "PhysicsSolidMaskForEntity"
            , (unsigned int ( ::C_BasePlayer::* )(  ) const)( &::C_BasePlayer::PhysicsSolidMaskForEntity ) )    
        .def( 
            "PlayPlayerJingle"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::PlayPlayerJingle ) )    
        .def( 
            "PlayStepSound"
            , (void ( ::C_BasePlayer::* )( ::Vector &,::surfacedata_t *,float,bool ) )( &::C_BasePlayer::PlayStepSound )
            , ( bp::arg("vecOrigin"), bp::arg("psurface"), bp::arg("fvol"), bp::arg("force") ) )    
        .def( 
            "PlayerUse"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::PlayerUse ) )    
        .def( 
            "PostDataUpdate"
            , (void ( ::C_BasePlayer::* )( ::DataUpdateType_t ) )( &::C_BasePlayer::PostDataUpdate )
            , ( bp::arg("updateType") ) )    
        .def( 
            "PostThink"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::PostThink ) )    
        .def( 
            "PreDataUpdate"
            , (void ( ::C_BasePlayer::* )( ::DataUpdateType_t ) )( &::C_BasePlayer::PreDataUpdate )
            , ( bp::arg("updateType") ) )    
        .def( 
            "PreThink"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::PreThink ) )    
        .def( 
            "ReceiveMessage"
            , (void ( ::C_BasePlayer::* )( int,::bf_read & ) )( &::C_BasePlayer::ReceiveMessage )
            , ( bp::arg("classID"), bp::arg("msg") ) )    
        .def( 
            "RemoveFromPlayerSimulationList"
            , (void ( ::C_BasePlayer::* )( ::C_BaseEntity * ) )( &::C_BasePlayer::RemoveFromPlayerSimulationList )
            , ( bp::arg("ent") ) )    
        .def( 
            "ResetAutoaim"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ResetAutoaim ) )    
        .def( 
            "ResetObserverMode"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ResetObserverMode ) )    
        .def( 
            "SelectItem"
            , (void ( ::C_BasePlayer::* )( char const *,int ) )( &::C_BasePlayer::SelectItem )
            , ( bp::arg("pstr"), bp::arg("iSubType")=(int)(0) ) )    
        .def( 
            "SelectLastItem"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::SelectLastItem ) )    
        .def( 
            "SetAnimation"
            , (void ( ::C_BasePlayer::* )( ::PLAYER_ANIM ) )( &::C_BasePlayer::SetAnimation )
            , ( bp::arg("playerAnim") ) )    
        .def( 
            "SetAnimationExtension"
            , (void ( ::C_BasePlayer::* )( char const * ) )( &::C_BasePlayer::SetAnimationExtension )
            , ( bp::arg("pExtension") ) )    
        .def( 
            "SetFOV"
            , (bool ( ::C_BasePlayer::* )( ::C_BaseEntity *,int,float,int ) )( &::C_BasePlayer::SetFOV )
            , ( bp::arg("pRequester"), bp::arg("FOV"), bp::arg("zoomRate")=0.0f, bp::arg("iZoomStart")=(int)(0) ) )    
        .def( 
            "SetFiredWeapon"
            , (void ( ::C_BasePlayer::* )( bool ) )( &::C_BasePlayer::SetFiredWeapon )
            , ( bp::arg("bFlag") ) )    
        .def( 
            "SetLadderNormal"
            , (void ( ::C_BasePlayer::* )( ::Vector ) )( &::C_BasePlayer::SetLadderNormal )
            , ( bp::arg("vecLadderNormal") ) )    
        .def( 
            "SetMaxSpeed"
            , (void ( ::C_BasePlayer::* )( float ) )( &::C_BasePlayer::SetMaxSpeed )
            , ( bp::arg("flMaxSpeed") ) )    
        .def( 
            "SetNextAchievementAnnounceTime"
            , (void ( ::C_BasePlayer::* )( float ) )( &::C_BasePlayer::SetNextAchievementAnnounceTime )
            , ( bp::arg("flTime") ) )    
        .def( 
            "SetObserverMode"
            , (void ( ::C_BasePlayer::* )( int ) )( &::C_BasePlayer::SetObserverMode )
            , ( bp::arg("iNewMode") ) )    
        .def( 
            "SetObserverTarget"
            , (void ( ::C_BasePlayer::* )( ::EHANDLE ) )( &::C_BasePlayer::SetObserverTarget )
            , ( bp::arg("hObserverTarget") ) )    
        .def( 
            "SetOldPlayerZ"
            , (void ( ::C_BasePlayer::* )( float ) )( &::C_BasePlayer::SetOldPlayerZ )
            , ( bp::arg("flOld") ) )    
        .def( 
            "SetPlayerUnderwater"
            , (void ( ::C_BasePlayer::* )( bool ) )( &::C_BasePlayer::SetPlayerUnderwater )
            , ( bp::arg("state") ) )    
        .def( 
            "SetPreviouslyPredictedOrigin"
            , (void ( ::C_BasePlayer::* )( ::Vector const & ) )( &::C_BasePlayer::SetPreviouslyPredictedOrigin )
            , ( bp::arg("vecAbsOrigin") ) )    
        .def( 
            "SetPunchAngle"
            , (void ( ::C_BasePlayer::* )( ::QAngle const & ) )( &::C_BasePlayer::SetPunchAngle )
            , ( bp::arg("angle") ) )    
        .def( 
            "SetStepSoundTime"
            , (void ( ::C_BasePlayer::* )( ::stepsoundtimes_t,bool ) )( &::C_BasePlayer::SetStepSoundTime )
            , ( bp::arg("iStepSoundTime"), bp::arg("bWalking") ) )    
        .def( 
            "SetSuitUpdate"
            , (void ( ::C_BasePlayer::* )( char const *,int,int ) )( &::C_BasePlayer::SetSuitUpdate )
            , ( bp::arg("name"), bp::arg("fgroup"), bp::arg("iNoRepeat") ) )    
        .def( 
            "SetSwimSoundTime"
            , (void ( ::C_BasePlayer::* )( float ) )( &::C_BasePlayer::SetSwimSoundTime )
            , ( bp::arg("flSwimSoundTime") ) )    
        .def( 
            "SetVehicleRole"
            , (void ( ::C_BasePlayer::* )( int ) )( &::C_BasePlayer::SetVehicleRole )
            , ( bp::arg("nRole") ) )    
        .def( 
            "SetWaterJumpTime"
            , (void ( ::C_BasePlayer::* )( float ) )( &::C_BasePlayer::SetWaterJumpTime )
            , ( bp::arg("flWaterJumpTime") ) )    
        .def( 
            "ShadowCastType"
            , (::ShadowType_t ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ShadowCastType ) )    
        .def( 
            "SharedSpawn"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::SharedSpawn ) )    
        .def( 
            "ShouldAnnounceAchievement"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ShouldAnnounceAchievement ) )    
        .def( 
            "ShouldDraw"
            , (bool ( ::C_BasePlayer::* )(  ) )(&::C_BasePlayer::ShouldDraw)
            , (bool ( C_BasePlayer_wrapper::* )(  ) )(&C_BasePlayer_wrapper::default_ShouldDraw) )    
        .def( 
            "ShouldDrawLocalPlayer"
            , (bool (*)(  ))( &::C_BasePlayer::ShouldDrawLocalPlayer ) )    
        .def( 
            "ShouldDrawThisPlayer"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ShouldDrawThisPlayer ) )    
        .def( 
            "ShouldInterpolate"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ShouldInterpolate ) )    
        .def( 
            "ShouldPredict"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ShouldPredict ) )    
        .def( 
            "ShouldReceiveProjectedTextures"
            , (bool ( ::C_BasePlayer::* )( int ) )( &::C_BasePlayer::ShouldReceiveProjectedTextures )
            , ( bp::arg("flags") ) )    
        .def( 
            "ShouldShowHints"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ShouldShowHints ) )    
        .def( 
            "Simulate"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::Simulate ) )    
        .def( 
            "SimulatePlayerSimulatedEntities"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::SimulatePlayerSimulatedEntities ) )    
        .def( 
            "SmoothViewOnStairs"
            , (void ( ::C_BasePlayer::* )( ::Vector & ) )( &::C_BasePlayer::SmoothViewOnStairs )
            , ( bp::arg("eyeOrigin") ) )    
        .def( 
            "Spawn"
            , (void ( ::C_BasePlayer::* )(  ) )(&::C_BasePlayer::Spawn)
            , (void ( C_BasePlayer_wrapper::* )(  ) )(&C_BasePlayer_wrapper::default_Spawn) )    
        .def( 
            "TeamChange"
            , (void ( ::C_BasePlayer::* )( int ) )( &::C_BasePlayer::TeamChange )
            , ( bp::arg("iNewTeam") ) )    
        .def( 
            "ThirdPersonSwitch"
            , (void ( ::C_BasePlayer::* )( bool ) )( &::C_BasePlayer::ThirdPersonSwitch )
            , ( bp::arg("bThirdperson") ) )    
        .def( 
            "UpdateButtonState"
            , (void ( ::C_BasePlayer::* )( int ) )( &::C_BasePlayer::UpdateButtonState )
            , ( bp::arg("nUserCmdButtonMask") ) )    
        .def( 
            "UpdateClientData"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::UpdateClientData ) )    
        .def( 
            "UpdateFlashlight"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::UpdateFlashlight ) )    
        .def( 
            "UpdateFogBlend"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::UpdateFogBlend ) )    
        .def( 
            "UpdateFogController"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::UpdateFogController ) )    
        .def( 
            "UpdateStepSound"
            , (void ( ::C_BasePlayer::* )( ::surfacedata_t *,::Vector const &,::Vector const & ) )( &::C_BasePlayer::UpdateStepSound )
            , ( bp::arg("psurface"), bp::arg("vecOrigin"), bp::arg("vecVelocity") ) )    
        .def( 
            "UpdateUnderwaterState"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::UpdateUnderwaterState ) )    
        .def( 
            "UsingStandardWeaponsInVehicle"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::UsingStandardWeaponsInVehicle ) )    
        .def( 
            "ViewModel_IsTransparent"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ViewModel_IsTransparent ) )    
        .def( 
            "ViewModel_IsUsingFBTexture"
            , (bool ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::ViewModel_IsUsingFBTexture ) )    
        .def( 
            "ViewPunch"
            , (void ( ::C_BasePlayer::* )( ::QAngle const & ) )( &::C_BasePlayer::ViewPunch )
            , ( bp::arg("angleOffset") ) )    
        .def( 
            "ViewPunchReset"
            , (void ( ::C_BasePlayer::* )( float ) )( &::C_BasePlayer::ViewPunchReset )
            , ( bp::arg("tolerance")=0 ) )    
        .def( 
            "Weapon_DropPrimary"
            , (void ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::Weapon_DropPrimary ) )    
        .def( 
            "Weapon_SetLast"
            , (void ( ::C_BasePlayer::* )( ::C_BaseCombatWeapon * ) )( &::C_BasePlayer::Weapon_SetLast )
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "Weapon_ShootPosition"
            , (::Vector ( ::C_BasePlayer::* )(  ) )( &::C_BasePlayer::Weapon_ShootPosition ) )    
        .def( 
            "Weapon_ShouldSelectItem"
            , (bool ( ::C_BasePlayer::* )( ::C_BaseCombatWeapon * ) )( &::C_BasePlayer::Weapon_ShouldSelectItem )
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "Weapon_ShouldSetLast"
            , (bool ( ::C_BasePlayer::* )( ::C_BaseCombatWeapon *,::C_BaseCombatWeapon * ) )( &::C_BasePlayer::Weapon_ShouldSetLast )
            , ( bp::arg("pOldWeapon"), bp::arg("pNewWeapon") ) )    
        .def( 
            "Weapon_Switch"
            , (bool ( ::C_BasePlayer::* )( ::C_BaseCombatWeapon *,int ) )( &::C_BasePlayer::Weapon_Switch )
            , ( bp::arg("pWeapon"), bp::arg("viewmodelindex")=(int)(0) ) )    
        .def( 
            "Activate"
            , (void ( ::C_BaseEntity::* )(  ) )(&::C_BaseEntity::Activate)
            , (void ( C_BasePlayer_wrapper::* )(  ) )(&C_BasePlayer_wrapper::default_Activate) )    
        .def( 
            "CreateVPhysics"
            , (bool ( ::C_BaseEntity::* )(  ) )(&::C_BaseEntity::CreateVPhysics)
            , (bool ( C_BasePlayer_wrapper::* )(  ) )(&C_BasePlayer_wrapper::default_CreateVPhysics) )    
        .def( 
            "DoImpactEffect"
            , (void ( ::C_BaseEntity::* )( ::trace_t &,int ) )(&::C_BaseEntity::DoImpactEffect)
            , (void ( C_BasePlayer_wrapper::* )( ::trace_t &,int ) )(&C_BasePlayer_wrapper::default_DoImpactEffect)
            , ( bp::arg("tr"), bp::arg("nDamageType") ) )    
        .def( 
            "GetCollideType"
            , (::CollideType_t ( ::C_BaseAnimating::* )(  ) )(&::C_BaseAnimating::GetCollideType)
            , (::CollideType_t ( C_BasePlayer_wrapper::* )(  ) )(&C_BasePlayer_wrapper::default_GetCollideType) )    
        .def( 
            "KeyValue"
            , (bool ( ::C_BaseEntity::* )( char const *,char const * ) )(&::C_BaseEntity::KeyValue)
            , (bool ( C_BasePlayer_wrapper::* )( char const *,char const * ) )(&C_BasePlayer_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("szValue") ) )    
        .def( 
            "KeyValue"
            , (bool ( ::C_BaseEntity::* )( char const *,float ) )(&::C_BaseEntity::KeyValue)
            , (bool ( C_BasePlayer_wrapper::* )( char const *,float ) )(&C_BasePlayer_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("flValue") ) )    
        .def( 
            "KeyValue"
            , (bool ( ::C_BaseEntity::* )( char const *,::Vector const & ) )(&::C_BaseEntity::KeyValue)
            , (bool ( C_BasePlayer_wrapper::* )( char const *,::Vector const & ) )(&C_BasePlayer_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("vecValue") ) )    
        .def( 
            "Precache"
            , (void ( ::C_BaseEntity::* )(  ) )(&::C_BaseEntity::Precache)
            , (void ( C_BasePlayer_wrapper::* )(  ) )(&C_BasePlayer_wrapper::default_Precache) )    
        .def( 
            "UpdateOnRemove"
            , (void ( ::C_BaseEntity::* )(  ) )(&::C_BaseEntity::UpdateOnRemove)
            , (void ( C_BasePlayer_wrapper::* )(  ) )(&C_BasePlayer_wrapper::default_UpdateOnRemove) )    
        .staticmethod( "GetLocalPlayer" )    
        .staticmethod( "GetOffset_m_Local" )    
        .staticmethod( "GetPyNetworkType" )    
        .staticmethod( "LocalPlayerInFirstPersonView" )    
        .staticmethod( "ShouldDrawLocalPlayer" );

}

