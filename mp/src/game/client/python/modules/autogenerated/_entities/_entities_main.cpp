// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "cbase.h"

#include "srcpy_entities.h"

#include "bone_setup.h"

#include "basegrenade_shared.h"

#include "takedamageinfo.h"

#include "c_ai_basenpc.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

#include "../game/client/python/modules/autogenerated/_entities/CBaseHandle_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/C_BaseAnimatingOverlay_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/C_BaseAnimating_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/C_BaseCombatCharacter_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/C_BaseCombatWeapon_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/C_BaseEntity_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/C_BaseFlex_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/C_BaseGrenade_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/C_BasePlayer_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/DeadEntity_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/IClientEntity_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/IClientUnknown_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/IHandleEntity_pypp.hpp"

#include "../game/client/python/modules/autogenerated/_entities/PyHandle_pypp.hpp"

namespace bp = boost::python;

typedef CEPyHandle< C_BaseEntity > C_BaseEntityHANDLE;

struct ptr_C_BaseEntity_to_handle : bp::to_python_converter<C_BaseEntity *, ptr_C_BaseEntity_to_handle>
{
    static PyObject* convert(C_BaseEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseEntity_to_handle : bp::to_python_converter<C_BaseEntity, C_BaseEntity_to_handle>
{
    static PyObject* convert(const C_BaseEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseEntity
{
    handle_to_C_BaseEntity()
    {
        bp::converter::registry::insert(
            &extract_C_BaseEntity, 
            bp::type_id<C_BaseEntity>()
            );
    }

    static void* extract_C_BaseEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseAnimating > C_BaseAnimatingHANDLE;

struct ptr_C_BaseAnimating_to_handle : bp::to_python_converter<C_BaseAnimating *, ptr_C_BaseAnimating_to_handle>
{
    static PyObject* convert(C_BaseAnimating *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseAnimating_to_handle : bp::to_python_converter<C_BaseAnimating, C_BaseAnimating_to_handle>
{
    static PyObject* convert(const C_BaseAnimating &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseAnimating
{
    handle_to_C_BaseAnimating()
    {
        bp::converter::registry::insert(
            &extract_C_BaseAnimating, 
            bp::type_id<C_BaseAnimating>()
            );
    }

    static void* extract_C_BaseAnimating(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseAnimatingOverlay > C_BaseAnimatingOverlayHANDLE;

struct ptr_C_BaseAnimatingOverlay_to_handle : bp::to_python_converter<C_BaseAnimatingOverlay *, ptr_C_BaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(C_BaseAnimatingOverlay *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseAnimatingOverlay_to_handle : bp::to_python_converter<C_BaseAnimatingOverlay, C_BaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(const C_BaseAnimatingOverlay &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseAnimatingOverlay
{
    handle_to_C_BaseAnimatingOverlay()
    {
        bp::converter::registry::insert(
            &extract_C_BaseAnimatingOverlay, 
            bp::type_id<C_BaseAnimatingOverlay>()
            );
    }

    static void* extract_C_BaseAnimatingOverlay(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseFlex > C_BaseFlexHANDLE;

struct ptr_C_BaseFlex_to_handle : bp::to_python_converter<C_BaseFlex *, ptr_C_BaseFlex_to_handle>
{
    static PyObject* convert(C_BaseFlex *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseFlex_to_handle : bp::to_python_converter<C_BaseFlex, C_BaseFlex_to_handle>
{
    static PyObject* convert(const C_BaseFlex &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseFlex
{
    handle_to_C_BaseFlex()
    {
        bp::converter::registry::insert(
            &extract_C_BaseFlex, 
            bp::type_id<C_BaseFlex>()
            );
    }

    static void* extract_C_BaseFlex(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseCombatCharacter > C_BaseCombatCharacterHANDLE;

struct ptr_C_BaseCombatCharacter_to_handle : bp::to_python_converter<C_BaseCombatCharacter *, ptr_C_BaseCombatCharacter_to_handle>
{
    static PyObject* convert(C_BaseCombatCharacter *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseCombatCharacter_to_handle : bp::to_python_converter<C_BaseCombatCharacter, C_BaseCombatCharacter_to_handle>
{
    static PyObject* convert(const C_BaseCombatCharacter &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseCombatCharacter
{
    handle_to_C_BaseCombatCharacter()
    {
        bp::converter::registry::insert(
            &extract_C_BaseCombatCharacter, 
            bp::type_id<C_BaseCombatCharacter>()
            );
    }

    static void* extract_C_BaseCombatCharacter(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseGrenade > C_BaseGrenadeHANDLE;

struct ptr_C_BaseGrenade_to_handle : bp::to_python_converter<C_BaseGrenade *, ptr_C_BaseGrenade_to_handle>
{
    static PyObject* convert(C_BaseGrenade *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseGrenade_to_handle : bp::to_python_converter<C_BaseGrenade, C_BaseGrenade_to_handle>
{
    static PyObject* convert(const C_BaseGrenade &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseGrenade
{
    handle_to_C_BaseGrenade()
    {
        bp::converter::registry::insert(
            &extract_C_BaseGrenade, 
            bp::type_id<C_BaseGrenade>()
            );
    }

    static void* extract_C_BaseGrenade(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BasePlayer > C_BasePlayerHANDLE;

struct ptr_C_BasePlayer_to_handle : bp::to_python_converter<C_BasePlayer *, ptr_C_BasePlayer_to_handle>
{
    static PyObject* convert(C_BasePlayer *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BasePlayer_to_handle : bp::to_python_converter<C_BasePlayer, C_BasePlayer_to_handle>
{
    static PyObject* convert(const C_BasePlayer &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BasePlayer
{
    handle_to_C_BasePlayer()
    {
        bp::converter::registry::insert(
            &extract_C_BasePlayer, 
            bp::type_id<C_BasePlayer>()
            );
    }

    static void* extract_C_BasePlayer(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseCombatWeapon > C_BaseCombatWeaponHANDLE;

struct ptr_C_BaseCombatWeapon_to_handle : bp::to_python_converter<C_BaseCombatWeapon *, ptr_C_BaseCombatWeapon_to_handle>
{
    static PyObject* convert(C_BaseCombatWeapon *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseCombatWeapon_to_handle : bp::to_python_converter<C_BaseCombatWeapon, C_BaseCombatWeapon_to_handle>
{
    static PyObject* convert(const C_BaseCombatWeapon &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseCombatWeapon
{
    handle_to_C_BaseCombatWeapon()
    {
        bp::converter::registry::insert(
            &extract_C_BaseCombatWeapon, 
            bp::type_id<C_BaseCombatWeapon>()
            );
    }

    static void* extract_C_BaseCombatWeapon(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

BOOST_PYTHON_MODULE(_entities){
    bp::docstring_options doc_options( true, true, false );

    register_CBaseHandle_class();

    register_IHandleEntity_class();

    register_IClientUnknown_class();

    register_IClientEntity_class();

    register_C_BaseEntity_class();

    register_C_BaseAnimating_class();

    register_C_BaseAnimatingOverlay_class();

    register_C_BaseFlex_class();

    register_C_BaseCombatCharacter_class();

    register_C_BaseCombatWeapon_class();

    register_C_BaseGrenade_class();

    register_C_BasePlayer_class();

    register_DeadEntity_class();

    { //::C_BaseEntityHANDLE
        typedef bp::class_< C_BaseEntityHANDLE, bp::bases< CBaseHandle > > C_BaseEntityHANDLE_exposer_t;
        C_BaseEntityHANDLE_exposer_t C_BaseEntityHANDLE_exposer = C_BaseEntityHANDLE_exposer_t( "C_BaseEntityHANDLE", bp::init< >() );
        C_BaseEntityHANDLE_exposer.def( bp::init< C_BaseEntity * >(( bp::arg("pVal") )) );
        C_BaseEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseEntityHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseEntityHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseEntityHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseEntityHANDLE::Cmp
        
            typedef bool ( ::C_BaseEntityHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseEntityHANDLE::Cmp )
            );
        
        }
        { //::C_BaseEntityHANDLE::NonZero
        
            typedef bool ( ::C_BaseEntityHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseEntityHANDLE::NonZero )
            );
        
        }
        { //::C_BaseEntityHANDLE::Set
        
            typedef void ( ::C_BaseEntityHANDLE::*Set_function_type )( C_BaseEntity * ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseEntityHANDLE::Set )
            );
        
        }
        { //::C_BaseEntityHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseEntityHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseEntityHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseEntityHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseEntityHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseEntityHANDLE_exposer.def( bp::self != bp::self );
        C_BaseEntityHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseEntity_to_handle();

    C_BaseEntity_to_handle();

    handle_to_C_BaseEntity();

    { //::C_BaseAnimatingHANDLE
        typedef bp::class_< C_BaseAnimatingHANDLE, bp::bases< CBaseHandle > > C_BaseAnimatingHANDLE_exposer_t;
        C_BaseAnimatingHANDLE_exposer_t C_BaseAnimatingHANDLE_exposer = C_BaseAnimatingHANDLE_exposer_t( "C_BaseAnimatingHANDLE", bp::init< >() );
        C_BaseAnimatingHANDLE_exposer.def( bp::init< C_BaseAnimating * >(( bp::arg("pVal") )) );
        C_BaseAnimatingHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseAnimatingHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseAnimatingHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseAnimatingHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseAnimatingHANDLE::Cmp
        
            typedef bool ( ::C_BaseAnimatingHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseAnimatingHANDLE::Cmp )
            );
        
        }
        { //::C_BaseAnimatingHANDLE::NonZero
        
            typedef bool ( ::C_BaseAnimatingHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseAnimatingHANDLE::NonZero )
            );
        
        }
        { //::C_BaseAnimatingHANDLE::Set
        
            typedef void ( ::C_BaseAnimatingHANDLE::*Set_function_type )( C_BaseAnimating * ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseAnimatingHANDLE::Set )
            );
        
        }
        { //::C_BaseAnimatingHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseAnimatingHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseAnimatingHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseAnimatingHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseAnimatingHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseAnimatingHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseAnimatingHANDLE_exposer.def( bp::self != bp::self );
        C_BaseAnimatingHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseAnimating_to_handle();

    C_BaseAnimating_to_handle();

    handle_to_C_BaseAnimating();

    { //::C_BaseAnimatingOverlayHANDLE
        typedef bp::class_< C_BaseAnimatingOverlayHANDLE, bp::bases< CBaseHandle > > C_BaseAnimatingOverlayHANDLE_exposer_t;
        C_BaseAnimatingOverlayHANDLE_exposer_t C_BaseAnimatingOverlayHANDLE_exposer = C_BaseAnimatingOverlayHANDLE_exposer_t( "C_BaseAnimatingOverlayHANDLE", bp::init< >() );
        C_BaseAnimatingOverlayHANDLE_exposer.def( bp::init< C_BaseAnimatingOverlay * >(( bp::arg("pVal") )) );
        C_BaseAnimatingOverlayHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseAnimatingOverlayHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseAnimatingOverlayHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseAnimatingOverlayHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseAnimatingOverlayHANDLE::Cmp
        
            typedef bool ( ::C_BaseAnimatingOverlayHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseAnimatingOverlayHANDLE::Cmp )
            );
        
        }
        { //::C_BaseAnimatingOverlayHANDLE::NonZero
        
            typedef bool ( ::C_BaseAnimatingOverlayHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseAnimatingOverlayHANDLE::NonZero )
            );
        
        }
        { //::C_BaseAnimatingOverlayHANDLE::Set
        
            typedef void ( ::C_BaseAnimatingOverlayHANDLE::*Set_function_type )( C_BaseAnimatingOverlay * ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseAnimatingOverlayHANDLE::Set )
            );
        
        }
        { //::C_BaseAnimatingOverlayHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseAnimatingOverlayHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseAnimatingOverlayHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseAnimatingOverlayHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseAnimatingOverlayHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseAnimatingOverlayHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseAnimatingOverlayHANDLE_exposer.def( bp::self != bp::self );
        C_BaseAnimatingOverlayHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseAnimatingOverlay_to_handle();

    C_BaseAnimatingOverlay_to_handle();

    handle_to_C_BaseAnimatingOverlay();

    { //::C_BaseFlexHANDLE
        typedef bp::class_< C_BaseFlexHANDLE, bp::bases< CBaseHandle > > C_BaseFlexHANDLE_exposer_t;
        C_BaseFlexHANDLE_exposer_t C_BaseFlexHANDLE_exposer = C_BaseFlexHANDLE_exposer_t( "C_BaseFlexHANDLE", bp::init< >() );
        C_BaseFlexHANDLE_exposer.def( bp::init< C_BaseFlex * >(( bp::arg("pVal") )) );
        C_BaseFlexHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseFlexHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseFlexHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseFlexHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseFlexHANDLE::Cmp
        
            typedef bool ( ::C_BaseFlexHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseFlexHANDLE::Cmp )
            );
        
        }
        { //::C_BaseFlexHANDLE::NonZero
        
            typedef bool ( ::C_BaseFlexHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseFlexHANDLE::NonZero )
            );
        
        }
        { //::C_BaseFlexHANDLE::Set
        
            typedef void ( ::C_BaseFlexHANDLE::*Set_function_type )( C_BaseFlex * ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseFlexHANDLE::Set )
            );
        
        }
        { //::C_BaseFlexHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseFlexHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseFlexHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseFlexHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseFlexHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseFlexHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseFlexHANDLE_exposer.def( bp::self != bp::self );
        C_BaseFlexHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseFlex_to_handle();

    C_BaseFlex_to_handle();

    handle_to_C_BaseFlex();

    { //::C_BaseCombatCharacterHANDLE
        typedef bp::class_< C_BaseCombatCharacterHANDLE, bp::bases< CBaseHandle > > C_BaseCombatCharacterHANDLE_exposer_t;
        C_BaseCombatCharacterHANDLE_exposer_t C_BaseCombatCharacterHANDLE_exposer = C_BaseCombatCharacterHANDLE_exposer_t( "C_BaseCombatCharacterHANDLE", bp::init< >() );
        C_BaseCombatCharacterHANDLE_exposer.def( bp::init< C_BaseCombatCharacter * >(( bp::arg("pVal") )) );
        C_BaseCombatCharacterHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseCombatCharacterHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseCombatCharacterHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseCombatCharacterHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseCombatCharacterHANDLE::Cmp
        
            typedef bool ( ::C_BaseCombatCharacterHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseCombatCharacterHANDLE::Cmp )
            );
        
        }
        { //::C_BaseCombatCharacterHANDLE::NonZero
        
            typedef bool ( ::C_BaseCombatCharacterHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseCombatCharacterHANDLE::NonZero )
            );
        
        }
        { //::C_BaseCombatCharacterHANDLE::Set
        
            typedef void ( ::C_BaseCombatCharacterHANDLE::*Set_function_type )( C_BaseCombatCharacter * ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseCombatCharacterHANDLE::Set )
            );
        
        }
        { //::C_BaseCombatCharacterHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseCombatCharacterHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseCombatCharacterHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseCombatCharacterHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseCombatCharacterHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseCombatCharacterHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseCombatCharacterHANDLE_exposer.def( bp::self != bp::self );
        C_BaseCombatCharacterHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseCombatCharacter_to_handle();

    C_BaseCombatCharacter_to_handle();

    handle_to_C_BaseCombatCharacter();

    { //::C_BaseGrenadeHANDLE
        typedef bp::class_< C_BaseGrenadeHANDLE, bp::bases< CBaseHandle > > C_BaseGrenadeHANDLE_exposer_t;
        C_BaseGrenadeHANDLE_exposer_t C_BaseGrenadeHANDLE_exposer = C_BaseGrenadeHANDLE_exposer_t( "C_BaseGrenadeHANDLE", bp::init< >() );
        C_BaseGrenadeHANDLE_exposer.def( bp::init< C_BaseGrenade * >(( bp::arg("pVal") )) );
        C_BaseGrenadeHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseGrenadeHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseGrenadeHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseGrenadeHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseGrenadeHANDLE::Cmp
        
            typedef bool ( ::C_BaseGrenadeHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseGrenadeHANDLE::Cmp )
            );
        
        }
        { //::C_BaseGrenadeHANDLE::NonZero
        
            typedef bool ( ::C_BaseGrenadeHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseGrenadeHANDLE::NonZero )
            );
        
        }
        { //::C_BaseGrenadeHANDLE::Set
        
            typedef void ( ::C_BaseGrenadeHANDLE::*Set_function_type )( C_BaseGrenade * ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseGrenadeHANDLE::Set )
            );
        
        }
        { //::C_BaseGrenadeHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseGrenadeHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseGrenadeHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseGrenadeHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseGrenadeHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseGrenadeHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseGrenadeHANDLE_exposer.def( bp::self != bp::self );
        C_BaseGrenadeHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseGrenade_to_handle();

    C_BaseGrenade_to_handle();

    handle_to_C_BaseGrenade();

    { //::C_BasePlayerHANDLE
        typedef bp::class_< C_BasePlayerHANDLE, bp::bases< CBaseHandle > > C_BasePlayerHANDLE_exposer_t;
        C_BasePlayerHANDLE_exposer_t C_BasePlayerHANDLE_exposer = C_BasePlayerHANDLE_exposer_t( "C_BasePlayerHANDLE", bp::init< >() );
        C_BasePlayerHANDLE_exposer.def( bp::init< C_BasePlayer * >(( bp::arg("pVal") )) );
        C_BasePlayerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BasePlayerHANDLE::GetAttr
        
            typedef bp::object ( ::C_BasePlayerHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BasePlayerHANDLE::GetAttr )
            );
        
        }
        { //::C_BasePlayerHANDLE::Cmp
        
            typedef bool ( ::C_BasePlayerHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BasePlayerHANDLE::Cmp )
            );
        
        }
        { //::C_BasePlayerHANDLE::NonZero
        
            typedef bool ( ::C_BasePlayerHANDLE::*NonZero_function_type )( ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BasePlayerHANDLE::NonZero )
            );
        
        }
        { //::C_BasePlayerHANDLE::Set
        
            typedef void ( ::C_BasePlayerHANDLE::*Set_function_type )( C_BasePlayer * ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BasePlayerHANDLE::Set )
            );
        
        }
        { //::C_BasePlayerHANDLE::GetSerialNumber
        
            typedef int ( ::C_BasePlayerHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BasePlayerHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BasePlayerHANDLE::GetEntryIndex
        
            typedef int ( ::C_BasePlayerHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BasePlayerHANDLE::GetEntryIndex )
            );
        
        }
        C_BasePlayerHANDLE_exposer.def( bp::self != bp::self );
        C_BasePlayerHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BasePlayer_to_handle();

    C_BasePlayer_to_handle();

    handle_to_C_BasePlayer();

    { //::C_BaseCombatWeaponHANDLE
        typedef bp::class_< C_BaseCombatWeaponHANDLE, bp::bases< CBaseHandle > > C_BaseCombatWeaponHANDLE_exposer_t;
        C_BaseCombatWeaponHANDLE_exposer_t C_BaseCombatWeaponHANDLE_exposer = C_BaseCombatWeaponHANDLE_exposer_t( "C_BaseCombatWeaponHANDLE", bp::init< >() );
        C_BaseCombatWeaponHANDLE_exposer.def( bp::init< C_BaseCombatWeapon * >(( bp::arg("pVal") )) );
        C_BaseCombatWeaponHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseCombatWeaponHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseCombatWeaponHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseCombatWeaponHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseCombatWeaponHANDLE::Cmp
        
            typedef bool ( ::C_BaseCombatWeaponHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseCombatWeaponHANDLE::Cmp )
            );
        
        }
        { //::C_BaseCombatWeaponHANDLE::NonZero
        
            typedef bool ( ::C_BaseCombatWeaponHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseCombatWeaponHANDLE::NonZero )
            );
        
        }
        { //::C_BaseCombatWeaponHANDLE::Set
        
            typedef void ( ::C_BaseCombatWeaponHANDLE::*Set_function_type )( C_BaseCombatWeapon * ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseCombatWeaponHANDLE::Set )
            );
        
        }
        { //::C_BaseCombatWeaponHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseCombatWeaponHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseCombatWeaponHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseCombatWeaponHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseCombatWeaponHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseCombatWeaponHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseCombatWeaponHANDLE_exposer.def( bp::self != bp::self );
        C_BaseCombatWeaponHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseCombatWeapon_to_handle();

    C_BaseCombatWeapon_to_handle();

    handle_to_C_BaseCombatWeapon();

    register_PyHandle_class();
}


