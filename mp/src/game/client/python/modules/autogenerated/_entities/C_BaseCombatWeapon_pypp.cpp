// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "takedamageinfo.h"
#include "c_ai_basenpc.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "C_BaseCombatWeapon_pypp.hpp"

namespace bp = boost::python;

struct C_BaseCombatWeapon_wrapper : C_BaseCombatWeapon, bp::wrapper< C_BaseCombatWeapon > {

    C_BaseCombatWeapon_wrapper( )
    : C_BaseCombatWeapon( )
      , bp::wrapper< C_BaseCombatWeapon >(){
        // null constructor
    
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::Activate(  );
            }
        else
            this->C_BaseCombatWeapon::Activate(  );
    }
    
    void default_Activate(  ) {
        C_BaseCombatWeapon::Activate( );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->C_BaseCombatWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        C_BaseCombatWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::Precache(  );
            }
        else
            this->C_BaseCombatWeapon::Precache(  );
    }
    
    void default_Precache(  ) {
        C_BaseCombatWeapon::Precache( );
    }

    virtual void PrimaryAttack(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PrimaryAttack: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PrimaryAttack(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PrimaryAttack = this->get_override( "PrimaryAttack" );
        if( func_PrimaryAttack.ptr() != Py_None )
            try {
                func_PrimaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::PrimaryAttack(  );
            }
        else
            this->C_BaseCombatWeapon::PrimaryAttack(  );
    }
    
    void default_PrimaryAttack(  ) {
        C_BaseCombatWeapon::PrimaryAttack( );
    }

    virtual void SecondaryAttack(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SecondaryAttack: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SecondaryAttack(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SecondaryAttack = this->get_override( "SecondaryAttack" );
        if( func_SecondaryAttack.ptr() != Py_None )
            try {
                func_SecondaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::SecondaryAttack(  );
            }
        else
            this->C_BaseCombatWeapon::SecondaryAttack(  );
    }
    
    void default_SecondaryAttack(  ) {
        C_BaseCombatWeapon::SecondaryAttack( );
    }

    virtual bool ShouldDraw(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldDraw: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldDraw(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldDraw = this->get_override( "ShouldDraw" );
        if( func_ShouldDraw.ptr() != Py_None )
            try {
                return func_ShouldDraw(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseCombatWeapon::ShouldDraw(  );
            }
        else
            return this->C_BaseCombatWeapon::ShouldDraw(  );
    }
    
    bool default_ShouldDraw(  ) {
        return C_BaseCombatWeapon::ShouldDraw( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::Spawn(  );
            }
        else
            this->C_BaseCombatWeapon::Spawn(  );
    }
    
    void default_Spawn(  ) {
        C_BaseCombatWeapon::Spawn( );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::CreateVPhysics(  );
            }
        else
            return this->C_BaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return C_BaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual ::CollideType_t GetCollideType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetCollideType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetCollideType(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetCollideType = this->get_override( "GetCollideType" );
        if( func_GetCollideType.ptr() != Py_None )
            try {
                return func_GetCollideType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseAnimating::GetCollideType(  );
            }
        else
            return this->C_BaseAnimating::GetCollideType(  );
    }
    
    ::CollideType_t default_GetCollideType(  ) {
        return C_BaseAnimating::GetCollideType( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetTracerType(  );
            }
        else
            return this->C_BaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return C_BaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return C_BaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return C_BaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::UpdateOnRemove(  );
            }
        else
            this->C_BaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        C_BaseEntity::UpdateOnRemove( );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ClientClass* GetClientClass() {
    if( GetCurrentThreadId() != g_hPythonThreadID )
        return C_BaseCombatWeapon::GetClientClass();
    ClientClass *pClientClass = SrcPySystem()->Get<ClientClass *>( "pyClientClass", GetPyInstance(), NULL, true );
    if( pClientClass )
        return pClientClass;
    return C_BaseCombatWeapon::GetClientClass();
}

};

void register_C_BaseCombatWeapon_class(){

    bp::class_< C_BaseCombatWeapon_wrapper, bp::bases< C_BaseAnimating >, boost::noncopyable >( "C_BaseCombatWeapon", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AbortReload"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::AbortReload ) )    
        .def( 
            "Activate"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )(&::C_BaseCombatWeapon::Activate)
            , (void ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_Activate) )    
        .def( 
            "ActivityListCount"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ActivityListCount ) )    
        .def( 
            "ActivityOverride"
            , (::Activity ( ::C_BaseCombatWeapon::* )( ::Activity,bool * ) )( &::C_BaseCombatWeapon::ActivityOverride )
            , ( bp::arg("baseAct"), bp::arg("pRequired") ) )    
        .def( 
            "AddLookShift"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::AddLookShift ) )    
        .def( 
            "AddViewKick"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::AddViewKick ) )    
        .def( 
            "AddViewmodelBob"
            , (void ( ::C_BaseCombatWeapon::* )( ::C_BaseViewModel *,::Vector &,::QAngle & ) )( &::C_BaseCombatWeapon::AddViewmodelBob )
            , ( bp::arg("viewmodel"), bp::arg("origin"), bp::arg("angles") ) )    
        .def( 
            "AllowsAutoSwitchFrom"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::AllowsAutoSwitchFrom ) )    
        .def( 
            "AllowsAutoSwitchTo"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::AllowsAutoSwitchTo ) )    
        .def( 
            "AutoFiresFullClip"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::AutoFiresFullClip ) )    
        .def( 
            "BoneMergeFastCullBloat"
            , (void ( ::C_BaseCombatWeapon::* )( ::Vector &,::Vector &,::Vector const &,::Vector const & ) const)( &::C_BaseCombatWeapon::BoneMergeFastCullBloat )
            , ( bp::arg("localMins"), bp::arg("localMaxs"), bp::arg("thisEntityMins"), bp::arg("thisEntityMaxs") ) )    
        .def( 
            "CalcOverrideModelIndex"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CalcOverrideModelIndex ) )    
        .def( 
            "CalcViewmodelBob"
            , (float ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CalcViewmodelBob ) )    
        .def( 
            "CanBePickedUpByNPCs"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CanBePickedUpByNPCs ) )    
        .def( 
            "CanBeSelected"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CanBeSelected ) )    
        .def( 
            "CanDeploy"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CanDeploy ) )    
        .def( 
            "CanHolster"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CanHolster ) )    
        .def( 
            "CanLower"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CanLower ) )    
        .def( 
            "CanOverload"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CanOverload ) )    
        .def( 
            "CanReload"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CanReload ) )    
        .def( 
            "CheckReload"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::CheckReload ) )    
        .def( 
            "Clip1"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::Clip1 ) )    
        .def( 
            "Clip2"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::Clip2 ) )    
        .def( 
            "CreateMove"
            , (void ( ::C_BaseCombatWeapon::* )( float,::CUserCmd *,::QAngle const & ) )( &::C_BaseCombatWeapon::CreateMove )
            , ( bp::arg("flInputSampleTime"), bp::arg("pCmd"), bp::arg("vecOldViewAngles") ) )    
        .def( 
            "DefaultDeploy"
            , (bool ( ::C_BaseCombatWeapon::* )( char *,char *,int,char * ) )( &::C_BaseCombatWeapon::DefaultDeploy )
            , ( bp::arg("szViewModel"), bp::arg("szWeaponModel"), bp::arg("iActivity"), bp::arg("szAnimExt") ) )    
        .def( 
            "DefaultReload"
            , (bool ( ::C_BaseCombatWeapon::* )( int,int,int ) )( &::C_BaseCombatWeapon::DefaultReload )
            , ( bp::arg("iClipSize1"), bp::arg("iClipSize2"), bp::arg("iActivity") ) )    
        .def( 
            "DefaultTouch"
            , (void ( ::C_BaseCombatWeapon::* )( ::C_BaseEntity * ) )( &::C_BaseCombatWeapon::DefaultTouch )
            , ( bp::arg("pOther") ) )    
        .def( 
            "Deploy"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::Deploy ) )    
        .def( 
            "Detach"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::Detach ) )    
        .def( 
            "DisplayAltFireHudHint"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::DisplayAltFireHudHint ) )    
        .def( 
            "DisplayReloadHudHint"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::DisplayReloadHudHint ) )    
        .def( 
            "DrawCrosshair"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::DrawCrosshair ) )    
        .def( 
            "DrawModel"
            , (int ( ::C_BaseCombatWeapon::* )( int ) )( &::C_BaseCombatWeapon::DrawModel )
            , ( bp::arg("flags") ) )    
        .def( 
            "DrawOverriddenViewmodel"
            , (int ( ::C_BaseCombatWeapon::* )( ::C_BaseViewModel *,int ) )( &::C_BaseCombatWeapon::DrawOverriddenViewmodel )
            , ( bp::arg("pViewmodel"), bp::arg("flags") ) )    
        .def( 
            "Drop"
            , (void ( ::C_BaseCombatWeapon::* )( ::Vector const & ) )( &::C_BaseCombatWeapon::Drop )
            , ( bp::arg("vecVelocity") ) )    
        .def( 
            "Equip"
            , (void ( ::C_BaseCombatWeapon::* )( ::C_BaseCombatCharacter * ) )( &::C_BaseCombatWeapon::Equip )
            , ( bp::arg("pOwner") ) )    
        .def( 
            "FinishReload"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::FinishReload ) )    
        .def( 
            "GetActivity"
            , (::Activity ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetActivity ) )    
        .def( 
            "GetAnimPrefix"
            , (char const * ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetAnimPrefix ) )    
        .def( 
            "GetBulletSpread"
            , (::Vector const & ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetBulletSpread )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetBulletSpread"
            , (::Vector ( ::C_BaseCombatWeapon::* )( ::WeaponProficiency_t ) )( &::C_BaseCombatWeapon::GetBulletSpread )
            , ( bp::arg("proficiency") ) )    
        .def( 
            "GetBulletType"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetBulletType ) )    
        .def( 
            "GetControlPanelClassName"
            , (void ( ::C_BaseCombatWeapon::* )( int,char const * & ) )( &::C_BaseCombatWeapon::GetControlPanelClassName )
            , ( bp::arg("nPanelIndex"), bp::arg("pPanelName") ) )    
        .def( 
            "GetControlPanelInfo"
            , (void ( ::C_BaseCombatWeapon::* )( int,char const * & ) )( &::C_BaseCombatWeapon::GetControlPanelInfo )
            , ( bp::arg("nPanelIndex"), bp::arg("pPanelName") ) )    
        .def( 
            "GetDamage"
            , (float ( ::C_BaseCombatWeapon::* )( float,int ) )( &::C_BaseCombatWeapon::GetDamage )
            , ( bp::arg("flDistance"), bp::arg("iLocation") ) )    
        .def( 
            "GetDefaultAnimSpeed"
            , (float ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetDefaultAnimSpeed ) )    
        .def( 
            "GetDefaultClip1"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetDefaultClip1 ) )    
        .def( 
            "GetDefaultClip2"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetDefaultClip2 ) )    
        .def( 
            "GetDrawActivity"
            , (::Activity ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetDrawActivity ) )    
        .def( 
            "GetFireRate"
            , (float ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetFireRate ) )    
        .def( 
            "GetIdealActivity"
            , (::Activity ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetIdealActivity ) )    
        .def( 
            "GetIdealSequence"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetIdealSequence ) )    
        .def( 
            "GetLastWeapon"
            , (::C_BaseCombatWeapon * ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetLastWeapon )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetMaxAutoAimDeflection"
            , (float ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetMaxAutoAimDeflection ) )    
        .def( 
            "GetMaxBurst"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetMaxBurst ) )    
        .def( 
            "GetMaxClip1"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetMaxClip1 ) )    
        .def( 
            "GetMaxClip2"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetMaxClip2 ) )    
        .def( 
            "GetMaxRestTime"
            , (float ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetMaxRestTime ) )    
        .def( 
            "GetMinBurst"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetMinBurst ) )    
        .def( 
            "GetMinRestTime"
            , (float ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetMinRestTime ) )    
        .def( 
            "GetName"
            , (char const * ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetName ) )    
        .def( 
            "GetOwner"
            , (::C_BaseCombatCharacter * ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetOwner )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetPosition"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetPosition ) )    
        .def( 
            "GetPrimaryAmmoCount"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetPrimaryAmmoCount ) )    
        .def( 
            "GetPrimaryAmmoType"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetPrimaryAmmoType ) )    
        .def( 
            "GetPrimaryAttackActivity"
            , (::Activity ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetPrimaryAttackActivity ) )    
        .def( 
            "GetPrintName"
            , (char const * ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetPrintName ) )    
        .def( 
            "GetPyNetworkType"
            , (int (*)(  ))( &::C_BaseCombatWeapon::GetPyNetworkType ) )    
        .def( 
            "GetRandomBurst"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetRandomBurst ) )    
        .def( 
            "GetRumbleEffect"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetRumbleEffect ) )    
        .def( 
            "GetSecondaryAmmoCount"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetSecondaryAmmoCount ) )    
        .def( 
            "GetSecondaryAmmoType"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetSecondaryAmmoType ) )    
        .def( 
            "GetSecondaryAttackActivity"
            , (::Activity ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetSecondaryAttackActivity ) )    
        .def( 
            "GetShootPosition"
            , (bool ( ::C_BaseCombatWeapon::* )( ::Vector &,::QAngle & ) )( &::C_BaseCombatWeapon::GetShootPosition )
            , ( bp::arg("vOrigin"), bp::arg("vAngles") ) )    
        .def( 
            "GetShootSound"
            , (char const * ( ::C_BaseCombatWeapon::* )( int ) const)( &::C_BaseCombatWeapon::GetShootSound )
            , ( bp::arg("iIndex") ) )    
        .def( 
            "GetSkinOverride"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetSkinOverride ) )    
        .def( 
            "GetSlot"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetSlot ) )    
        .def( 
            "GetSpreadBias"
            , (float ( ::C_BaseCombatWeapon::* )( ::WeaponProficiency_t ) )( &::C_BaseCombatWeapon::GetSpreadBias )
            , ( bp::arg("proficiency") ) )    
        .def( 
            "GetSubType"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetSubType ) )    
        .def( 
            "GetToolRecordingState"
            , (void ( ::C_BaseCombatWeapon::* )( ::KeyValues * ) )( &::C_BaseCombatWeapon::GetToolRecordingState )
            , ( bp::arg("msg") ) )    
        .def( 
            "GetViewModel"
            , (char const * ( ::C_BaseCombatWeapon::* )( int ) const)( &::C_BaseCombatWeapon::GetViewModel )
            , ( bp::arg("viewmodelindex")=(int)(0) ) )    
        .def( 
            "GetViewModelSequenceDuration"
            , (float ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetViewModelSequenceDuration ) )    
        .def( 
            "GetViewmodelBoneControllers"
            , (void ( ::C_BaseCombatWeapon::* )( ::C_BaseViewModel *,float * ) )( &::C_BaseCombatWeapon::GetViewmodelBoneControllers )
            , ( bp::arg("pViewModel"), bp::arg("controllers") ) )    
        .def( 
            "GetWeaponCrosshairScale"
            , (void ( ::C_BaseCombatWeapon::* )( float & ) )( &::C_BaseCombatWeapon::GetWeaponCrosshairScale )
            , ( bp::arg("flScale") ) )    
        .def( 
            "GetWeaponFileInfoHandle"
            , (::WEAPON_FILE_INFO_HANDLE ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetWeaponFileInfoHandle ) )    
        .def( 
            "GetWeaponFlags"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetWeaponFlags ) )    
        .def( 
            "GetWeaponIdleTime"
            , (float ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetWeaponIdleTime ) )    
        .def( 
            "GetWeight"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetWeight ) )    
        .def( 
            "GetWorldModel"
            , (char const * ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetWorldModel ) )    
        .def( 
            "GetWorldModelIndex"
            , (int ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GetWorldModelIndex ) )    
        .def( 
            "GetWpnData"
            , (::FileWeaponInfo_t const & ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::GetWpnData )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GiveDefaultAmmo"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::GiveDefaultAmmo ) )    
        .def( 
            "GiveTo"
            , (void ( ::C_BaseCombatWeapon::* )( ::C_BaseEntity * ) )( &::C_BaseCombatWeapon::GiveTo )
            , ( bp::arg("pOther") ) )    
        .def( 
            "HandleFireOnEmpty"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::HandleFireOnEmpty ) )    
        .def( 
            "HandleInput"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::HandleInput ) )    
        .def( 
            "HasAmmo"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::HasAmmo ) )    
        .def( 
            "HasAnyAmmo"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::HasAnyAmmo ) )    
        .def( 
            "HasPrimaryAmmo"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::HasPrimaryAmmo ) )    
        .def( 
            "HasSecondaryAmmo"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::HasSecondaryAmmo ) )    
        .def( 
            "HasWeaponIdleTimeElapsed"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::HasWeaponIdleTimeElapsed ) )    
        .def( 
            "HideThink"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::HideThink ) )    
        .def( 
            "Holster"
            , (bool ( ::C_BaseCombatWeapon::* )( ::C_BaseCombatWeapon * ) )( &::C_BaseCombatWeapon::Holster )
            , ( bp::arg("pSwitchingTo")=bp::object() ) )    
        .def( 
            "HolsterOnDetach"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::HolsterOnDetach ) )    
        .def( 
            "IsActiveByLocalPlayer"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::IsActiveByLocalPlayer ) )    
        .def( 
            "IsAllowedToSwitch"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::IsAllowedToSwitch ) )    
        .def( 
            "IsBaseCombatWeapon"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::IsBaseCombatWeapon ) )    
        .def( 
            "IsBeingCarried"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::IsBeingCarried ) )    
        .def( 
            "IsCarriedByLocalPlayer"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::IsCarriedByLocalPlayer ) )    
        .def( 
            "IsCarrierAlive"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::IsCarrierAlive ) )    
        .def( 
            "IsHolstered"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::IsHolstered ) )    
        .def( 
            "IsLocked"
            , (bool ( ::C_BaseCombatWeapon::* )( ::C_BaseEntity * ) )( &::C_BaseCombatWeapon::IsLocked )
            , ( bp::arg("pAsker") ) )    
        .def( 
            "IsMeleeWeapon"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::IsMeleeWeapon ) )    
        .def( 
            "IsOverridingViewmodel"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::IsOverridingViewmodel ) )    
        .def( 
            "IsPredicted"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::IsPredicted ) )    
        .def( 
            "IsViewModelSequenceFinished"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::IsViewModelSequenceFinished ) )    
        .def( 
            "IsWeaponVisible"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::IsWeaponVisible ) )    
        .def( 
            "IsWeaponZoomed"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::IsWeaponZoomed ) )    
        .def( 
            "ItemBusyFrame"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ItemBusyFrame ) )    
        .def( 
            "ItemHolsterFrame"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ItemHolsterFrame ) )    
        .def( 
            "ItemPostFrame"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ItemPostFrame ) )    
        .def( 
            "ItemPreFrame"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ItemPreFrame ) )    
        .def( 
            "KeyInput"
            , (int ( ::C_BaseCombatWeapon::* )( int,::ButtonCode_t,char const * ) )( &::C_BaseCombatWeapon::KeyInput )
            , ( bp::arg("down"), bp::arg("keynum"), bp::arg("pszCurrentBinding") ) )    
        .def( 
            "Lock"
            , (void ( ::C_BaseCombatWeapon::* )( float,::C_BaseEntity * ) )( &::C_BaseCombatWeapon::Lock )
            , ( bp::arg("lockTime"), bp::arg("pLocker") ) )    
        .def( 
            "Lower"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::Lower ) )    
        .def( 
            "MaintainIdealActivity"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::MaintainIdealActivity ) )    
        .def( 
            "MakeTracer"
            , (void ( ::C_BaseCombatWeapon::* )( ::Vector const &,::trace_t const &,int ) )(&::C_BaseCombatWeapon::MakeTracer)
            , (void ( C_BaseCombatWeapon_wrapper::* )( ::Vector const &,::trace_t const &,int ) )(&C_BaseCombatWeapon_wrapper::default_MakeTracer)
            , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) )    
        .def( 
            "MyCombatWeaponPointer"
            , (::C_BaseCombatWeapon * ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::MyCombatWeaponPointer )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "NetworkStateChanged_m_nNextThinkTick"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick ) )    
        .def( 
            "NetworkStateChanged_m_nNextThinkTick"
            , (void ( ::C_BaseCombatWeapon::* )( void * ) )( &::C_BaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NotifyShouldTransmit"
            , (void ( ::C_BaseCombatWeapon::* )( ::ShouldTransmitState_t ) )( &::C_BaseCombatWeapon::NotifyShouldTransmit )
            , ( bp::arg("state") ) )    
        .def( 
            "OnActiveStateChanged"
            , (void ( ::C_BaseCombatWeapon::* )( int ) )( &::C_BaseCombatWeapon::OnActiveStateChanged )
            , ( bp::arg("iOldState") ) )    
        .def( 
            "OnDataChanged"
            , (void ( ::C_BaseCombatWeapon::* )( ::DataUpdateType_t ) )( &::C_BaseCombatWeapon::OnDataChanged )
            , ( bp::arg("updateType") ) )    
        .def( 
            "OnFireEvent"
            , (bool ( ::C_BaseCombatWeapon::* )( ::C_BaseViewModel *,::Vector const &,::QAngle const &,int,char const * ) )( &::C_BaseCombatWeapon::OnFireEvent )
            , ( bp::arg("pViewModel"), bp::arg("origin"), bp::arg("angles"), bp::arg("event"), bp::arg("options") ) )    
        .def( 
            "OnPickedUp"
            , (void ( ::C_BaseCombatWeapon::* )( ::C_BaseCombatCharacter * ) )( &::C_BaseCombatWeapon::OnPickedUp )
            , ( bp::arg("pNewOwner") ) )    
        .def( 
            "OnRestore"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::OnRestore ) )    
        .def( 
            "OverrideMouseInput"
            , (void ( ::C_BaseCombatWeapon::* )( float *,float * ) )( &::C_BaseCombatWeapon::OverrideMouseInput )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "Precache"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )(&::C_BaseCombatWeapon::Precache)
            , (void ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_Precache) )    
        .def( 
            "PrimaryAttack"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )(&::C_BaseCombatWeapon::PrimaryAttack)
            , (void ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_PrimaryAttack) )    
        .def( 
            "Ready"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::Ready ) )    
        .def( 
            "Redraw"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::Redraw ) )    
        .def( 
            "Reload"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::Reload ) )    
        .def( 
            "ReloadOrSwitchWeapons"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ReloadOrSwitchWeapons ) )    
        .def( 
            "ReloadsSingly"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::ReloadsSingly ) )    
        .def( 
            "RescindAltFireHudHint"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::RescindAltFireHudHint ) )    
        .def( 
            "RescindReloadHudHint"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::RescindReloadHudHint ) )    
        .def( 
            "RestartParticleEffect"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::RestartParticleEffect ) )    
        .def( 
            "SecondaryAttack"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )(&::C_BaseCombatWeapon::SecondaryAttack)
            , (void ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_SecondaryAttack) )    
        .def( 
            "SendViewModelAnim"
            , (void ( ::C_BaseCombatWeapon::* )( int ) )( &::C_BaseCombatWeapon::SendViewModelAnim )
            , ( bp::arg("nSequence") ) )    
        .def( 
            "SendWeaponAnim"
            , (bool ( ::C_BaseCombatWeapon::* )( int ) )( &::C_BaseCombatWeapon::SendWeaponAnim )
            , ( bp::arg("iActivity") ) )    
        .def( 
            "SetActivity"
            , (void ( ::C_BaseCombatWeapon::* )( ::Activity,float ) )( &::C_BaseCombatWeapon::SetActivity )
            , ( bp::arg("act"), bp::arg("duration") ) )    
        .def( 
            "SetActivity"
            , (void ( ::C_BaseCombatWeapon::* )( ::Activity ) )( &::C_BaseCombatWeapon::SetActivity )
            , ( bp::arg("eActivity") ) )    
        .def( 
            "SetDormant"
            , (void ( ::C_BaseCombatWeapon::* )( bool ) )( &::C_BaseCombatWeapon::SetDormant )
            , ( bp::arg("bDormant") ) )    
        .def( 
            "SetIdealActivity"
            , (bool ( ::C_BaseCombatWeapon::* )( ::Activity ) )( &::C_BaseCombatWeapon::SetIdealActivity )
            , ( bp::arg("ideal") ) )    
        .def( 
            "SetOwner"
            , (void ( ::C_BaseCombatWeapon::* )( ::C_BaseCombatCharacter * ) )( &::C_BaseCombatWeapon::SetOwner )
            , ( bp::arg("owner") ) )    
        .def( 
            "SetPickupTouch"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::SetPickupTouch ) )    
        .def( 
            "SetPrimaryAmmoCount"
            , (void ( ::C_BaseCombatWeapon::* )( int ) )( &::C_BaseCombatWeapon::SetPrimaryAmmoCount )
            , ( bp::arg("count") ) )    
        .def( 
            "SetSecondaryAmmoCount"
            , (void ( ::C_BaseCombatWeapon::* )( int ) )( &::C_BaseCombatWeapon::SetSecondaryAmmoCount )
            , ( bp::arg("count") ) )    
        .def( 
            "SetSubType"
            , (void ( ::C_BaseCombatWeapon::* )( int ) )( &::C_BaseCombatWeapon::SetSubType )
            , ( bp::arg("iType") ) )    
        .def( 
            "SetViewModel"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::SetViewModel ) )    
        .def( 
            "SetViewModelIndex"
            , (void ( ::C_BaseCombatWeapon::* )( int ) )( &::C_BaseCombatWeapon::SetViewModelIndex )
            , ( bp::arg("index")=(int)(0) ) )    
        .def( 
            "SetWeaponIdleTime"
            , (void ( ::C_BaseCombatWeapon::* )( float ) )( &::C_BaseCombatWeapon::SetWeaponIdleTime )
            , ( bp::arg("time") ) )    
        .def( 
            "SetWeaponVisible"
            , (void ( ::C_BaseCombatWeapon::* )( bool ) )( &::C_BaseCombatWeapon::SetWeaponVisible )
            , ( bp::arg("visible") ) )    
        .def( 
            "ShadowCastType"
            , (::ShadowType_t ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ShadowCastType ) )    
        .def( 
            "ShouldBlockPrimaryFire"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ShouldBlockPrimaryFire ) )    
        .def( 
            "ShouldDisplayAltFireHUDHint"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ShouldDisplayAltFireHUDHint ) )    
        .def( 
            "ShouldDisplayReloadHUDHint"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ShouldDisplayReloadHUDHint ) )    
        .def( 
            "ShouldDraw"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )(&::C_BaseCombatWeapon::ShouldDraw)
            , (bool ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_ShouldDraw) )    
        .def( 
            "ShouldDrawCrosshair"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ShouldDrawCrosshair ) )    
        .def( 
            "ShouldDrawPickup"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ShouldDrawPickup ) )    
        .def( 
            "ShouldDrawUsingViewModel"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ShouldDrawUsingViewModel ) )    
        .def( 
            "ShouldShowControlPanels"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ShouldShowControlPanels ) )    
        .def( 
            "ShouldUseLargeViewModelVROverride"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ShouldUseLargeViewModelVROverride ) )    
        .def( 
            "Spawn"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )(&::C_BaseCombatWeapon::Spawn)
            , (void ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_Spawn) )    
        .def( 
            "StartSprinting"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::StartSprinting ) )    
        .def( 
            "StopSprinting"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::StopSprinting ) )    
        .def( 
            "StopWeaponSound"
            , (void ( ::C_BaseCombatWeapon::* )( ::WeaponSound_t ) )( &::C_BaseCombatWeapon::StopWeaponSound )
            , ( bp::arg("sound_type") ) )    
        .def( 
            "UpdateAutoFire"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::UpdateAutoFire ) )    
        .def( 
            "UpdateClientData"
            , (int ( ::C_BaseCombatWeapon::* )( ::C_BasePlayer * ) )( &::C_BaseCombatWeapon::UpdateClientData )
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "UsesClipsForAmmo1"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::UsesClipsForAmmo1 ) )    
        .def( 
            "UsesClipsForAmmo2"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::UsesClipsForAmmo2 ) )    
        .def( 
            "UsesPrimaryAmmo"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::UsesPrimaryAmmo ) )    
        .def( 
            "UsesSecondaryAmmo"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::UsesSecondaryAmmo ) )    
        .def( 
            "ViewModelDrawn"
            , (void ( ::C_BaseCombatWeapon::* )( ::C_BaseViewModel * ) )( &::C_BaseCombatWeapon::ViewModelDrawn )
            , ( bp::arg("pViewModel") ) )    
        .def( 
            "ViewModel_IsTransparent"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ViewModel_IsTransparent ) )    
        .def( 
            "ViewModel_IsUsingFBTexture"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::ViewModel_IsUsingFBTexture ) )    
        .def( 
            "VisibleInWeaponSelection"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::VisibleInWeaponSelection ) )    
        .def( 
            "WantsToOverrideViewmodelAttachments"
            , (bool ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::WantsToOverrideViewmodelAttachments ) )    
        .def( 
            "WeaponAutoAimScale"
            , (float ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::WeaponAutoAimScale ) )    
        .def( 
            "WeaponIdle"
            , (void ( ::C_BaseCombatWeapon::* )(  ) )( &::C_BaseCombatWeapon::WeaponIdle ) )    
        .def( 
            "WeaponSound"
            , (void ( ::C_BaseCombatWeapon::* )( ::WeaponSound_t,float ) )( &::C_BaseCombatWeapon::WeaponSound )
            , ( bp::arg("sound_type"), bp::arg("soundtime")=0.0f ) )    
        .def( 
            "WeaponState"
            , (int ( ::C_BaseCombatWeapon::* )(  ) const)( &::C_BaseCombatWeapon::WeaponState ) )    
        .def( 
            "CreateVPhysics"
            , (bool ( ::C_BaseEntity::* )(  ) )(&::C_BaseEntity::CreateVPhysics)
            , (bool ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_CreateVPhysics) )    
        .def( 
            "DoImpactEffect"
            , (void ( ::C_BaseEntity::* )( ::trace_t &,int ) )(&::C_BaseEntity::DoImpactEffect)
            , (void ( C_BaseCombatWeapon_wrapper::* )( ::trace_t &,int ) )(&C_BaseCombatWeapon_wrapper::default_DoImpactEffect)
            , ( bp::arg("tr"), bp::arg("nDamageType") ) )    
        .def( 
            "GetCollideType"
            , (::CollideType_t ( ::C_BaseAnimating::* )(  ) )(&::C_BaseAnimating::GetCollideType)
            , (::CollideType_t ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_GetCollideType) )    
        .def( 
            "GetTracerType"
            , (char const * ( ::C_BaseEntity::* )(  ) )(&::C_BaseEntity::GetTracerType)
            , (char const * ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_GetTracerType) )    
        .def( 
            "KeyValue"
            , (bool ( ::C_BaseEntity::* )( char const *,char const * ) )(&::C_BaseEntity::KeyValue)
            , (bool ( C_BaseCombatWeapon_wrapper::* )( char const *,char const * ) )(&C_BaseCombatWeapon_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("szValue") ) )    
        .def( 
            "KeyValue"
            , (bool ( ::C_BaseEntity::* )( char const *,float ) )(&::C_BaseEntity::KeyValue)
            , (bool ( C_BaseCombatWeapon_wrapper::* )( char const *,float ) )(&C_BaseCombatWeapon_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("flValue") ) )    
        .def( 
            "KeyValue"
            , (bool ( ::C_BaseEntity::* )( char const *,::Vector const & ) )(&::C_BaseEntity::KeyValue)
            , (bool ( C_BaseCombatWeapon_wrapper::* )( char const *,::Vector const & ) )(&C_BaseCombatWeapon_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("vecValue") ) )    
        .def( 
            "UpdateOnRemove"
            , (void ( ::C_BaseEntity::* )(  ) )(&::C_BaseEntity::UpdateOnRemove)
            , (void ( C_BaseCombatWeapon_wrapper::* )(  ) )(&C_BaseCombatWeapon_wrapper::default_UpdateOnRemove) )    
        .staticmethod( "GetPyNetworkType" );

}

