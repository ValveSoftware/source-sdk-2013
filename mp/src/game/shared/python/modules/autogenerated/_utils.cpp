// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "cbase.h"

#include "cbase.h"

#include "srcpy_util.h"

#include "util_shared.h"

#include "gametrace.h"

#include "engine/IEngineTrace.h"

#include "cdll_util.h"

#include "iclientshadowmgr.h"

#include "viewrender.h"

#include "view.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct CGameTrace_wrapper : CGameTrace, bp::wrapper< CGameTrace > {

    CGameTrace_wrapper( )
    : CGameTrace( )
      , bp::wrapper< CGameTrace >(){
        // null constructor
    
    }

    static ::C_BaseEntity * get_m_pEnt(CGameTrace const & inst ){
        return inst.m_pEnt;
    }
    
    static void set_m_pEnt( CGameTrace & inst, ::C_BaseEntity * new_value ){ 
        inst.m_pEnt = new_value;
    }

};

static boost::python::tuple GetTargetInScreenSpace_428767104c56b38864e43c8a491bdb7a( ::C_BaseEntity * pTargetEntity, ::Vector * vecOffset=0 ){
    int iX2;
    int iY2;
    bool result = ::GetTargetInScreenSpace(pTargetEntity, iX2, iY2, vecOffset);
    return bp::make_tuple( result, iX2, iY2 );
}

static boost::python::tuple GetVectorInScreenSpace_b2af551782d08a7a600523c85302329a( ::Vector pos, ::Vector * vecOffset=0 ){
    int iX2;
    int iY2;
    bool result = ::GetVectorInScreenSpace(pos, iX2, iY2, vecOffset);
    return bp::make_tuple( result, iX2, iY2 );
}

BOOST_PYTHON_MODULE(_utils){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< QuadBarycentricRetval_t>("QuadBarycentricRetval_t")
        .value("BARY_QUADRATIC_FALSE", BARY_QUADRATIC_FALSE)
        .value("BARY_QUADRATIC_TRUE", BARY_QUADRATIC_TRUE)
        .value("BARY_QUADRATIC_NEGATIVE_DISCRIMINANT", BARY_QUADRATIC_NEGATIVE_DISCRIMINANT)
        .export_values()
        ;

    bp::enum_< ShakeCommand_t>("ShakeCommand_t")
        .value("SHAKE_START", SHAKE_START)
        .value("SHAKE_STOP", SHAKE_STOP)
        .value("SHAKE_AMPLITUDE", SHAKE_AMPLITUDE)
        .value("SHAKE_FREQUENCY", SHAKE_FREQUENCY)
        .value("SHAKE_START_RUMBLEONLY", SHAKE_START_RUMBLEONLY)
        .value("SHAKE_START_NORUMBLE", SHAKE_START_NORUMBLE)
        .export_values()
        ;

    bp::class_< BoxTraceInfo_t >( "BoxTraceInfo_t" )    
        .def_readwrite( "hitside", &BoxTraceInfo_t::hitside )    
        .def_readwrite( "startsolid", &BoxTraceInfo_t::startsolid )    
        .def_readwrite( "t1", &BoxTraceInfo_t::t1 )    
        .def_readwrite( "t2", &BoxTraceInfo_t::t2 );

    bp::class_< CBaseTrace, boost::noncopyable >( "CBaseTrace", bp::init< >() )    
        .def( 
            "IsDispSurface"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurface ) )    
        .def( 
            "IsDispSurfaceBuildable"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurfaceBuildable ) )    
        .def( 
            "IsDispSurfaceProp1"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurfaceProp1 ) )    
        .def( 
            "IsDispSurfaceProp2"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurfaceProp2 ) )    
        .def( 
            "IsDispSurfaceWalkable"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurfaceWalkable ) )    
        .def_readwrite( "allsolid", &CBaseTrace::allsolid )    
        .def_readwrite( "contents", &CBaseTrace::contents )    
        .def_readwrite( "dispFlags", &CBaseTrace::dispFlags )    
        .def_readwrite( "endpos", &CBaseTrace::endpos )    
        .def_readwrite( "fraction", &CBaseTrace::fraction )    
        .def_readwrite( "plane", &CBaseTrace::plane )    
        .def_readwrite( "startpos", &CBaseTrace::startpos )    
        .def_readwrite( "startsolid", &CBaseTrace::startsolid );

    bp::class_< CGameTrace_wrapper, bp::bases< CBaseTrace >, boost::noncopyable >( "trace_t", bp::init< >() )    
        .def( 
            "DidHit"
            , (bool ( ::CGameTrace::* )(  ) const)( &::CGameTrace::DidHit ) )    
        .def( 
            "DidHitNonWorldEntity"
            , (bool ( ::CGameTrace::* )(  ) const)( &::CGameTrace::DidHitNonWorldEntity ) )    
        .def( 
            "DidHitWorld"
            , (bool ( ::CGameTrace::* )(  ) const)( &::CGameTrace::DidHitWorld ) )    
        .def( 
            "GetEntityIndex"
            , (int ( ::CGameTrace::* )(  ) const)( &::CGameTrace::GetEntityIndex ) )    
        .def_readwrite( "fractionleftsolid", &CGameTrace::fractionleftsolid )    
        .def_readwrite( "hitbox", &CGameTrace::hitbox )    
        .def_readwrite( "hitgroup", &CGameTrace::hitgroup )    
        .add_property( "ent"
                    , bp::make_function( (::C_BaseEntity * (*)( ::CGameTrace const & ))(&CGameTrace_wrapper::get_m_pEnt), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::CGameTrace &,::C_BaseEntity * ))(&CGameTrace_wrapper::set_m_pEnt), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "physicsbone", &CGameTrace::physicsbone )    
        .def_readwrite( "surface", &CGameTrace::surface );

    bp::class_< ITraceFilter, boost::noncopyable >( "ITraceFilter", bp::no_init );

    bp::class_< CTraceFilter, bp::bases< ITraceFilter >, boost::noncopyable >( "CTraceFilter", bp::no_init )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilter::* )(  ) const)( &::CTraceFilter::GetTraceType ) );

    bp::class_< CTraceFilterSimple, bp::bases< CTraceFilter > >( "CTraceFilterSimpleInternal", bp::no_init )    
        .def( 
            "GetPassEntity"
            , (::IHandleEntity const * ( ::CTraceFilterSimple::* )(  ) )( &::CTraceFilterSimple::GetPassEntity )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "SetCollisionGroup"
            , (void ( ::CTraceFilterSimple::* )( int ) )( &::CTraceFilterSimple::SetCollisionGroup )
            , ( bp::arg("iCollisionGroup") ) )    
        .def( 
            "SetPassEntity"
            , (void ( ::CTraceFilterSimple::* )( ::IHandleEntity const * ) )( &::CTraceFilterSimple::SetPassEntity )
            , ( bp::arg("pPassEntity") ) );

    bp::class_< CPyTraceFilterSimple, bp::bases< CTraceFilterSimple > >( "CTraceFilterSimple", bp::init< IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("collisionGroup") )) );

    bp::class_< CTraceFilterChain, bp::bases< CTraceFilter > >( "CTraceFilterChain", bp::init< ITraceFilter *, ITraceFilter * >(( bp::arg("pTraceFilter1"), bp::arg("pTraceFilter2") )) );

    bp::class_< CTraceFilterEntitiesOnly, bp::bases< ITraceFilter >, boost::noncopyable >( "CTraceFilterEntitiesOnly", bp::no_init )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilterEntitiesOnly::* )(  ) const)( &::CTraceFilterEntitiesOnly::GetTraceType ) );

    bp::class_< CTraceFilterHitAll, bp::bases< CTraceFilter > >( "CTraceFilterHitAll" );

    bp::class_< CTraceFilterSkipTwoEntities, bp::bases< CTraceFilterSimple > >( "CTraceFilterSkipTwoEntities", bp::init< IHandleEntity const *, IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("passentity2"), bp::arg("collisionGroup") )) )    
        .def( 
            "SetPassEntity2"
            , (void ( ::CTraceFilterSkipTwoEntities::* )( ::IHandleEntity const * ) )( &::CTraceFilterSkipTwoEntities::SetPassEntity2 )
            , ( bp::arg("pPassEntity2") ) );

    bp::class_< CTraceFilterLOS, bp::bases< CTraceFilterSkipTwoEntities > >( "CTraceFilterLOS", bp::init< IHandleEntity *, int, bp::optional< IHandleEntity * > >(( bp::arg("pHandleEntity"), bp::arg("collisionGroup"), bp::arg("pHandleEntity2")=bp::object() )) );

    bp::class_< CTraceFilterNoNPCsOrPlayer, bp::bases< CTraceFilterSimple > >( "CTraceFilterNoNPCsOrPlayer", bp::init< IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("collisionGroup") )) );

    bp::class_< CTraceFilterOnlyNPCsAndPlayer, bp::bases< CTraceFilterSimple > >( "CTraceFilterOnlyNPCsAndPlayer", bp::init< IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("collisionGroup") )) )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilterOnlyNPCsAndPlayer::* )(  ) const)( &::CTraceFilterOnlyNPCsAndPlayer::GetTraceType ) );

    bp::class_< CTraceFilterSimpleClassnameList, bp::bases< CTraceFilterSimple >, boost::noncopyable >( "CTraceFilterSimpleClassnameList", bp::init< IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("collisionGroup") )) )    
        .def( 
            "AddClassnameToIgnore"
            , (void ( ::CTraceFilterSimpleClassnameList::* )( char const * ) )( &::CTraceFilterSimpleClassnameList::AddClassnameToIgnore )
            , ( bp::arg("pchClassname") ) );

    { //::CTraceFilterSimpleList
        typedef bp::class_< CTraceFilterSimpleList, bp::bases< CTraceFilterSimple >, boost::noncopyable > CTraceFilterSimpleList_exposer_t;
        CTraceFilterSimpleList_exposer_t CTraceFilterSimpleList_exposer = CTraceFilterSimpleList_exposer_t( "CTraceFilterSimpleList", bp::init< int >(( bp::arg("collisionGroup") )) );
        bp::scope CTraceFilterSimpleList_scope( CTraceFilterSimpleList_exposer );
        bp::implicitly_convertible< int, CTraceFilterSimpleList >();
        { //::CTraceFilterSimpleList::AddEntityToIgnore
        
            typedef void ( ::CTraceFilterSimpleList::*AddEntityToIgnore_function_type )( ::IHandleEntity * ) ;
            
            CTraceFilterSimpleList_exposer.def( 
                "AddEntityToIgnore"
                , AddEntityToIgnore_function_type( &::CTraceFilterSimpleList::AddEntityToIgnore )
                , ( bp::arg("pEntity") ) );
        
        }
    }

    bp::class_< CTraceFilterSkipClassname, bp::bases< CTraceFilterSimple > >( "CTraceFilterSkipClassname", bp::init< IHandleEntity const *, char const *, int >(( bp::arg("passentity"), bp::arg("pchClassname"), bp::arg("collisionGroup") )) );

    bp::class_< CTraceFilterSkipTwoClassnames, bp::bases< CTraceFilterSkipClassname > >( "CTraceFilterSkipTwoClassnames", bp::init< IHandleEntity const *, char const *, char const *, int >(( bp::arg("passentity"), bp::arg("pchClassname"), bp::arg("pchClassname2"), bp::arg("collisionGroup") )) );

    bp::class_< CTraceFilterWorldAndPropsOnly, bp::bases< ITraceFilter > >( "CTraceFilterWorldAndPropsOnly" )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilterWorldAndPropsOnly::* )(  ) const)( &::CTraceFilterWorldAndPropsOnly::GetTraceType ) );

    bp::class_< CTraceFilterWorldOnly, bp::bases< ITraceFilter > >( "CTraceFilterWorldOnly" )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilterWorldOnly::* )(  ) const)( &::CTraceFilterWorldOnly::GetTraceType ) );

    { //::PyRay_t
        typedef bp::class_< PyRay_t > Ray_t_exposer_t;
        Ray_t_exposer_t Ray_t_exposer = Ray_t_exposer_t( "Ray_t", bp::init< >() );
        bp::scope Ray_t_scope( Ray_t_exposer );
        Ray_t_exposer.def( bp::init< Ray_t const & >(( bp::arg("raysrc") )) );
        bp::implicitly_convertible< Ray_t const &, PyRay_t >();
        { //::PyRay_t::Init
        
            typedef void ( ::PyRay_t::*Init_function_type )( ::Vector const &,::Vector const & ) ;
            
            Ray_t_exposer.def( 
                "Init"
                , Init_function_type( &::PyRay_t::Init )
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::PyRay_t::Init
        
            typedef void ( ::PyRay_t::*Init_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const & ) ;
            
            Ray_t_exposer.def( 
                "Init"
                , Init_function_type( &::PyRay_t::Init )
                , ( bp::arg("start"), bp::arg("end"), bp::arg("mins"), bp::arg("maxs") ) );
        
        }
        { //::PyRay_t::InvDelta
        
            typedef ::Vector ( ::PyRay_t::*InvDelta_function_type )(  ) const;
            
            Ray_t_exposer.def( 
                "InvDelta"
                , InvDelta_function_type( &::PyRay_t::InvDelta ) );
        
        }
        { //::PyRay_t::ToRay
        
            typedef ::Ray_t ( ::PyRay_t::*ToRay_function_type )(  ) const;
            
            Ray_t_exposer.def( 
                "ToRay"
                , ToRay_function_type( &::PyRay_t::ToRay ) );
        
        }
        Ray_t_exposer.def_readwrite( "delta", &PyRay_t::m_Delta );
        Ray_t_exposer.def_readwrite( "extents", &PyRay_t::m_Extents );
        Ray_t_exposer.def_readwrite( "isray", &PyRay_t::m_IsRay );
        Ray_t_exposer.def_readwrite( "isswept", &PyRay_t::m_IsSwept );
        Ray_t_exposer.def_readwrite( "start", &PyRay_t::m_Start );
        Ray_t_exposer.def_readwrite( "startoffset", &PyRay_t::m_StartOffset );
    }

    bp::class_< csurface_t >( "csurface_t" )    
        .def_readwrite( "flags", &csurface_t::flags )    
        .def_readwrite( "surfaceProps", &csurface_t::surfaceProps );

    { //::ComputeIntersectionBarycentricCoordinates
    
        typedef bool ( *ComputeIntersectionBarycentricCoordinates_function_type )( ::Ray_t const &,::Vector const &,::Vector const &,::Vector const &,float &,float &,float * );
        
        bp::def( 
            "ComputeIntersectionBarycentricCoordinates"
            , ComputeIntersectionBarycentricCoordinates_function_type( &::ComputeIntersectionBarycentricCoordinates )
            , ( bp::arg("ray"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("u"), bp::arg("v"), bp::arg("t")=bp::object() ) );
    
    }

    { //::ComputePointFromBarycentric
    
        typedef void ( *ComputePointFromBarycentric_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D const &,float,float,::Vector2D & );
        
        bp::def( 
            "ComputePointFromBarycentric"
            , ComputePointFromBarycentric_function_type( &::ComputePointFromBarycentric )
            , ( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("u"), bp::arg("v"), bp::arg("pt") ) );
    
    }

    { //::ComputePointFromBarycentric
    
        typedef void ( *ComputePointFromBarycentric_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float,::Vector & );
        
        bp::def( 
            "ComputePointFromBarycentric"
            , ComputePointFromBarycentric_function_type( &::ComputePointFromBarycentric )
            , ( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("u"), bp::arg("v"), bp::arg("pt") ) );
    
    }

    { //::ComputeSeparatingPlane
    
        typedef bool ( *ComputeSeparatingPlane_function_type )( ::Vector const &,::QAngle const &,::Vector const &,::Vector const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,float,::cplane_t * );
        
        bp::def( 
            "ComputeSeparatingPlane"
            , ComputeSeparatingPlane_function_type( &::ComputeSeparatingPlane )
            , ( bp::arg("org1"), bp::arg("angles1"), bp::arg("min1"), bp::arg("max1"), bp::arg("org2"), bp::arg("angles2"), bp::arg("min2"), bp::arg("max2"), bp::arg("tolerance"), bp::arg("pPlane") ) );
    
    }

    { //::GetSuppressHost
    
        typedef ::C_BaseEntity const * ( *GetSuppressHost_function_type )(  );
        
        bp::def( 
            "GetSuppressHost"
            , GetSuppressHost_function_type( &::GetSuppressHost )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::GetTargetInScreenSpace
    
        typedef boost::python::tuple ( *GetTargetInScreenSpace_function_type )( ::C_BaseEntity *,::Vector * );
        
        bp::def( 
            "GetTargetInScreenSpace"
            , GetTargetInScreenSpace_function_type( &GetTargetInScreenSpace_428767104c56b38864e43c8a491bdb7a )
            , ( bp::arg("pTargetEntity"), bp::arg("vecOffset")=bp::object() ) );
    
    }

    { //::GetVectorInScreenSpace
    
        typedef boost::python::tuple ( *GetVectorInScreenSpace_function_type )( ::Vector,::Vector * );
        
        bp::def( 
            "GetVectorInScreenSpace"
            , GetVectorInScreenSpace_function_type( &GetVectorInScreenSpace_b2af551782d08a7a600523c85302329a )
            , ( bp::arg("pos"), bp::arg("vecOffset")=bp::object() ) );
    
    }

    { //::IntersectInfiniteRayWithSphere
    
        typedef bool ( *IntersectInfiniteRayWithSphere_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float *,float * );
        
        bp::def( 
            "IntersectInfiniteRayWithSphere"
            , IntersectInfiniteRayWithSphere_function_type( &::IntersectInfiniteRayWithSphere )
            , ( bp::arg("vecRayOrigin"), bp::arg("vecRayDelta"), bp::arg("vecSphereCenter"), bp::arg("flRadius"), bp::arg("pT1"), bp::arg("pT2") ) );
    
    }

    { //::IntersectRayWithAAPlane
    
        typedef float ( *IntersectRayWithAAPlane_function_type )( ::Vector const &,::Vector const &,int,float,float );
        
        bp::def( 
            "IntersectRayWithAAPlane"
            , IntersectRayWithAAPlane_function_type( &::IntersectRayWithAAPlane )
            , ( bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("nAxis"), bp::arg("flSign"), bp::arg("flDist") ) );
    
    }

    { //::IntersectRayWithBox
    
        typedef bool ( *IntersectRayWithBox_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::BoxTraceInfo_t * );
        
        bp::def( 
            "IntersectRayWithBox"
            , IntersectRayWithBox_function_type( &::IntersectRayWithBox )
            , ( bp::arg("vecRayStart"), bp::arg("vecRayDelta"), bp::arg("boxMins"), bp::arg("boxMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithBox
    
        typedef bool ( *IntersectRayWithBox_function_type )( ::Ray_t const &,::Vector const &,::Vector const &,float,::CBaseTrace *,float * );
        
        bp::def( 
            "IntersectRayWithBox"
            , IntersectRayWithBox_function_type( &::IntersectRayWithBox )
            , ( bp::arg("ray"), bp::arg("boxMins"), bp::arg("boxMaxs"), bp::arg("epsilon"), bp::arg("pTrace"), bp::arg("pFractionLeftSolid")=bp::object() ) );
    
    }

    { //::IntersectRayWithBox
    
        typedef bool ( *IntersectRayWithBox_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::CBaseTrace *,float * );
        
        bp::def( 
            "IntersectRayWithBox"
            , IntersectRayWithBox_function_type( &::IntersectRayWithBox )
            , ( bp::arg("rayStart"), bp::arg("rayDelta"), bp::arg("boxMins"), bp::arg("boxMaxs"), bp::arg("epsilon"), bp::arg("pTrace"), bp::arg("pFractionLeftSolid")=bp::object() ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Vector const &,::Vector const &,::matrix3x4_t const &,::Vector const &,::Vector const &,float,::BoxTraceInfo_t * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("vecRayStart"), bp::arg("vecRayDelta"), bp::arg("matOBBToWorld"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Ray_t const &,::matrix3x4_t const &,::Vector const &,::Vector const &,float,::CBaseTrace * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("ray"), bp::arg("matOBBToWorld"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Ray_t const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,float,::CBaseTrace * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("ray"), bp::arg("vecBoxOrigin"), bp::arg("angBoxRotation"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Vector const &,::Vector const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,float,::CBaseTrace * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("vecRayOrigin"), bp::arg("vecRayDelta"), bp::arg("vecBoxOrigin"), bp::arg("angBoxRotation"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Vector const &,::Vector const &,::matrix3x4_t const &,::Vector const &,::Vector const &,float,::CBaseTrace * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("vecRayStart"), bp::arg("vecRayDelta"), bp::arg("matOBBToWorld"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithPlane
    
        typedef float ( *IntersectRayWithPlane_function_type )( ::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IntersectRayWithPlane"
            , IntersectRayWithPlane_function_type( &::IntersectRayWithPlane )
            , ( bp::arg("org"), bp::arg("dir"), bp::arg("normal"), bp::arg("dist") ) );
    
    }

    { //::IntersectRayWithPlane
    
        typedef float ( *IntersectRayWithPlane_function_type )( ::Vector const &,::Vector const &,::cplane_t const & );
        
        bp::def( 
            "IntersectRayWithPlane"
            , IntersectRayWithPlane_function_type( &::IntersectRayWithPlane )
            , ( bp::arg("org"), bp::arg("dir"), bp::arg("plane") ) );
    
    }

    { //::IntersectRayWithPlane
    
        typedef float ( *IntersectRayWithPlane_function_type )( ::Ray_t const &,::cplane_t const & );
        
        bp::def( 
            "IntersectRayWithPlane"
            , IntersectRayWithPlane_function_type( &::IntersectRayWithPlane )
            , ( bp::arg("ray"), bp::arg("plane") ) );
    
    }

    { //::IntersectRayWithRay
    
        typedef bool ( *IntersectRayWithRay_function_type )( ::Ray_t const &,::Ray_t const &,float &,float & );
        
        bp::def( 
            "IntersectRayWithRay"
            , IntersectRayWithRay_function_type( &::IntersectRayWithRay )
            , ( bp::arg("ray0"), bp::arg("ray1"), bp::arg("t"), bp::arg("s") ) );
    
    }

    { //::IntersectRayWithSphere
    
        typedef bool ( *IntersectRayWithSphere_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float *,float * );
        
        bp::def( 
            "IntersectRayWithSphere"
            , IntersectRayWithSphere_function_type( &::IntersectRayWithSphere )
            , ( bp::arg("vecRayOrigin"), bp::arg("vecRayDelta"), bp::arg("vecSphereCenter"), bp::arg("flRadius"), bp::arg("pT1"), bp::arg("pT2") ) );
    
    }

    { //::IntersectTriangleWithPlaneBarycentric
    
        typedef int ( *IntersectTriangleWithPlaneBarycentric_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector4D const &,::Vector2D * );
        
        bp::def( 
            "IntersectTriangleWithPlaneBarycentric"
            , IntersectTriangleWithPlaneBarycentric_function_type( &::IntersectTriangleWithPlaneBarycentric )
            , ( bp::arg("org"), bp::arg("edgeU"), bp::arg("edgeV"), bp::arg("plane"), bp::arg("pIntersection") ) );
    
    }

    { //::IsBoxIntersectingBox
    
        typedef bool ( *IsBoxIntersectingBox_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "IsBoxIntersectingBox"
            , IsBoxIntersectingBox_function_type( &::IsBoxIntersectingBox )
            , ( bp::arg("boxMin1"), bp::arg("boxMax1"), bp::arg("boxMin2"), bp::arg("boxMax2") ) );
    
    }

    { //::IsBoxIntersectingBoxExtents
    
        typedef bool ( *IsBoxIntersectingBoxExtents_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "IsBoxIntersectingBoxExtents"
            , IsBoxIntersectingBoxExtents_function_type( &::IsBoxIntersectingBoxExtents )
            , ( bp::arg("boxCenter1"), bp::arg("boxHalfDiagonal1"), bp::arg("boxCenter2"), bp::arg("boxHalfDiagonal2") ) );
    
    }

    { //::IsBoxIntersectingRay
    
        typedef bool ( *IsBoxIntersectingRay_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsBoxIntersectingRay"
            , IsBoxIntersectingRay_function_type( &::IsBoxIntersectingRay )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("origin"), bp::arg("delta"), bp::arg("invDelta"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsBoxIntersectingRay
    
        typedef bool ( *IsBoxIntersectingRay_function_type )( ::Vector const &,::Vector const &,::Ray_t const &,float );
        
        bp::def( 
            "IsBoxIntersectingRay"
            , IsBoxIntersectingRay_function_type( &::IsBoxIntersectingRay )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("ray"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsBoxIntersectingRay
    
        typedef bool ( *IsBoxIntersectingRay_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsBoxIntersectingRay"
            , IsBoxIntersectingRay_function_type( &::IsBoxIntersectingRay )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("origin"), bp::arg("delta"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsBoxIntersectingSphere
    
        typedef bool ( *IsBoxIntersectingSphere_function_type )( ::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsBoxIntersectingSphere"
            , IsBoxIntersectingSphere_function_type( &::IsBoxIntersectingSphere )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("center"), bp::arg("radius") ) );
    
    }

    { //::IsBoxIntersectingSphereExtents
    
        typedef bool ( *IsBoxIntersectingSphereExtents_function_type )( ::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsBoxIntersectingSphereExtents"
            , IsBoxIntersectingSphereExtents_function_type( &::IsBoxIntersectingSphereExtents )
            , ( bp::arg("boxCenter"), bp::arg("boxHalfDiag"), bp::arg("center"), bp::arg("radius") ) );
    
    }

    { //::IsBoxIntersectingTriangle
    
        typedef bool ( *IsBoxIntersectingTriangle_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector const &,::cplane_t const &,float );
        
        bp::def( 
            "IsBoxIntersectingTriangle"
            , IsBoxIntersectingTriangle_function_type( &::IsBoxIntersectingTriangle )
            , ( bp::arg("vecBoxCenter"), bp::arg("vecBoxExtents"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("plane"), bp::arg("flTolerance") ) );
    
    }

    { //::IsCircleIntersectingRectangle
    
        typedef bool ( *IsCircleIntersectingRectangle_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D const &,float );
        
        bp::def( 
            "IsCircleIntersectingRectangle"
            , IsCircleIntersectingRectangle_function_type( &::IsCircleIntersectingRectangle )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("center"), bp::arg("radius") ) );
    
    }

    { //::IsOBBIntersectingOBB
    
        typedef bool ( *IsOBBIntersectingOBB_function_type )( ::Vector const &,::QAngle const &,::Vector const &,::Vector const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsOBBIntersectingOBB"
            , IsOBBIntersectingOBB_function_type( &::IsOBBIntersectingOBB )
            , ( bp::arg("vecOrigin1"), bp::arg("vecAngles1"), bp::arg("boxMin1"), bp::arg("boxMax1"), bp::arg("vecOrigin2"), bp::arg("vecAngles2"), bp::arg("boxMin2"), bp::arg("boxMax2"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsPointInBox
    
        typedef bool ( *IsPointInBox_function_type )( ::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "IsPointInBox"
            , IsPointInBox_function_type( &::IsPointInBox )
            , ( bp::arg("pt"), bp::arg("boxMin"), bp::arg("boxMax") ) );
    
    }

    { //::IsPointInCone
    
        typedef bool ( *IsPointInCone_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float );
        
        bp::def( 
            "IsPointInCone"
            , IsPointInCone_function_type( &::IsPointInCone )
            , ( bp::arg("pt"), bp::arg("origin"), bp::arg("axis"), bp::arg("cosAngle"), bp::arg("length") ) );
    
    }

    { //::IsRayIntersectingOBB
    
        typedef bool ( *IsRayIntersectingOBB_function_type )( ::Ray_t const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "IsRayIntersectingOBB"
            , IsRayIntersectingOBB_function_type( &::IsRayIntersectingOBB )
            , ( bp::arg("ray"), bp::arg("org"), bp::arg("angles"), bp::arg("mins"), bp::arg("maxs") ) );
    
    }

    { //::IsRayIntersectingSphere
    
        typedef bool ( *IsRayIntersectingSphere_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float );
        
        bp::def( 
            "IsRayIntersectingSphere"
            , IsRayIntersectingSphere_function_type( &::IsRayIntersectingSphere )
            , ( bp::arg("vecRayOrigin"), bp::arg("vecRayDelta"), bp::arg("vecSphereCenter"), bp::arg("flRadius"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsSphereIntersectingCone
    
        typedef bool ( *IsSphereIntersectingCone_function_type )( ::Vector const &,float,::Vector const &,::Vector const &,float,float );
        
        bp::def( 
            "IsSphereIntersectingCone"
            , IsSphereIntersectingCone_function_type( &::IsSphereIntersectingCone )
            , ( bp::arg("sphereCenter"), bp::arg("sphereRadius"), bp::arg("coneOrigin"), bp::arg("coneNormal"), bp::arg("coneSine"), bp::arg("coneCosine") ) );
    
    }

    { //::IsSphereIntersectingSphere
    
        typedef bool ( *IsSphereIntersectingSphere_function_type )( ::Vector const &,float,::Vector const &,float );
        
        bp::def( 
            "IsSphereIntersectingSphere"
            , IsSphereIntersectingSphere_function_type( &::IsSphereIntersectingSphere )
            , ( bp::arg("center1"), bp::arg("radius1"), bp::arg("center2"), bp::arg("radius2") ) );
    
    }

    { //::MainViewAngles
    
        typedef ::QAngle const & ( *MainViewAngles_function_type )(  );
        
        bp::def( 
            "MainViewAngles"
            , MainViewAngles_function_type( &::MainViewAngles )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::MainViewForward
    
        typedef ::Vector const & ( *MainViewForward_function_type )(  );
        
        bp::def( 
            "MainViewForward"
            , MainViewForward_function_type( &::MainViewForward )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::MainViewOrigin
    
        typedef ::Vector const & ( *MainViewOrigin_function_type )(  );
        
        bp::def( 
            "MainViewOrigin"
            , MainViewOrigin_function_type( &::MainViewOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::MainViewRight
    
        typedef ::Vector const & ( *MainViewRight_function_type )(  );
        
        bp::def( 
            "MainViewRight"
            , MainViewRight_function_type( &::MainViewRight )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::MainViewUp
    
        typedef ::Vector const & ( *MainViewUp_function_type )(  );
        
        bp::def( 
            "MainViewUp"
            , MainViewUp_function_type( &::MainViewUp )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::MainWorldToViewMatrix
    
        typedef ::VMatrix const & ( *MainWorldToViewMatrix_function_type )(  );
        
        bp::def( 
            "MainWorldToViewMatrix"
            , MainWorldToViewMatrix_function_type( &::MainWorldToViewMatrix )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::OBBHasFullyContainedIntersectionWithQuad
    
        typedef bool ( *OBBHasFullyContainedIntersectionWithQuad_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector const &,::Vector const &,float,::Vector const &,float );
        
        bp::def( 
            "OBBHasFullyContainedIntersectionWithQuad"
            , OBBHasFullyContainedIntersectionWithQuad_function_type( &::OBBHasFullyContainedIntersectionWithQuad )
            , ( bp::arg("vOBBExtent1_Scaled"), bp::arg("vOBBExtent2_Scaled"), bp::arg("vOBBExtent3_Scaled"), bp::arg("ptOBBCenter"), bp::arg("vQuadNormal"), bp::arg("fQuadPlaneDist"), bp::arg("ptQuadCenter"), bp::arg("vQuadExtent1_Normalized"), bp::arg("fQuadExtent1Length"), bp::arg("vQuadExtent2_Normalized"), bp::arg("fQuadExtent2Length") ) );
    
    }

    { //::PassServerEntityFilter
    
        typedef bool ( *PassServerEntityFilter_function_type )( ::IHandleEntity const *,::IHandleEntity const * );
        
        bp::def( 
            "PassServerEntityFilter"
            , PassServerEntityFilter_function_type( &::PassServerEntityFilter )
            , ( bp::arg("pTouch"), bp::arg("pPass") ) );
    
    }

    { //::PointInQuadFromBarycentric
    
        typedef void ( *PointInQuadFromBarycentric_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector2D const &,::Vector & );
        
        bp::def( 
            "PointInQuadFromBarycentric"
            , PointInQuadFromBarycentric_function_type( &::PointInQuadFromBarycentric )
            , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("uv"), bp::arg("point") ) );
    
    }

    { //::PointInQuadToBarycentric
    
        typedef ::QuadBarycentricRetval_t ( *PointInQuadToBarycentric_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector2D & );
        
        bp::def( 
            "PointInQuadToBarycentric"
            , PointInQuadToBarycentric_function_type( &::PointInQuadToBarycentric )
            , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("point"), bp::arg("uv") ) );
    
    }

    { //::PyIntersectRayWithTriangle
    
        typedef float ( *IntersectRayWithTriangle_function_type )( ::PyRay_t const &,::Vector const &,::Vector const &,::Vector const &,bool );
        
        bp::def( 
            "IntersectRayWithTriangle"
            , IntersectRayWithTriangle_function_type( &::PyIntersectRayWithTriangle )
            , ( bp::arg("ray"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("oneSided") ) );
    
    }

    { //::RayHasFullyContainedIntersectionWithQuad
    
        typedef bool ( *RayHasFullyContainedIntersectionWithQuad_function_type )( ::Ray_t const &,::Vector const &,float,::Vector const &,::Vector const &,float,::Vector const &,float );
        
        bp::def( 
            "RayHasFullyContainedIntersectionWithQuad"
            , RayHasFullyContainedIntersectionWithQuad_function_type( &::RayHasFullyContainedIntersectionWithQuad )
            , ( bp::arg("ray"), bp::arg("vQuadNormal"), bp::arg("fQuadPlaneDist"), bp::arg("ptQuadCenter"), bp::arg("vQuadExtent1_Normalized"), bp::arg("fQuadExtent1Length"), bp::arg("vQuadExtent2_Normalized"), bp::arg("fQuadExtent2Length") ) );
    
    }

    { //::ScreenHeight
    
        typedef int ( *ScreenHeight_function_type )(  );
        
        bp::def( 
            "ScreenHeight"
            , ScreenHeight_function_type( &::ScreenHeight ) );
    
    }

    { //::ScreenWidth
    
        typedef int ( *ScreenWidth_function_type )(  );
        
        bp::def( 
            "ScreenWidth"
            , ScreenWidth_function_type( &::ScreenWidth ) );
    
    }

    { //::StandardFilterRules
    
        typedef bool ( *StandardFilterRules_function_type )( ::IHandleEntity *,int );
        
        bp::def( 
            "StandardFilterRules"
            , StandardFilterRules_function_type( &::StandardFilterRules )
            , ( bp::arg("pHandleEntity"), bp::arg("fContentsMask") ) );
    
    }

    { //::TexCoordInQuadFromBarycentric
    
        typedef void ( *TexCoordInQuadFromBarycentric_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D const &,::Vector2D const &,::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "TexCoordInQuadFromBarycentric"
            , TexCoordInQuadFromBarycentric_function_type( &::TexCoordInQuadFromBarycentric )
            , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("uv"), bp::arg("texCoord") ) );
    
    }

    { //::UTIL_AngleDiff
    
        typedef float ( *UTIL_AngleDiff_function_type )( float,float );
        
        bp::def( 
            "UTIL_AngleDiff"
            , UTIL_AngleDiff_function_type( &::UTIL_AngleDiff )
            , ( bp::arg("destAngle"), bp::arg("srcAngle") ) );
    
    }

    { //::UTIL_BloodDecalTrace
    
        typedef void ( *UTIL_BloodDecalTrace_function_type )( ::trace_t *,int );
        
        bp::def( 
            "UTIL_BloodDecalTrace"
            , UTIL_BloodDecalTrace_function_type( &::UTIL_BloodDecalTrace )
            , ( bp::arg("pTrace"), bp::arg("bloodColor") ) );
    
    }

    { //::UTIL_BloodDrips
    
        typedef void ( *UTIL_BloodDrips_function_type )( ::Vector const &,::Vector const &,int,int );
        
        bp::def( 
            "UTIL_BloodDrips"
            , UTIL_BloodDrips_function_type( &::UTIL_BloodDrips )
            , ( bp::arg("origin"), bp::arg("direction"), bp::arg("color"), bp::arg("amount") ) );
    
    }

    { //::UTIL_BloodImpact
    
        typedef void ( *UTIL_BloodImpact_function_type )( ::Vector const &,::Vector const &,int,int );
        
        bp::def( 
            "UTIL_BloodImpact"
            , UTIL_BloodImpact_function_type( &::UTIL_BloodImpact )
            , ( bp::arg("pos"), bp::arg("dir"), bp::arg("color"), bp::arg("amount") ) );
    
    }

    { //::UTIL_BoundToWorldSize
    
        typedef void ( *UTIL_BoundToWorldSize_function_type )( ::Vector * );
        
        bp::def( 
            "UTIL_BoundToWorldSize"
            , UTIL_BoundToWorldSize_function_type( &::UTIL_BoundToWorldSize )
            , ( bp::arg("pVecPos") ) );
    
    }

    { //::UTIL_Bubbles
    
        typedef void ( *UTIL_Bubbles_function_type )( ::Vector const &,::Vector const &,int );
        
        bp::def( 
            "UTIL_Bubbles"
            , UTIL_Bubbles_function_type( &::UTIL_Bubbles )
            , ( bp::arg("mins"), bp::arg("maxs"), bp::arg("count") ) );
    
    }

    { //::UTIL_ClipTraceToPlayers
    
        typedef void ( *UTIL_ClipTraceToPlayers_function_type )( ::Vector const &,::Vector const &,unsigned int,::ITraceFilter *,::trace_t * );
        
        bp::def( 
            "UTIL_ClipTraceToPlayers"
            , UTIL_ClipTraceToPlayers_function_type( &::UTIL_ClipTraceToPlayers )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("filter"), bp::arg("tr") ) );
    
    }

    { //::UTIL_ComputeEntityFade
    
        typedef unsigned char ( *UTIL_ComputeEntityFade_function_type )( ::C_BaseEntity *,float,float,float );
        
        bp::def( 
            "UTIL_ComputeEntityFade"
            , UTIL_ComputeEntityFade_function_type( &::UTIL_ComputeEntityFade )
            , ( bp::arg("pEntity"), bp::arg("flMinDist"), bp::arg("flMaxDist"), bp::arg("flFadeScale") ) );
    
    }

    { //::UTIL_ComputeStringWidth
    
        typedef int ( *UTIL_ComputeStringWidth_function_type )( ::vgui::HFont &,wchar_t const * );
        
        bp::def( 
            "UTIL_ComputeStringWidth"
            , UTIL_ComputeStringWidth_function_type( &::UTIL_ComputeStringWidth )
            , ( bp::arg("font"), bp::arg("str") ) );
    
    }

    { //::UTIL_ComputeStringWidth
    
        typedef int ( *UTIL_ComputeStringWidth_function_type )( ::vgui::HFont &,char const * );
        
        bp::def( 
            "UTIL_ComputeStringWidth"
            , UTIL_ComputeStringWidth_function_type( &::UTIL_ComputeStringWidth )
            , ( bp::arg("font"), bp::arg("str") ) );
    
    }

    { //::UTIL_DecalTrace
    
        typedef void ( *UTIL_DecalTrace_function_type )( ::trace_t *,char const * );
        
        bp::def( 
            "UTIL_DecalTrace"
            , UTIL_DecalTrace_function_type( &::UTIL_DecalTrace )
            , ( bp::arg("pTrace"), bp::arg("decalName") ) );
    
    }

    { //::UTIL_DecodeICE
    
        typedef void ( *UTIL_DecodeICE_function_type )( unsigned char *,int,unsigned char const * );
        
        bp::def( 
            "UTIL_DecodeICE"
            , UTIL_DecodeICE_function_type( &::UTIL_DecodeICE )
            , ( bp::arg("buffer"), bp::arg("size"), bp::arg("key") ) );
    
    }

    { //::UTIL_EmitAmbientSound
    
        typedef void ( *UTIL_EmitAmbientSound_function_type )( int,::Vector const &,char const *,float,::soundlevel_t,int,int,float,float * );
        
        bp::def( 
            "UTIL_EmitAmbientSound"
            , UTIL_EmitAmbientSound_function_type( &::UTIL_EmitAmbientSound )
            , ( bp::arg("entindex"), bp::arg("vecOrigin"), bp::arg("samp"), bp::arg("vol"), bp::arg("soundlevel"), bp::arg("fFlags"), bp::arg("pitch"), bp::arg("soundtime")=0.0f, bp::arg("duration")=bp::object() ) );
    
    }

    { //::UTIL_EntityHasMatchingRootParent
    
        typedef bool ( *UTIL_EntityHasMatchingRootParent_function_type )( ::C_BaseEntity *,::C_BaseEntity * );
        
        bp::def( 
            "UTIL_EntityHasMatchingRootParent"
            , UTIL_EntityHasMatchingRootParent_function_type( &::UTIL_EntityHasMatchingRootParent )
            , ( bp::arg("pRootParent"), bp::arg("pEntity") ) );
    
    }

    { //::UTIL_GetActiveHolidayString
    
        typedef char const * ( *UTIL_GetActiveHolidayString_function_type )(  );
        
        bp::def( 
            "UTIL_GetActiveHolidayString"
            , UTIL_GetActiveHolidayString_function_type( &::UTIL_GetActiveHolidayString ) );
    
    }

    { //::UTIL_GetHolidayForString
    
        typedef int ( *UTIL_GetHolidayForString_function_type )( char const * );
        
        bp::def( 
            "UTIL_GetHolidayForString"
            , UTIL_GetHolidayForString_function_type( &::UTIL_GetHolidayForString )
            , ( bp::arg("pszHolidayName") ) );
    
    }

    { //::UTIL_GetMapKeyCount
    
        typedef int ( *UTIL_GetMapKeyCount_function_type )( char const * );
        
        bp::def( 
            "UTIL_GetMapKeyCount"
            , UTIL_GetMapKeyCount_function_type( &::UTIL_GetMapKeyCount )
            , ( bp::arg("pszCustomKey") ) );
    
    }

    { //::UTIL_GetNormalizedColorTintAndLuminosity
    
        typedef void ( *UTIL_GetNormalizedColorTintAndLuminosity_function_type )( ::Vector const &,::Vector *,float * );
        
        bp::def( 
            "UTIL_GetNormalizedColorTintAndLuminosity"
            , UTIL_GetNormalizedColorTintAndLuminosity_function_type( &::UTIL_GetNormalizedColorTintAndLuminosity )
            , ( bp::arg("color"), bp::arg("tint")=bp::object(), bp::arg("luminosity")=bp::object() ) );
    
    }

    { //::UTIL_HasLoadedAnyMap
    
        typedef bool ( *UTIL_HasLoadedAnyMap_function_type )(  );
        
        bp::def( 
            "UTIL_HasLoadedAnyMap"
            , UTIL_HasLoadedAnyMap_function_type( &::UTIL_HasLoadedAnyMap ) );
    
    }

    { //::UTIL_ImpactTrace
    
        typedef void ( *UTIL_ImpactTrace_function_type )( ::trace_t *,int,char const * );
        
        bp::def( 
            "UTIL_ImpactTrace"
            , UTIL_ImpactTrace_function_type( &::UTIL_ImpactTrace )
            , ( bp::arg("pTrace"), bp::arg("iDamageType"), bp::arg("pCustomImpactName")=bp::object() ) );
    
    }

    { //::UTIL_IncrementMapKey
    
        typedef void ( *UTIL_IncrementMapKey_function_type )( char const * );
        
        bp::def( 
            "UTIL_IncrementMapKey"
            , UTIL_IncrementMapKey_function_type( &::UTIL_IncrementMapKey )
            , ( bp::arg("pszCustomKey") ) );
    
    }

    { //::UTIL_IsHolidayActive
    
        typedef bool ( *UTIL_IsHolidayActive_function_type )( int );
        
        bp::def( 
            "UTIL_IsHolidayActive"
            , UTIL_IsHolidayActive_function_type( &::UTIL_IsHolidayActive )
            , ( bp::arg("eHoliday") ) );
    
    }

    { //::UTIL_IsLowViolence
    
        typedef bool ( *UTIL_IsLowViolence_function_type )(  );
        
        bp::def( 
            "UTIL_IsLowViolence"
            , UTIL_IsLowViolence_function_type( &::UTIL_IsLowViolence ) );
    
    }

    { //::UTIL_IsSpaceEmpty
    
        typedef bool ( *UTIL_IsSpaceEmpty_function_type )( ::C_BaseEntity *,::Vector const &,::Vector const & );
        
        bp::def( 
            "UTIL_IsSpaceEmpty"
            , UTIL_IsSpaceEmpty_function_type( &::UTIL_IsSpaceEmpty )
            , ( bp::arg("pMainEnt"), bp::arg("vMin"), bp::arg("vMax") ) );
    
    }

    { //::UTIL_ListDir
    
        typedef ::boost::python::list ( *UTIL_ListDir_function_type )( char const *,char const *,char const * );
        
        bp::def( 
            "UTIL_ListDir"
            , UTIL_ListDir_function_type( &::UTIL_ListDir )
            , ( bp::arg("path"), bp::arg("pathid")=bp::object(), bp::arg("wildcard")="*" ) );
    
    }

    { //::UTIL_MakeSafeName
    
        typedef void ( *UTIL_MakeSafeName_function_type )( char const *,char *,int );
        
        bp::def( 
            "UTIL_MakeSafeName"
            , UTIL_MakeSafeName_function_type( &::UTIL_MakeSafeName )
            , ( bp::arg("oldName"), bp::arg("newName"), bp::arg("newNameBufSize") ) );
    
    }

    { //::UTIL_ParticleTracer
    
        typedef void ( *UTIL_ParticleTracer_function_type )( char const *,::Vector const &,::Vector const &,int,int,bool );
        
        bp::def( 
            "UTIL_ParticleTracer"
            , UTIL_ParticleTracer_function_type( &::UTIL_ParticleTracer )
            , ( bp::arg("pszTracerEffectName"), bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("iEntIndex")=(int)(0), bp::arg("iAttachment")=(int)(0), bp::arg("bWhiz")=(bool)(false) ) );
    
    }

    { //::UTIL_PlayerByIndex
    
        typedef ::C_BasePlayer * ( *UTIL_PlayerByIndex_function_type )( int );
        
        bp::def( 
            "UTIL_PlayerByIndex"
            , UTIL_PlayerByIndex_function_type( &::UTIL_PlayerByIndex )
            , ( bp::arg("entindex") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_PlayerByUserId
    
        typedef ::C_BasePlayer * ( *UTIL_PlayerByUserId_function_type )( int );
        
        bp::def( 
            "UTIL_PlayerByUserId"
            , UTIL_PlayerByUserId_function_type( &::UTIL_PlayerByUserId )
            , ( bp::arg("userID") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_PointContents
    
        typedef int ( *UTIL_PointContents_function_type )( ::Vector const & );
        
        bp::def( 
            "UTIL_PointContents"
            , UTIL_PointContents_function_type( &::UTIL_PointContents )
            , ( bp::arg("vec") ) );
    
    }

    { //::UTIL_PrecacheDecal
    
        typedef int ( *UTIL_PrecacheDecal_function_type )( char const *,bool );
        
        bp::def( 
            "UTIL_PrecacheDecal"
            , UTIL_PrecacheDecal_function_type( &::UTIL_PrecacheDecal )
            , ( bp::arg("name"), bp::arg("preload")=(bool)(false) ) );
    
    }

    { //::UTIL_PrecacheOther
    
        typedef void ( *UTIL_PrecacheOther_function_type )( char const * );
        
        bp::def( 
            "UTIL_PrecacheOther"
            , UTIL_PrecacheOther_function_type( &::UTIL_PrecacheOther )
            , ( bp::arg("szClassname") ) );
    
    }

    { //::UTIL_PyEntitiesAlongRay
    
        typedef ::boost::python::object ( *UTIL_EntitiesAlongRay_function_type )( int,::PyRay_t const &,int,int );
        
        bp::def( 
            "UTIL_EntitiesAlongRay"
            , UTIL_EntitiesAlongRay_function_type( &::UTIL_PyEntitiesAlongRay )
            , ( bp::arg("listMax"), bp::arg("ray"), bp::arg("flagMask"), bp::arg("partitionmask")=int(::PARTITION_CLIENT_NON_STATIC_EDICTS) ) );
    
    }

    { //::UTIL_PyEntitiesInBox
    
        typedef ::boost::python::object ( *UTIL_EntitiesInBox_function_type )( int,::Vector const &,::Vector const &,int,int );
        
        bp::def( 
            "UTIL_EntitiesInBox"
            , UTIL_EntitiesInBox_function_type( &::UTIL_PyEntitiesInBox )
            , ( bp::arg("listMax"), bp::arg("mins"), bp::arg("maxs"), bp::arg("flagMask"), bp::arg("partitionmask")=int(::PARTITION_CLIENT_NON_STATIC_EDICTS) ) );
    
    }

    { //::UTIL_PyEntitiesInSphere
    
        typedef ::boost::python::object ( *UTIL_EntitiesInSphere_function_type )( int,::Vector const &,float,int,int );
        
        bp::def( 
            "UTIL_EntitiesInSphere"
            , UTIL_EntitiesInSphere_function_type( &::UTIL_PyEntitiesInSphere )
            , ( bp::arg("listMax"), bp::arg("center"), bp::arg("radius"), bp::arg("flagMask"), bp::arg("partitionmask")=int(::PARTITION_CLIENT_NON_STATIC_EDICTS) ) );
    
    }

    { //::UTIL_PyTraceRay
    
        typedef void ( *UTIL_TraceRay_function_type )( ::PyRay_t const &,unsigned int,::ITraceFilter &,::trace_t * );
        
        bp::def( 
            "UTIL_TraceRay"
            , UTIL_TraceRay_function_type( &::UTIL_PyTraceRay )
            , ( bp::arg("ray"), bp::arg("mask"), bp::arg("traceFilter"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_PyTraceRay
    
        typedef void ( *UTIL_TraceRay_function_type )( ::PyRay_t const &,unsigned int,::C_BaseEntity const *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceRay"
            , UTIL_TraceRay_function_type( &::UTIL_PyTraceRay )
            , ( bp::arg("ray"), bp::arg("mask"), bp::arg("ignore"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_ReplaceKeyBindings
    
        typedef void ( *UTIL_ReplaceKeyBindings_function_type )( wchar_t const *,int,wchar_t *,int );
        
        bp::def( 
            "UTIL_ReplaceKeyBindings"
            , UTIL_ReplaceKeyBindings_function_type( &::UTIL_ReplaceKeyBindings )
            , ( bp::arg("inbuf"), bp::arg("inbufsizebytes"), bp::arg("outbuf"), bp::arg("outbufsizebytes") ) );
    
    }

    { //::UTIL_SafeName
    
        typedef char const * ( *UTIL_SafeName_function_type )( char const * );
        
        bp::def( 
            "UTIL_SafeName"
            , UTIL_SafeName_function_type( &::UTIL_SafeName )
            , ( bp::arg("oldName") ) );
    
    }

    { //::UTIL_ScreenShake
    
        typedef void ( *UTIL_ScreenShake_function_type )( ::Vector const &,float,float,float,float,::ShakeCommand_t,bool );
        
        bp::def( 
            "UTIL_ScreenShake"
            , UTIL_ScreenShake_function_type( &::UTIL_ScreenShake )
            , ( bp::arg("center"), bp::arg("amplitude"), bp::arg("frequency"), bp::arg("duration"), bp::arg("radius"), bp::arg("eCommand"), bp::arg("bAirShake")=(bool)(false) ) );
    
    }

    { //::UTIL_SetOrigin
    
        typedef void ( *UTIL_SetOrigin_function_type )( ::C_BaseEntity *,::Vector const & );
        
        bp::def( 
            "UTIL_SetOrigin"
            , UTIL_SetOrigin_function_type( &::UTIL_SetOrigin )
            , ( bp::arg("entity"), bp::arg("vecOrigin") ) );
    
    }

    { //::UTIL_SetTrace
    
        typedef void ( *UTIL_SetTrace_function_type )( ::trace_t &,::Ray_t const &,::C_BaseEntity *,float,int,unsigned int,::Vector const &,float );
        
        bp::def( 
            "UTIL_SetTrace"
            , UTIL_SetTrace_function_type( &::UTIL_SetTrace )
            , ( bp::arg("tr"), bp::arg("ray"), bp::arg("edict"), bp::arg("fraction"), bp::arg("hitgroup"), bp::arg("contents"), bp::arg("normal"), bp::arg("intercept") ) );
    
    }

    { //::UTIL_ShouldShowBlood
    
        typedef bool ( *UTIL_ShouldShowBlood_function_type )( int );
        
        bp::def( 
            "UTIL_ShouldShowBlood"
            , UTIL_ShouldShowBlood_function_type( &::UTIL_ShouldShowBlood )
            , ( bp::arg("bloodColor") ) );
    
    }

    { //::UTIL_Smoke
    
        typedef void ( *UTIL_Smoke_function_type )( ::Vector const &,float const,float const );
        
        bp::def( 
            "UTIL_Smoke"
            , UTIL_Smoke_function_type( &::UTIL_Smoke )
            , ( bp::arg("origin"), bp::arg("scale"), bp::arg("framerate") ) );
    
    }

    { //::UTIL_StringFieldToInt
    
        typedef int ( *UTIL_StringFieldToInt_function_type )( char const *,char const * *,int );
        
        bp::def( 
            "UTIL_StringFieldToInt"
            , UTIL_StringFieldToInt_function_type( &::UTIL_StringFieldToInt )
            , ( bp::arg("szValue"), bp::arg("pValueStrings"), bp::arg("iNumStrings") ) );
    
    }

    { //::UTIL_StringToColor32
    
        typedef void ( *UTIL_StringToColor32_function_type )( ::color32 *,char const * );
        
        bp::def( 
            "UTIL_StringToColor32"
            , UTIL_StringToColor32_function_type( &::UTIL_StringToColor32 )
            , ( bp::arg("color"), bp::arg("pString") ) );
    
    }

    { //::UTIL_StringToFloatArray
    
        typedef void ( *UTIL_StringToFloatArray_function_type )( float *,int,char const * );
        
        bp::def( 
            "UTIL_StringToFloatArray"
            , UTIL_StringToFloatArray_function_type( &::UTIL_StringToFloatArray )
            , ( bp::arg("pVector"), bp::arg("count"), bp::arg("pString") ) );
    
    }

    { //::UTIL_StringToIntArray
    
        typedef void ( *UTIL_StringToIntArray_function_type )( int *,int,char const * );
        
        bp::def( 
            "UTIL_StringToIntArray"
            , UTIL_StringToIntArray_function_type( &::UTIL_StringToIntArray )
            , ( bp::arg("pVector"), bp::arg("count"), bp::arg("pString") ) );
    
    }

    { //::UTIL_StringToVector
    
        typedef void ( *UTIL_StringToVector_function_type )( float *,char const * );
        
        bp::def( 
            "UTIL_StringToVector"
            , UTIL_StringToVector_function_type( &::UTIL_StringToVector )
            , ( bp::arg("pVector"), bp::arg("pString") ) );
    
    }

    { //::UTIL_TraceEntity
    
        typedef void ( *UTIL_TraceEntity_function_type )( ::C_BaseEntity *,::Vector const &,::Vector const &,unsigned int,::IHandleEntity const *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceEntity"
            , UTIL_TraceEntity_function_type( &::UTIL_TraceEntity )
            , ( bp::arg("pEntity"), bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("ignore"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceEntity
    
        typedef void ( *UTIL_TraceEntity_function_type )( ::C_BaseEntity *,::Vector const &,::Vector const &,unsigned int,::ITraceFilter *,::trace_t * );
        
        bp::def( 
            "UTIL_TraceEntity"
            , UTIL_TraceEntity_function_type( &::UTIL_TraceEntity )
            , ( bp::arg("pEntity"), bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("pFilter"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceEntity
    
        typedef void ( *UTIL_TraceEntity_function_type )( ::C_BaseEntity *,::Vector const &,::Vector const &,unsigned int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceEntity"
            , UTIL_TraceEntity_function_type( &::UTIL_TraceEntity )
            , ( bp::arg("pEntity"), bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceHull
    
        typedef void ( *UTIL_TraceHull_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,unsigned int,::ITraceFilter *,::trace_t * );
        
        bp::def( 
            "UTIL_TraceHull"
            , UTIL_TraceHull_function_type( &::UTIL_TraceHull )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("hullMin"), bp::arg("hullMax"), bp::arg("mask"), bp::arg("pFilter"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceHull
    
        typedef void ( *UTIL_TraceHull_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,unsigned int,::IHandleEntity const *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceHull"
            , UTIL_TraceHull_function_type( &::UTIL_TraceHull )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("hullMin"), bp::arg("hullMax"), bp::arg("mask"), bp::arg("ignore"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceLine
    
        typedef void ( *UTIL_TraceLine_function_type )( ::Vector const &,::Vector const &,unsigned int,::ITraceFilter *,::trace_t * );
        
        bp::def( 
            "UTIL_TraceLine"
            , UTIL_TraceLine_function_type( &::UTIL_TraceLine )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("pFilter"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceLine
    
        typedef void ( *UTIL_TraceLine_function_type )( ::Vector const &,::Vector const &,unsigned int,::IHandleEntity const *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceLine"
            , UTIL_TraceLine_function_type( &::UTIL_TraceLine )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("ignore"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceModel
    
        typedef void ( *UTIL_TraceModel_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::C_BaseEntity *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceModel"
            , UTIL_TraceModel_function_type( &::UTIL_TraceModel )
            , ( bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("hullMin"), bp::arg("hullMax"), bp::arg("pentModel"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_Tracer
    
        typedef void ( *UTIL_Tracer_function_type )( ::Vector const &,::Vector const &,int,int,float,bool,char const *,int );
        
        bp::def( 
            "UTIL_Tracer"
            , UTIL_Tracer_function_type( &::UTIL_Tracer )
            , ( bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("iEntIndex")=(int)(0), bp::arg("iAttachment")=(int)(-0x000000001), bp::arg("flVelocity")=0, bp::arg("bWhiz")=(bool)(false), bp::arg("pCustomTracerName")=bp::object(), bp::arg("iParticleID")=(int)(0) ) );
    
    }

    { //::UTIL_VecToPitch
    
        typedef float ( *UTIL_VecToPitch_function_type )( ::matrix3x4_t const &,::Vector const & );
        
        bp::def( 
            "UTIL_VecToPitch"
            , UTIL_VecToPitch_function_type( &::UTIL_VecToPitch )
            , ( bp::arg("matrix"), bp::arg("vec") ) );
    
    }

    { //::UTIL_VecToPitch
    
        typedef float ( *UTIL_VecToPitch_function_type )( ::Vector const & );
        
        bp::def( 
            "UTIL_VecToPitch"
            , UTIL_VecToPitch_function_type( &::UTIL_VecToPitch )
            , ( bp::arg("vec") ) );
    
    }

    { //::UTIL_VecToYaw
    
        typedef float ( *UTIL_VecToYaw_function_type )( ::matrix3x4_t const &,::Vector const & );
        
        bp::def( 
            "UTIL_VecToYaw"
            , UTIL_VecToYaw_function_type( &::UTIL_VecToYaw )
            , ( bp::arg("matrix"), bp::arg("vec") ) );
    
    }

    { //::UTIL_VecToYaw
    
        typedef float ( *UTIL_VecToYaw_function_type )( ::Vector const & );
        
        bp::def( 
            "UTIL_VecToYaw"
            , UTIL_VecToYaw_function_type( &::UTIL_VecToYaw )
            , ( bp::arg("vec") ) );
    
    }

    { //::UTIL_YawToVector
    
        typedef ::Vector ( *UTIL_YawToVector_function_type )( float );
        
        bp::def( 
            "UTIL_YawToVector"
            , UTIL_YawToVector_function_type( &::UTIL_YawToVector )
            , ( bp::arg("yaw") ) );
    
    }
}
#else
#include "cbase.h"

#include "srcpy_util.h"

#include "util_shared.h"

#include "gametrace.h"

#include "engine/IEngineTrace.h"

#include "mathlib/vmatrix.h"

#include "utlvector.h"

#include "shareddefs.h"

#include "util.h"

#include "explode.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct CGameTrace_wrapper : CGameTrace, bp::wrapper< CGameTrace > {

    CGameTrace_wrapper( )
    : CGameTrace( )
      , bp::wrapper< CGameTrace >(){
        // null constructor
    
    }

    static ::CBaseEntity * get_m_pEnt(CGameTrace const & inst ){
        return inst.m_pEnt;
    }
    
    static void set_m_pEnt( CGameTrace & inst, ::CBaseEntity * new_value ){ 
        inst.m_pEnt = new_value;
    }

};

struct CTraceFilterMelee_wrapper : CTraceFilterMelee, bp::wrapper< CTraceFilterMelee > {

    CTraceFilterMelee_wrapper(CTraceFilterMelee const & arg )
    : CTraceFilterMelee( arg )
      , bp::wrapper< CTraceFilterMelee >(){
        // copy constructor
        
    }

    virtual bool ShouldHitEntity( ::IHandleEntity * pHandleEntity, int contentsMask ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldHitEntity: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldHitEntity( boost::python::ptr(pHandleEntity), contentsMask ) of Class: CTraceFilterMelee\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldHitEntity = this->get_override( "ShouldHitEntity" );
        if( func_ShouldHitEntity.ptr() != Py_None )
            try {
                return func_ShouldHitEntity( boost::python::ptr(pHandleEntity), contentsMask );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTraceFilterMelee::ShouldHitEntity( boost::python::ptr(pHandleEntity), contentsMask );
            }
        else
            return this->CTraceFilterMelee::ShouldHitEntity( boost::python::ptr(pHandleEntity), contentsMask );
    }
    
    bool default_ShouldHitEntity( ::IHandleEntity * pHandleEntity, int contentsMask ) {
        return CTraceFilterMelee::ShouldHitEntity( boost::python::ptr(pHandleEntity), contentsMask );
    }

    static ::CTakeDamageInfo * get_m_dmgInfo(CTraceFilterMelee const & inst ){
        return inst.m_dmgInfo;
    }
    
    static void set_m_dmgInfo( CTraceFilterMelee & inst, ::CTakeDamageInfo * new_value ){ 
        inst.m_dmgInfo = new_value;
    }

    static ::CBaseEntity * get_m_pHit(CTraceFilterMelee const & inst ){
        return inst.m_pHit;
    }
    
    static void set_m_pHit( CTraceFilterMelee & inst, ::CBaseEntity * new_value ){ 
        inst.m_pHit = new_value;
    }

    static ::IHandleEntity const * get_m_pPassEnt(CTraceFilterMelee const & inst ){
        return inst.m_pPassEnt;
    }
    
    static void set_m_pPassEnt( CTraceFilterMelee & inst, ::IHandleEntity const * new_value ){ 
        inst.m_pPassEnt = new_value;
    }

    CTraceFilterMelee_wrapper(::CBaseEntity const * passentity, int collisionGroup, ::CTakeDamageInfo * dmgInfo, float flForceScale, bool bDamageAnyNPC )
        : CTraceFilterMelee( boost::python::ptr(passentity), collisionGroup, boost::python::ptr(dmgInfo), flForceScale, bDamageAnyNPC )
        , bp::wrapper< CTraceFilterMelee >(){
        // constructor
    }

};

BOOST_PYTHON_MODULE(_utils){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< QuadBarycentricRetval_t>("QuadBarycentricRetval_t")
        .value("BARY_QUADRATIC_FALSE", BARY_QUADRATIC_FALSE)
        .value("BARY_QUADRATIC_TRUE", BARY_QUADRATIC_TRUE)
        .value("BARY_QUADRATIC_NEGATIVE_DISCRIMINANT", BARY_QUADRATIC_NEGATIVE_DISCRIMINANT)
        .export_values()
        ;

    bp::enum_< ShakeCommand_t>("ShakeCommand_t")
        .value("SHAKE_START", SHAKE_START)
        .value("SHAKE_STOP", SHAKE_STOP)
        .value("SHAKE_AMPLITUDE", SHAKE_AMPLITUDE)
        .value("SHAKE_FREQUENCY", SHAKE_FREQUENCY)
        .value("SHAKE_START_RUMBLEONLY", SHAKE_START_RUMBLEONLY)
        .value("SHAKE_START_NORUMBLE", SHAKE_START_NORUMBLE)
        .export_values()
        ;

    bp::class_< BoxTraceInfo_t >( "BoxTraceInfo_t" )    
        .def_readwrite( "hitside", &BoxTraceInfo_t::hitside )    
        .def_readwrite( "startsolid", &BoxTraceInfo_t::startsolid )    
        .def_readwrite( "t1", &BoxTraceInfo_t::t1 )    
        .def_readwrite( "t2", &BoxTraceInfo_t::t2 );

    bp::class_< CBaseTrace, boost::noncopyable >( "CBaseTrace", bp::init< >() )    
        .def( 
            "IsDispSurface"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurface ) )    
        .def( 
            "IsDispSurfaceBuildable"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurfaceBuildable ) )    
        .def( 
            "IsDispSurfaceProp1"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurfaceProp1 ) )    
        .def( 
            "IsDispSurfaceProp2"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurfaceProp2 ) )    
        .def( 
            "IsDispSurfaceWalkable"
            , (bool ( ::CBaseTrace::* )(  ) )( &::CBaseTrace::IsDispSurfaceWalkable ) )    
        .def_readwrite( "allsolid", &CBaseTrace::allsolid )    
        .def_readwrite( "contents", &CBaseTrace::contents )    
        .def_readwrite( "dispFlags", &CBaseTrace::dispFlags )    
        .def_readwrite( "endpos", &CBaseTrace::endpos )    
        .def_readwrite( "fraction", &CBaseTrace::fraction )    
        .def_readwrite( "plane", &CBaseTrace::plane )    
        .def_readwrite( "startpos", &CBaseTrace::startpos )    
        .def_readwrite( "startsolid", &CBaseTrace::startsolid );

    bp::class_< CGameTrace_wrapper, bp::bases< CBaseTrace >, boost::noncopyable >( "trace_t", bp::init< >() )    
        .def( 
            "DidHit"
            , (bool ( ::CGameTrace::* )(  ) const)( &::CGameTrace::DidHit ) )    
        .def( 
            "DidHitNonWorldEntity"
            , (bool ( ::CGameTrace::* )(  ) const)( &::CGameTrace::DidHitNonWorldEntity ) )    
        .def( 
            "DidHitWorld"
            , (bool ( ::CGameTrace::* )(  ) const)( &::CGameTrace::DidHitWorld ) )    
        .def( 
            "GetEntityIndex"
            , (int ( ::CGameTrace::* )(  ) const)( &::CGameTrace::GetEntityIndex ) )    
        .def_readwrite( "fractionleftsolid", &CGameTrace::fractionleftsolid )    
        .def_readwrite( "hitbox", &CGameTrace::hitbox )    
        .def_readwrite( "hitgroup", &CGameTrace::hitgroup )    
        .add_property( "ent"
                    , bp::make_function( (::CBaseEntity * (*)( ::CGameTrace const & ))(&CGameTrace_wrapper::get_m_pEnt), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::CGameTrace &,::CBaseEntity * ))(&CGameTrace_wrapper::set_m_pEnt), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "physicsbone", &CGameTrace::physicsbone )    
        .def_readwrite( "surface", &CGameTrace::surface );

    bp::class_< ITraceFilter, boost::noncopyable >( "ITraceFilter", bp::no_init );

    bp::class_< CTraceFilter, bp::bases< ITraceFilter >, boost::noncopyable >( "CTraceFilter", bp::no_init )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilter::* )(  ) const)( &::CTraceFilter::GetTraceType ) );

    bp::class_< CTraceFilterSimple, bp::bases< CTraceFilter > >( "CTraceFilterSimpleInternal", bp::no_init )    
        .def( 
            "GetPassEntity"
            , (::IHandleEntity const * ( ::CTraceFilterSimple::* )(  ) )( &::CTraceFilterSimple::GetPassEntity )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "SetCollisionGroup"
            , (void ( ::CTraceFilterSimple::* )( int ) )( &::CTraceFilterSimple::SetCollisionGroup )
            , ( bp::arg("iCollisionGroup") ) )    
        .def( 
            "SetPassEntity"
            , (void ( ::CTraceFilterSimple::* )( ::IHandleEntity const * ) )( &::CTraceFilterSimple::SetPassEntity )
            , ( bp::arg("pPassEntity") ) );

    bp::class_< CPyTraceFilterSimple, bp::bases< CTraceFilterSimple > >( "CTraceFilterSimple", bp::init< IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("collisionGroup") )) );

    bp::class_< CTraceFilterChain, bp::bases< CTraceFilter > >( "CTraceFilterChain", bp::init< ITraceFilter *, ITraceFilter * >(( bp::arg("pTraceFilter1"), bp::arg("pTraceFilter2") )) );

    bp::class_< CTraceFilterEntitiesOnly, bp::bases< ITraceFilter >, boost::noncopyable >( "CTraceFilterEntitiesOnly", bp::no_init )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilterEntitiesOnly::* )(  ) const)( &::CTraceFilterEntitiesOnly::GetTraceType ) );

    bp::class_< CTraceFilterHitAll, bp::bases< CTraceFilter > >( "CTraceFilterHitAll" );

    bp::class_< CTraceFilterSkipTwoEntities, bp::bases< CTraceFilterSimple > >( "CTraceFilterSkipTwoEntities", bp::init< IHandleEntity const *, IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("passentity2"), bp::arg("collisionGroup") )) )    
        .def( 
            "SetPassEntity2"
            , (void ( ::CTraceFilterSkipTwoEntities::* )( ::IHandleEntity const * ) )( &::CTraceFilterSkipTwoEntities::SetPassEntity2 )
            , ( bp::arg("pPassEntity2") ) );

    bp::class_< CTraceFilterLOS, bp::bases< CTraceFilterSkipTwoEntities > >( "CTraceFilterLOS", bp::init< IHandleEntity *, int, bp::optional< IHandleEntity * > >(( bp::arg("pHandleEntity"), bp::arg("collisionGroup"), bp::arg("pHandleEntity2")=bp::object() )) );

    bp::class_< CTraceFilterMelee_wrapper, bp::bases< CTraceFilterEntitiesOnly > >( "CTraceFilterMelee", bp::no_init )    
        .def( 
            "ShouldHitEntity"
            , (bool ( ::CTraceFilterMelee::* )( ::IHandleEntity *,int ) )(&::CTraceFilterMelee::ShouldHitEntity)
            , (bool ( CTraceFilterMelee_wrapper::* )( ::IHandleEntity *,int ) )(&CTraceFilterMelee_wrapper::default_ShouldHitEntity)
            , ( bp::arg("pHandleEntity"), bp::arg("contentsMask") ) )    
        .def_readwrite( "m_bDamageAnyNPC", &CTraceFilterMelee::m_bDamageAnyNPC )    
        .def_readwrite( "m_collisionGroup", &CTraceFilterMelee::m_collisionGroup )    
        .add_property( "m_dmgInfo"
                    , bp::make_function( (::CTakeDamageInfo * (*)( ::CTraceFilterMelee const & ))(&CTraceFilterMelee_wrapper::get_m_dmgInfo), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::CTraceFilterMelee &,::CTakeDamageInfo * ))(&CTraceFilterMelee_wrapper::set_m_dmgInfo), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "m_flForceScale", &CTraceFilterMelee::m_flForceScale )    
        .add_property( "m_pHit"
                    , bp::make_function( (::CBaseEntity * (*)( ::CTraceFilterMelee const & ))(&CTraceFilterMelee_wrapper::get_m_pHit), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::CTraceFilterMelee &,::CBaseEntity * ))(&CTraceFilterMelee_wrapper::set_m_pHit), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .add_property( "m_pPassEnt"
                    , bp::make_function( (::IHandleEntity const * (*)( ::CTraceFilterMelee const & ))(&CTraceFilterMelee_wrapper::get_m_pPassEnt), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::CTraceFilterMelee &,::IHandleEntity const * ))(&CTraceFilterMelee_wrapper::set_m_pPassEnt), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def( bp::init< CBaseEntity const *, int, CTakeDamageInfo *, float, bool >(( bp::arg("passentity"), bp::arg("collisionGroup"), bp::arg("dmgInfo"), bp::arg("flForceScale"), bp::arg("bDamageAnyNPC") )) );

    bp::class_< CTraceFilterNoNPCsOrPlayer, bp::bases< CTraceFilterSimple > >( "CTraceFilterNoNPCsOrPlayer", bp::init< IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("collisionGroup") )) );

    bp::class_< CTraceFilterOnlyNPCsAndPlayer, bp::bases< CTraceFilterSimple > >( "CTraceFilterOnlyNPCsAndPlayer", bp::init< IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("collisionGroup") )) )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilterOnlyNPCsAndPlayer::* )(  ) const)( &::CTraceFilterOnlyNPCsAndPlayer::GetTraceType ) );

    bp::class_< CTraceFilterSimpleClassnameList, bp::bases< CTraceFilterSimple >, boost::noncopyable >( "CTraceFilterSimpleClassnameList", bp::init< IHandleEntity const *, int >(( bp::arg("passentity"), bp::arg("collisionGroup") )) )    
        .def( 
            "AddClassnameToIgnore"
            , (void ( ::CTraceFilterSimpleClassnameList::* )( char const * ) )( &::CTraceFilterSimpleClassnameList::AddClassnameToIgnore )
            , ( bp::arg("pchClassname") ) );

    { //::CTraceFilterSimpleList
        typedef bp::class_< CTraceFilterSimpleList, bp::bases< CTraceFilterSimple >, boost::noncopyable > CTraceFilterSimpleList_exposer_t;
        CTraceFilterSimpleList_exposer_t CTraceFilterSimpleList_exposer = CTraceFilterSimpleList_exposer_t( "CTraceFilterSimpleList", bp::init< int >(( bp::arg("collisionGroup") )) );
        bp::scope CTraceFilterSimpleList_scope( CTraceFilterSimpleList_exposer );
        bp::implicitly_convertible< int, CTraceFilterSimpleList >();
        { //::CTraceFilterSimpleList::AddEntityToIgnore
        
            typedef void ( ::CTraceFilterSimpleList::*AddEntityToIgnore_function_type )( ::IHandleEntity * ) ;
            
            CTraceFilterSimpleList_exposer.def( 
                "AddEntityToIgnore"
                , AddEntityToIgnore_function_type( &::CTraceFilterSimpleList::AddEntityToIgnore )
                , ( bp::arg("pEntity") ) );
        
        }
    }

    bp::class_< CTraceFilterSkipClassname, bp::bases< CTraceFilterSimple > >( "CTraceFilterSkipClassname", bp::init< IHandleEntity const *, char const *, int >(( bp::arg("passentity"), bp::arg("pchClassname"), bp::arg("collisionGroup") )) );

    bp::class_< CTraceFilterSkipTwoClassnames, bp::bases< CTraceFilterSkipClassname > >( "CTraceFilterSkipTwoClassnames", bp::init< IHandleEntity const *, char const *, char const *, int >(( bp::arg("passentity"), bp::arg("pchClassname"), bp::arg("pchClassname2"), bp::arg("collisionGroup") )) );

    bp::class_< CTraceFilterWorldAndPropsOnly, bp::bases< ITraceFilter > >( "CTraceFilterWorldAndPropsOnly" )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilterWorldAndPropsOnly::* )(  ) const)( &::CTraceFilterWorldAndPropsOnly::GetTraceType ) );

    bp::class_< CTraceFilterWorldOnly, bp::bases< ITraceFilter > >( "CTraceFilterWorldOnly" )    
        .def( 
            "GetTraceType"
            , (::TraceType_t ( ::CTraceFilterWorldOnly::* )(  ) const)( &::CTraceFilterWorldOnly::GetTraceType ) );

    { //::PyRay_t
        typedef bp::class_< PyRay_t > Ray_t_exposer_t;
        Ray_t_exposer_t Ray_t_exposer = Ray_t_exposer_t( "Ray_t", bp::init< >() );
        bp::scope Ray_t_scope( Ray_t_exposer );
        Ray_t_exposer.def( bp::init< Ray_t const & >(( bp::arg("raysrc") )) );
        bp::implicitly_convertible< Ray_t const &, PyRay_t >();
        { //::PyRay_t::Init
        
            typedef void ( ::PyRay_t::*Init_function_type )( ::Vector const &,::Vector const & ) ;
            
            Ray_t_exposer.def( 
                "Init"
                , Init_function_type( &::PyRay_t::Init )
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::PyRay_t::Init
        
            typedef void ( ::PyRay_t::*Init_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const & ) ;
            
            Ray_t_exposer.def( 
                "Init"
                , Init_function_type( &::PyRay_t::Init )
                , ( bp::arg("start"), bp::arg("end"), bp::arg("mins"), bp::arg("maxs") ) );
        
        }
        { //::PyRay_t::InvDelta
        
            typedef ::Vector ( ::PyRay_t::*InvDelta_function_type )(  ) const;
            
            Ray_t_exposer.def( 
                "InvDelta"
                , InvDelta_function_type( &::PyRay_t::InvDelta ) );
        
        }
        { //::PyRay_t::ToRay
        
            typedef ::Ray_t ( ::PyRay_t::*ToRay_function_type )(  ) const;
            
            Ray_t_exposer.def( 
                "ToRay"
                , ToRay_function_type( &::PyRay_t::ToRay ) );
        
        }
        Ray_t_exposer.def_readwrite( "delta", &PyRay_t::m_Delta );
        Ray_t_exposer.def_readwrite( "extents", &PyRay_t::m_Extents );
        Ray_t_exposer.def_readwrite( "isray", &PyRay_t::m_IsRay );
        Ray_t_exposer.def_readwrite( "isswept", &PyRay_t::m_IsSwept );
        Ray_t_exposer.def_readwrite( "start", &PyRay_t::m_Start );
        Ray_t_exposer.def_readwrite( "startoffset", &PyRay_t::m_StartOffset );
    }

    bp::class_< csurface_t >( "csurface_t" )    
        .def_readwrite( "flags", &csurface_t::flags )    
        .def_readwrite( "surfaceProps", &csurface_t::surfaceProps );

    bp::class_< hudtextparms_s >( "hudtextparms" )    
        .def_readwrite( "a1", &hudtextparms_s::a1 )    
        .def_readwrite( "a2", &hudtextparms_s::a2 )    
        .def_readwrite( "b1", &hudtextparms_s::b1 )    
        .def_readwrite( "b2", &hudtextparms_s::b2 )    
        .def_readwrite( "channel", &hudtextparms_s::channel )    
        .def_readwrite( "effect", &hudtextparms_s::effect )    
        .def_readwrite( "fadeinTime", &hudtextparms_s::fadeinTime )    
        .def_readwrite( "fadeoutTime", &hudtextparms_s::fadeoutTime )    
        .def_readwrite( "fxTime", &hudtextparms_s::fxTime )    
        .def_readwrite( "g1", &hudtextparms_s::g1 )    
        .def_readwrite( "g2", &hudtextparms_s::g2 )    
        .def_readwrite( "holdTime", &hudtextparms_s::holdTime )    
        .def_readwrite( "r1", &hudtextparms_s::r1 )    
        .def_readwrite( "r2", &hudtextparms_s::r2 )    
        .def_readwrite( "x", &hudtextparms_s::x )    
        .def_readwrite( "y", &hudtextparms_s::y );

    { //::ComputeIntersectionBarycentricCoordinates
    
        typedef bool ( *ComputeIntersectionBarycentricCoordinates_function_type )( ::Ray_t const &,::Vector const &,::Vector const &,::Vector const &,float &,float &,float * );
        
        bp::def( 
            "ComputeIntersectionBarycentricCoordinates"
            , ComputeIntersectionBarycentricCoordinates_function_type( &::ComputeIntersectionBarycentricCoordinates )
            , ( bp::arg("ray"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("u"), bp::arg("v"), bp::arg("t")=bp::object() ) );
    
    }

    { //::ComputePointFromBarycentric
    
        typedef void ( *ComputePointFromBarycentric_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D const &,float,float,::Vector2D & );
        
        bp::def( 
            "ComputePointFromBarycentric"
            , ComputePointFromBarycentric_function_type( &::ComputePointFromBarycentric )
            , ( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("u"), bp::arg("v"), bp::arg("pt") ) );
    
    }

    { //::ComputePointFromBarycentric
    
        typedef void ( *ComputePointFromBarycentric_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float,::Vector & );
        
        bp::def( 
            "ComputePointFromBarycentric"
            , ComputePointFromBarycentric_function_type( &::ComputePointFromBarycentric )
            , ( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("u"), bp::arg("v"), bp::arg("pt") ) );
    
    }

    { //::ComputeSeparatingPlane
    
        typedef bool ( *ComputeSeparatingPlane_function_type )( ::Vector const &,::QAngle const &,::Vector const &,::Vector const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,float,::cplane_t * );
        
        bp::def( 
            "ComputeSeparatingPlane"
            , ComputeSeparatingPlane_function_type( &::ComputeSeparatingPlane )
            , ( bp::arg("org1"), bp::arg("angles1"), bp::arg("min1"), bp::arg("max1"), bp::arg("org2"), bp::arg("angles2"), bp::arg("min2"), bp::arg("max2"), bp::arg("tolerance"), bp::arg("pPlane") ) );
    
    }

    { //::ENTINDEX
    
        typedef int ( *ENTINDEX_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "ENTINDEX"
            , ENTINDEX_function_type( &::ENTINDEX )
            , ( bp::arg("pEnt") ) );
    
    }

    { //::ENTINDEX
    
        typedef int ( *ENTINDEX_function_type )( ::edict_t * );
        
        bp::def( 
            "ENTINDEX"
            , ENTINDEX_function_type( &::ENTINDEX )
            , ( bp::arg("pEdict") ) );
    
    }

    { //::ExplosionCreate
    
        typedef void ( *ExplosionCreate_function_type )( ::Vector const &,::QAngle const &,::CBaseEntity *,int,int,bool,::EHANDLE const *,::Class_T,float,bool,bool,int );
        
        bp::def( 
            "ExplosionCreate"
            , ExplosionCreate_function_type( &::ExplosionCreate )
            , ( bp::arg("center"), bp::arg("angles"), bp::arg("pOwner"), bp::arg("magnitude"), bp::arg("radius"), bp::arg("doDamage"), bp::arg("ignoredEntity"), bp::arg("ignoredClass"), bp::arg("flExplosionForce")=0.0f, bp::arg("bSurfaceOnly")=(bool)(false), bp::arg("bSilent")=(bool)(false), bp::arg("iCustomDamageType")=(int)(-0x000000001) ) );
    
    }

    { //::ExplosionCreate
    
        typedef void ( *ExplosionCreate_function_type )( ::Vector const &,::QAngle const &,::CBaseEntity *,int,int,int,float,::CBaseEntity *,int,::EHANDLE const *,::Class_T );
        
        bp::def( 
            "ExplosionCreate"
            , ExplosionCreate_function_type( &::ExplosionCreate )
            , ( bp::arg("center"), bp::arg("angles"), bp::arg("pOwner"), bp::arg("magnitude"), bp::arg("radius"), bp::arg("nSpawnFlags"), bp::arg("flExplosionForce")=0.0f, bp::arg("pInflictor")=bp::object(), bp::arg("iCustomDamageType")=(int)(-0x000000001), bp::arg("ignoredEntity")=bp::object(), bp::arg("ignoredClass")=::CLASS_NONE ) );
    
    }

    { //::ExplosionCreate
    
        typedef void ( *ExplosionCreate_function_type )( ::Vector const &,::QAngle const &,::CBaseEntity *,int,int,bool,float,bool,bool,int );
        
        bp::def( 
            "ExplosionCreate"
            , ExplosionCreate_function_type( &::ExplosionCreate )
            , ( bp::arg("center"), bp::arg("angles"), bp::arg("pOwner"), bp::arg("magnitude"), bp::arg("radius"), bp::arg("doDamage"), bp::arg("flExplosionForce")=0.0f, bp::arg("bSurfaceOnly")=(bool)(false), bp::arg("bSilent")=(bool)(false), bp::arg("iCustomDamageType")=(int)(-0x000000001) ) );
    
    }

    { //::GetSuppressHost
    
        typedef ::CBaseEntity const * ( *GetSuppressHost_function_type )(  );
        
        bp::def( 
            "GetSuppressHost"
            , GetSuppressHost_function_type( &::GetSuppressHost )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::INDEXENT
    
        typedef ::edict_t * ( *INDEXENT_function_type )( int );
        
        bp::def( 
            "INDEXENT"
            , INDEXENT_function_type( &::INDEXENT )
            , ( bp::arg("iEdictNum") )
            , bp::return_internal_reference< >() );
    
    }

    { //::IntersectInfiniteRayWithSphere
    
        typedef bool ( *IntersectInfiniteRayWithSphere_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float *,float * );
        
        bp::def( 
            "IntersectInfiniteRayWithSphere"
            , IntersectInfiniteRayWithSphere_function_type( &::IntersectInfiniteRayWithSphere )
            , ( bp::arg("vecRayOrigin"), bp::arg("vecRayDelta"), bp::arg("vecSphereCenter"), bp::arg("flRadius"), bp::arg("pT1"), bp::arg("pT2") ) );
    
    }

    { //::IntersectRayWithAAPlane
    
        typedef float ( *IntersectRayWithAAPlane_function_type )( ::Vector const &,::Vector const &,int,float,float );
        
        bp::def( 
            "IntersectRayWithAAPlane"
            , IntersectRayWithAAPlane_function_type( &::IntersectRayWithAAPlane )
            , ( bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("nAxis"), bp::arg("flSign"), bp::arg("flDist") ) );
    
    }

    { //::IntersectRayWithBox
    
        typedef bool ( *IntersectRayWithBox_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::BoxTraceInfo_t * );
        
        bp::def( 
            "IntersectRayWithBox"
            , IntersectRayWithBox_function_type( &::IntersectRayWithBox )
            , ( bp::arg("vecRayStart"), bp::arg("vecRayDelta"), bp::arg("boxMins"), bp::arg("boxMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithBox
    
        typedef bool ( *IntersectRayWithBox_function_type )( ::Ray_t const &,::Vector const &,::Vector const &,float,::CBaseTrace *,float * );
        
        bp::def( 
            "IntersectRayWithBox"
            , IntersectRayWithBox_function_type( &::IntersectRayWithBox )
            , ( bp::arg("ray"), bp::arg("boxMins"), bp::arg("boxMaxs"), bp::arg("epsilon"), bp::arg("pTrace"), bp::arg("pFractionLeftSolid")=bp::object() ) );
    
    }

    { //::IntersectRayWithBox
    
        typedef bool ( *IntersectRayWithBox_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::CBaseTrace *,float * );
        
        bp::def( 
            "IntersectRayWithBox"
            , IntersectRayWithBox_function_type( &::IntersectRayWithBox )
            , ( bp::arg("rayStart"), bp::arg("rayDelta"), bp::arg("boxMins"), bp::arg("boxMaxs"), bp::arg("epsilon"), bp::arg("pTrace"), bp::arg("pFractionLeftSolid")=bp::object() ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Vector const &,::Vector const &,::matrix3x4_t const &,::Vector const &,::Vector const &,float,::BoxTraceInfo_t * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("vecRayStart"), bp::arg("vecRayDelta"), bp::arg("matOBBToWorld"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Ray_t const &,::matrix3x4_t const &,::Vector const &,::Vector const &,float,::CBaseTrace * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("ray"), bp::arg("matOBBToWorld"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Ray_t const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,float,::CBaseTrace * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("ray"), bp::arg("vecBoxOrigin"), bp::arg("angBoxRotation"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Vector const &,::Vector const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,float,::CBaseTrace * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("vecRayOrigin"), bp::arg("vecRayDelta"), bp::arg("vecBoxOrigin"), bp::arg("angBoxRotation"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithOBB
    
        typedef bool ( *IntersectRayWithOBB_function_type )( ::Vector const &,::Vector const &,::matrix3x4_t const &,::Vector const &,::Vector const &,float,::CBaseTrace * );
        
        bp::def( 
            "IntersectRayWithOBB"
            , IntersectRayWithOBB_function_type( &::IntersectRayWithOBB )
            , ( bp::arg("vecRayStart"), bp::arg("vecRayDelta"), bp::arg("matOBBToWorld"), bp::arg("vecOBBMins"), bp::arg("vecOBBMaxs"), bp::arg("flTolerance"), bp::arg("pTrace") ) );
    
    }

    { //::IntersectRayWithPlane
    
        typedef float ( *IntersectRayWithPlane_function_type )( ::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IntersectRayWithPlane"
            , IntersectRayWithPlane_function_type( &::IntersectRayWithPlane )
            , ( bp::arg("org"), bp::arg("dir"), bp::arg("normal"), bp::arg("dist") ) );
    
    }

    { //::IntersectRayWithPlane
    
        typedef float ( *IntersectRayWithPlane_function_type )( ::Vector const &,::Vector const &,::cplane_t const & );
        
        bp::def( 
            "IntersectRayWithPlane"
            , IntersectRayWithPlane_function_type( &::IntersectRayWithPlane )
            , ( bp::arg("org"), bp::arg("dir"), bp::arg("plane") ) );
    
    }

    { //::IntersectRayWithPlane
    
        typedef float ( *IntersectRayWithPlane_function_type )( ::Ray_t const &,::cplane_t const & );
        
        bp::def( 
            "IntersectRayWithPlane"
            , IntersectRayWithPlane_function_type( &::IntersectRayWithPlane )
            , ( bp::arg("ray"), bp::arg("plane") ) );
    
    }

    { //::IntersectRayWithRay
    
        typedef bool ( *IntersectRayWithRay_function_type )( ::Ray_t const &,::Ray_t const &,float &,float & );
        
        bp::def( 
            "IntersectRayWithRay"
            , IntersectRayWithRay_function_type( &::IntersectRayWithRay )
            , ( bp::arg("ray0"), bp::arg("ray1"), bp::arg("t"), bp::arg("s") ) );
    
    }

    { //::IntersectRayWithSphere
    
        typedef bool ( *IntersectRayWithSphere_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float *,float * );
        
        bp::def( 
            "IntersectRayWithSphere"
            , IntersectRayWithSphere_function_type( &::IntersectRayWithSphere )
            , ( bp::arg("vecRayOrigin"), bp::arg("vecRayDelta"), bp::arg("vecSphereCenter"), bp::arg("flRadius"), bp::arg("pT1"), bp::arg("pT2") ) );
    
    }

    { //::IntersectTriangleWithPlaneBarycentric
    
        typedef int ( *IntersectTriangleWithPlaneBarycentric_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector4D const &,::Vector2D * );
        
        bp::def( 
            "IntersectTriangleWithPlaneBarycentric"
            , IntersectTriangleWithPlaneBarycentric_function_type( &::IntersectTriangleWithPlaneBarycentric )
            , ( bp::arg("org"), bp::arg("edgeU"), bp::arg("edgeV"), bp::arg("plane"), bp::arg("pIntersection") ) );
    
    }

    { //::IsBoxIntersectingBox
    
        typedef bool ( *IsBoxIntersectingBox_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "IsBoxIntersectingBox"
            , IsBoxIntersectingBox_function_type( &::IsBoxIntersectingBox )
            , ( bp::arg("boxMin1"), bp::arg("boxMax1"), bp::arg("boxMin2"), bp::arg("boxMax2") ) );
    
    }

    { //::IsBoxIntersectingBoxExtents
    
        typedef bool ( *IsBoxIntersectingBoxExtents_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "IsBoxIntersectingBoxExtents"
            , IsBoxIntersectingBoxExtents_function_type( &::IsBoxIntersectingBoxExtents )
            , ( bp::arg("boxCenter1"), bp::arg("boxHalfDiagonal1"), bp::arg("boxCenter2"), bp::arg("boxHalfDiagonal2") ) );
    
    }

    { //::IsBoxIntersectingRay
    
        typedef bool ( *IsBoxIntersectingRay_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsBoxIntersectingRay"
            , IsBoxIntersectingRay_function_type( &::IsBoxIntersectingRay )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("origin"), bp::arg("delta"), bp::arg("invDelta"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsBoxIntersectingRay
    
        typedef bool ( *IsBoxIntersectingRay_function_type )( ::Vector const &,::Vector const &,::Ray_t const &,float );
        
        bp::def( 
            "IsBoxIntersectingRay"
            , IsBoxIntersectingRay_function_type( &::IsBoxIntersectingRay )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("ray"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsBoxIntersectingRay
    
        typedef bool ( *IsBoxIntersectingRay_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsBoxIntersectingRay"
            , IsBoxIntersectingRay_function_type( &::IsBoxIntersectingRay )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("origin"), bp::arg("delta"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsBoxIntersectingSphere
    
        typedef bool ( *IsBoxIntersectingSphere_function_type )( ::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsBoxIntersectingSphere"
            , IsBoxIntersectingSphere_function_type( &::IsBoxIntersectingSphere )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("center"), bp::arg("radius") ) );
    
    }

    { //::IsBoxIntersectingSphereExtents
    
        typedef bool ( *IsBoxIntersectingSphereExtents_function_type )( ::Vector const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsBoxIntersectingSphereExtents"
            , IsBoxIntersectingSphereExtents_function_type( &::IsBoxIntersectingSphereExtents )
            , ( bp::arg("boxCenter"), bp::arg("boxHalfDiag"), bp::arg("center"), bp::arg("radius") ) );
    
    }

    { //::IsBoxIntersectingTriangle
    
        typedef bool ( *IsBoxIntersectingTriangle_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector const &,::cplane_t const &,float );
        
        bp::def( 
            "IsBoxIntersectingTriangle"
            , IsBoxIntersectingTriangle_function_type( &::IsBoxIntersectingTriangle )
            , ( bp::arg("vecBoxCenter"), bp::arg("vecBoxExtents"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("plane"), bp::arg("flTolerance") ) );
    
    }

    { //::IsCircleIntersectingRectangle
    
        typedef bool ( *IsCircleIntersectingRectangle_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D const &,float );
        
        bp::def( 
            "IsCircleIntersectingRectangle"
            , IsCircleIntersectingRectangle_function_type( &::IsCircleIntersectingRectangle )
            , ( bp::arg("boxMin"), bp::arg("boxMax"), bp::arg("center"), bp::arg("radius") ) );
    
    }

    { //::IsOBBIntersectingOBB
    
        typedef bool ( *IsOBBIntersectingOBB_function_type )( ::Vector const &,::QAngle const &,::Vector const &,::Vector const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "IsOBBIntersectingOBB"
            , IsOBBIntersectingOBB_function_type( &::IsOBBIntersectingOBB )
            , ( bp::arg("vecOrigin1"), bp::arg("vecAngles1"), bp::arg("boxMin1"), bp::arg("boxMax1"), bp::arg("vecOrigin2"), bp::arg("vecAngles2"), bp::arg("boxMin2"), bp::arg("boxMax2"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsPointInBox
    
        typedef bool ( *IsPointInBox_function_type )( ::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "IsPointInBox"
            , IsPointInBox_function_type( &::IsPointInBox )
            , ( bp::arg("pt"), bp::arg("boxMin"), bp::arg("boxMax") ) );
    
    }

    { //::IsPointInCone
    
        typedef bool ( *IsPointInCone_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float );
        
        bp::def( 
            "IsPointInCone"
            , IsPointInCone_function_type( &::IsPointInCone )
            , ( bp::arg("pt"), bp::arg("origin"), bp::arg("axis"), bp::arg("cosAngle"), bp::arg("length") ) );
    
    }

    { //::IsRayIntersectingOBB
    
        typedef bool ( *IsRayIntersectingOBB_function_type )( ::Ray_t const &,::Vector const &,::QAngle const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "IsRayIntersectingOBB"
            , IsRayIntersectingOBB_function_type( &::IsRayIntersectingOBB )
            , ( bp::arg("ray"), bp::arg("org"), bp::arg("angles"), bp::arg("mins"), bp::arg("maxs") ) );
    
    }

    { //::IsRayIntersectingSphere
    
        typedef bool ( *IsRayIntersectingSphere_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,float );
        
        bp::def( 
            "IsRayIntersectingSphere"
            , IsRayIntersectingSphere_function_type( &::IsRayIntersectingSphere )
            , ( bp::arg("vecRayOrigin"), bp::arg("vecRayDelta"), bp::arg("vecSphereCenter"), bp::arg("flRadius"), bp::arg("flTolerance")=0.0f ) );
    
    }

    { //::IsSphereIntersectingCone
    
        typedef bool ( *IsSphereIntersectingCone_function_type )( ::Vector const &,float,::Vector const &,::Vector const &,float,float );
        
        bp::def( 
            "IsSphereIntersectingCone"
            , IsSphereIntersectingCone_function_type( &::IsSphereIntersectingCone )
            , ( bp::arg("sphereCenter"), bp::arg("sphereRadius"), bp::arg("coneOrigin"), bp::arg("coneNormal"), bp::arg("coneSine"), bp::arg("coneCosine") ) );
    
    }

    { //::IsSphereIntersectingSphere
    
        typedef bool ( *IsSphereIntersectingSphere_function_type )( ::Vector const &,float,::Vector const &,float );
        
        bp::def( 
            "IsSphereIntersectingSphere"
            , IsSphereIntersectingSphere_function_type( &::IsSphereIntersectingSphere )
            , ( bp::arg("center1"), bp::arg("radius1"), bp::arg("center2"), bp::arg("radius2") ) );
    
    }

    { //::OBBHasFullyContainedIntersectionWithQuad
    
        typedef bool ( *OBBHasFullyContainedIntersectionWithQuad_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector const &,::Vector const &,float,::Vector const &,float );
        
        bp::def( 
            "OBBHasFullyContainedIntersectionWithQuad"
            , OBBHasFullyContainedIntersectionWithQuad_function_type( &::OBBHasFullyContainedIntersectionWithQuad )
            , ( bp::arg("vOBBExtent1_Scaled"), bp::arg("vOBBExtent2_Scaled"), bp::arg("vOBBExtent3_Scaled"), bp::arg("ptOBBCenter"), bp::arg("vQuadNormal"), bp::arg("fQuadPlaneDist"), bp::arg("ptQuadCenter"), bp::arg("vQuadExtent1_Normalized"), bp::arg("fQuadExtent1Length"), bp::arg("vQuadExtent2_Normalized"), bp::arg("fQuadExtent2Length") ) );
    
    }

    { //::PassServerEntityFilter
    
        typedef bool ( *PassServerEntityFilter_function_type )( ::IHandleEntity const *,::IHandleEntity const * );
        
        bp::def( 
            "PassServerEntityFilter"
            , PassServerEntityFilter_function_type( &::PassServerEntityFilter )
            , ( bp::arg("pTouch"), bp::arg("pPass") ) );
    
    }

    { //::PointInQuadFromBarycentric
    
        typedef void ( *PointInQuadFromBarycentric_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector2D const &,::Vector & );
        
        bp::def( 
            "PointInQuadFromBarycentric"
            , PointInQuadFromBarycentric_function_type( &::PointInQuadFromBarycentric )
            , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("uv"), bp::arg("point") ) );
    
    }

    { //::PointInQuadToBarycentric
    
        typedef ::QuadBarycentricRetval_t ( *PointInQuadToBarycentric_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector2D & );
        
        bp::def( 
            "PointInQuadToBarycentric"
            , PointInQuadToBarycentric_function_type( &::PointInQuadToBarycentric )
            , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("point"), bp::arg("uv") ) );
    
    }

    { //::PyIntersectRayWithTriangle
    
        typedef float ( *IntersectRayWithTriangle_function_type )( ::PyRay_t const &,::Vector const &,::Vector const &,::Vector const &,bool );
        
        bp::def( 
            "IntersectRayWithTriangle"
            , IntersectRayWithTriangle_function_type( &::PyIntersectRayWithTriangle )
            , ( bp::arg("ray"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("oneSided") ) );
    
    }

    { //::RayHasFullyContainedIntersectionWithQuad
    
        typedef bool ( *RayHasFullyContainedIntersectionWithQuad_function_type )( ::Ray_t const &,::Vector const &,float,::Vector const &,::Vector const &,float,::Vector const &,float );
        
        bp::def( 
            "RayHasFullyContainedIntersectionWithQuad"
            , RayHasFullyContainedIntersectionWithQuad_function_type( &::RayHasFullyContainedIntersectionWithQuad )
            , ( bp::arg("ray"), bp::arg("vQuadNormal"), bp::arg("fQuadPlaneDist"), bp::arg("ptQuadCenter"), bp::arg("vQuadExtent1_Normalized"), bp::arg("fQuadExtent1Length"), bp::arg("vQuadExtent2_Normalized"), bp::arg("fQuadExtent2Length") ) );
    
    }

    { //::StandardFilterRules
    
        typedef bool ( *StandardFilterRules_function_type )( ::IHandleEntity *,int );
        
        bp::def( 
            "StandardFilterRules"
            , StandardFilterRules_function_type( &::StandardFilterRules )
            , ( bp::arg("pHandleEntity"), bp::arg("fContentsMask") ) );
    
    }

    { //::TexCoordInQuadFromBarycentric
    
        typedef void ( *TexCoordInQuadFromBarycentric_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D const &,::Vector2D const &,::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "TexCoordInQuadFromBarycentric"
            , TexCoordInQuadFromBarycentric_function_type( &::TexCoordInQuadFromBarycentric )
            , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("uv"), bp::arg("texCoord") ) );
    
    }

    { //::UTIL_AddDebugLine
    
        typedef void ( *UTIL_AddDebugLine_function_type )( ::Vector const &,::Vector const &,bool,bool );
        
        bp::def( 
            "UTIL_AddDebugLine"
            , UTIL_AddDebugLine_function_type( &::UTIL_AddDebugLine )
            , ( bp::arg("startPos"), bp::arg("endPos"), bp::arg("noDepthTest"), bp::arg("testLOS") ) );
    
    }

    { //::UTIL_AngleDiff
    
        typedef float ( *UTIL_AngleDiff_function_type )( float,float );
        
        bp::def( 
            "UTIL_AngleDiff"
            , UTIL_AngleDiff_function_type( &::UTIL_AngleDiff )
            , ( bp::arg("destAngle"), bp::arg("srcAngle") ) );
    
    }

    { //::UTIL_AngleDistance
    
        typedef float ( *UTIL_AngleDistance_function_type )( float,float );
        
        bp::def( 
            "UTIL_AngleDistance"
            , UTIL_AngleDistance_function_type( &::UTIL_AngleDistance )
            , ( bp::arg("next"), bp::arg("cur") ) );
    
    }

    { //::UTIL_AngleMod
    
        typedef float ( *UTIL_AngleMod_function_type )( float );
        
        bp::def( 
            "UTIL_AngleMod"
            , UTIL_AngleMod_function_type( &::UTIL_AngleMod )
            , ( bp::arg("a") ) );
    
    }

    { //::UTIL_Approach
    
        typedef float ( *UTIL_Approach_function_type )( float,float,float );
        
        bp::def( 
            "UTIL_Approach"
            , UTIL_Approach_function_type( &::UTIL_Approach )
            , ( bp::arg("target"), bp::arg("value"), bp::arg("speed") ) );
    
    }

    { //::UTIL_ApproachAngle
    
        typedef float ( *UTIL_ApproachAngle_function_type )( float,float,float );
        
        bp::def( 
            "UTIL_ApproachAngle"
            , UTIL_ApproachAngle_function_type( &::UTIL_ApproachAngle )
            , ( bp::arg("target"), bp::arg("value"), bp::arg("speed") ) );
    
    }

    { //::UTIL_AxisStringToPointDir
    
        typedef void ( *UTIL_AxisStringToPointDir_function_type )( ::Vector &,::Vector &,char const * );
        
        bp::def( 
            "UTIL_AxisStringToPointDir"
            , UTIL_AxisStringToPointDir_function_type( &::UTIL_AxisStringToPointDir )
            , ( bp::arg("start"), bp::arg("dir"), bp::arg("pString") ) );
    
    }

    { //::UTIL_AxisStringToPointPoint
    
        typedef void ( *UTIL_AxisStringToPointPoint_function_type )( ::Vector &,::Vector &,char const * );
        
        bp::def( 
            "UTIL_AxisStringToPointPoint"
            , UTIL_AxisStringToPointPoint_function_type( &::UTIL_AxisStringToPointPoint )
            , ( bp::arg("start"), bp::arg("end"), bp::arg("pString") ) );
    
    }

    { //::UTIL_AxisStringToUnitDir
    
        typedef void ( *UTIL_AxisStringToUnitDir_function_type )( ::Vector &,char const * );
        
        bp::def( 
            "UTIL_AxisStringToUnitDir"
            , UTIL_AxisStringToUnitDir_function_type( &::UTIL_AxisStringToUnitDir )
            , ( bp::arg("dir"), bp::arg("pString") ) );
    
    }

    { //::UTIL_BloodDecalTrace
    
        typedef void ( *UTIL_BloodDecalTrace_function_type )( ::trace_t *,int );
        
        bp::def( 
            "UTIL_BloodDecalTrace"
            , UTIL_BloodDecalTrace_function_type( &::UTIL_BloodDecalTrace )
            , ( bp::arg("pTrace"), bp::arg("bloodColor") ) );
    
    }

    { //::UTIL_BloodDrips
    
        typedef void ( *UTIL_BloodDrips_function_type )( ::Vector const &,::Vector const &,int,int );
        
        bp::def( 
            "UTIL_BloodDrips"
            , UTIL_BloodDrips_function_type( &::UTIL_BloodDrips )
            , ( bp::arg("origin"), bp::arg("direction"), bp::arg("color"), bp::arg("amount") ) );
    
    }

    { //::UTIL_BloodImpact
    
        typedef void ( *UTIL_BloodImpact_function_type )( ::Vector const &,::Vector const &,int,int );
        
        bp::def( 
            "UTIL_BloodImpact"
            , UTIL_BloodImpact_function_type( &::UTIL_BloodImpact )
            , ( bp::arg("pos"), bp::arg("dir"), bp::arg("color"), bp::arg("amount") ) );
    
    }

    { //::UTIL_BloodSpray
    
        typedef void ( *UTIL_BloodSpray_function_type )( ::Vector const &,::Vector const &,int,int,int );
        
        bp::def( 
            "UTIL_BloodSpray"
            , UTIL_BloodSpray_function_type( &::UTIL_BloodSpray )
            , ( bp::arg("pos"), bp::arg("dir"), bp::arg("color"), bp::arg("amount"), bp::arg("flags") ) );
    
    }

    { //::UTIL_BloodStream
    
        typedef void ( *UTIL_BloodStream_function_type )( ::Vector const &,::Vector const &,int,int );
        
        bp::def( 
            "UTIL_BloodStream"
            , UTIL_BloodStream_function_type( &::UTIL_BloodStream )
            , ( bp::arg("origin"), bp::arg("direction"), bp::arg("color"), bp::arg("amount") ) );
    
    }

    { //::UTIL_BoundToWorldSize
    
        typedef void ( *UTIL_BoundToWorldSize_function_type )( ::Vector * );
        
        bp::def( 
            "UTIL_BoundToWorldSize"
            , UTIL_BoundToWorldSize_function_type( &::UTIL_BoundToWorldSize )
            , ( bp::arg("pVecPos") ) );
    
    }

    { //::UTIL_BubbleTrail
    
        typedef void ( *UTIL_BubbleTrail_function_type )( ::Vector const &,::Vector const &,int );
        
        bp::def( 
            "UTIL_BubbleTrail"
            , UTIL_BubbleTrail_function_type( &::UTIL_BubbleTrail )
            , ( bp::arg("from"), bp::arg("to"), bp::arg("count") ) );
    
    }

    { //::UTIL_Bubbles
    
        typedef void ( *UTIL_Bubbles_function_type )( ::Vector const &,::Vector const &,int );
        
        bp::def( 
            "UTIL_Bubbles"
            , UTIL_Bubbles_function_type( &::UTIL_Bubbles )
            , ( bp::arg("mins"), bp::arg("maxs"), bp::arg("count") ) );
    
    }

    { //::UTIL_CenterPrintAll
    
        typedef void ( *UTIL_CenterPrintAll_function_type )( char const *,char const *,char const *,char const *,char const * );
        
        bp::def( 
            "UTIL_CenterPrintAll"
            , UTIL_CenterPrintAll_function_type( &::UTIL_CenterPrintAll )
            , ( bp::arg("msg_name"), bp::arg("param1")=bp::object(), bp::arg("param2")=bp::object(), bp::arg("param3")=bp::object(), bp::arg("param4")=bp::object() ) );
    
    }

    { //::UTIL_CheckBottom
    
        typedef bool ( *UTIL_CheckBottom_function_type )( ::CBaseEntity *,::ITraceFilter *,float );
        
        bp::def( 
            "UTIL_CheckBottom"
            , UTIL_CheckBottom_function_type( &::UTIL_CheckBottom )
            , ( bp::arg("pEntity"), bp::arg("pTraceFilter"), bp::arg("flStepSize") ) );
    
    }

    { //::UTIL_ClearTrace
    
        typedef void ( *UTIL_ClearTrace_function_type )( ::trace_t & );
        
        bp::def( 
            "UTIL_ClearTrace"
            , UTIL_ClearTrace_function_type( &::UTIL_ClearTrace )
            , ( bp::arg("trace") ) );
    
    }

    { //::UTIL_ClientPVSIsExpanded
    
        typedef bool ( *UTIL_ClientPVSIsExpanded_function_type )(  );
        
        bp::def( 
            "UTIL_ClientPVSIsExpanded"
            , UTIL_ClientPVSIsExpanded_function_type( &::UTIL_ClientPVSIsExpanded ) );
    
    }

    { //::UTIL_ClientPrintAll
    
        typedef void ( *UTIL_ClientPrintAll_function_type )( int,char const *,char const *,char const *,char const *,char const * );
        
        bp::def( 
            "UTIL_ClientPrintAll"
            , UTIL_ClientPrintAll_function_type( &::UTIL_ClientPrintAll )
            , ( bp::arg("msg_dest"), bp::arg("msg_name"), bp::arg("param1")=bp::object(), bp::arg("param2")=bp::object(), bp::arg("param3")=bp::object(), bp::arg("param4")=bp::object() ) );
    
    }

    { //::UTIL_ClientPrintFilter
    
        typedef void ( *UTIL_ClientPrintFilter_function_type )( ::IRecipientFilter &,int,char const *,char const *,char const *,char const *,char const * );
        
        bp::def( 
            "UTIL_ClientPrintFilter"
            , UTIL_ClientPrintFilter_function_type( &::UTIL_ClientPrintFilter )
            , ( bp::arg("filter"), bp::arg("msg_dest"), bp::arg("msg_name"), bp::arg("param1")=bp::object(), bp::arg("param2")=bp::object(), bp::arg("param3")=bp::object(), bp::arg("param4")=bp::object() ) );
    
    }

    { //::UTIL_ClipPunchAngleOffset
    
        typedef void ( *UTIL_ClipPunchAngleOffset_function_type )( ::QAngle &,::QAngle const &,::QAngle const & );
        
        bp::def( 
            "UTIL_ClipPunchAngleOffset"
            , UTIL_ClipPunchAngleOffset_function_type( &::UTIL_ClipPunchAngleOffset )
            , ( bp::arg("in"), bp::arg("punch"), bp::arg("clip") ) );
    
    }

    { //::UTIL_ClipTraceToPlayers
    
        typedef void ( *UTIL_ClipTraceToPlayers_function_type )( ::Vector const &,::Vector const &,unsigned int,::ITraceFilter *,::trace_t * );
        
        bp::def( 
            "UTIL_ClipTraceToPlayers"
            , UTIL_ClipTraceToPlayers_function_type( &::UTIL_ClipTraceToPlayers )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("filter"), bp::arg("tr") ) );
    
    }

    { //::UTIL_DecalTrace
    
        typedef void ( *UTIL_DecalTrace_function_type )( ::trace_t *,char const * );
        
        bp::def( 
            "UTIL_DecalTrace"
            , UTIL_DecalTrace_function_type( &::UTIL_DecalTrace )
            , ( bp::arg("pTrace"), bp::arg("decalName") ) );
    
    }

    { //::UTIL_DecodeICE
    
        typedef void ( *UTIL_DecodeICE_function_type )( unsigned char *,int,unsigned char const * );
        
        bp::def( 
            "UTIL_DecodeICE"
            , UTIL_DecodeICE_function_type( &::UTIL_DecodeICE )
            , ( bp::arg("buffer"), bp::arg("size"), bp::arg("key") ) );
    
    }

    { //::UTIL_DisableRemoveImmediate
    
        typedef void ( *UTIL_DisableRemoveImmediate_function_type )(  );
        
        bp::def( 
            "UTIL_DisableRemoveImmediate"
            , UTIL_DisableRemoveImmediate_function_type( &::UTIL_DisableRemoveImmediate ) );
    
    }

    { //::UTIL_DistApprox
    
        typedef float ( *UTIL_DistApprox_function_type )( ::Vector const &,::Vector const & );
        
        bp::def( 
            "UTIL_DistApprox"
            , UTIL_DistApprox_function_type( &::UTIL_DistApprox )
            , ( bp::arg("vec1"), bp::arg("vec2") ) );
    
    }

    { //::UTIL_DistApprox2D
    
        typedef float ( *UTIL_DistApprox2D_function_type )( ::Vector const &,::Vector const & );
        
        bp::def( 
            "UTIL_DistApprox2D"
            , UTIL_DistApprox2D_function_type( &::UTIL_DistApprox2D )
            , ( bp::arg("vec1"), bp::arg("vec2") ) );
    
    }

    { //::UTIL_DotPoints
    
        typedef float ( *UTIL_DotPoints_function_type )( ::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "UTIL_DotPoints"
            , UTIL_DotPoints_function_type( &::UTIL_DotPoints )
            , ( bp::arg("vecSrc"), bp::arg("vecCheck"), bp::arg("vecDir") ) );
    
    }

    { //::UTIL_DrawOverlayLines
    
        typedef void ( *UTIL_DrawOverlayLines_function_type )(  );
        
        bp::def( 
            "UTIL_DrawOverlayLines"
            , UTIL_DrawOverlayLines_function_type( &::UTIL_DrawOverlayLines ) );
    
    }

    { //::UTIL_DrawPositioningOverlay
    
        typedef void ( *UTIL_DrawPositioningOverlay_function_type )( float );
        
        bp::def( 
            "UTIL_DrawPositioningOverlay"
            , UTIL_DrawPositioningOverlay_function_type( &::UTIL_DrawPositioningOverlay )
            , ( bp::arg("flCrossDistance") ) );
    
    }

    { //::UTIL_DropToFloor
    
        typedef int ( *UTIL_DropToFloor_function_type )( ::CBaseEntity *,unsigned int,::CBaseEntity * );
        
        bp::def( 
            "UTIL_DropToFloor"
            , UTIL_DropToFloor_function_type( &::UTIL_DropToFloor )
            , ( bp::arg("pEntity"), bp::arg("mask"), bp::arg("pIgnore")=bp::object() ) );
    
    }

    { //::UTIL_EmitAmbientSound
    
        typedef void ( *UTIL_EmitAmbientSound_function_type )( int,::Vector const &,char const *,float,::soundlevel_t,int,int,float,float * );
        
        bp::def( 
            "UTIL_EmitAmbientSound"
            , UTIL_EmitAmbientSound_function_type( &::UTIL_EmitAmbientSound )
            , ( bp::arg("entindex"), bp::arg("vecOrigin"), bp::arg("samp"), bp::arg("vol"), bp::arg("soundlevel"), bp::arg("fFlags"), bp::arg("pitch"), bp::arg("soundtime")=0.0f, bp::arg("duration")=bp::object() ) );
    
    }

    { //::UTIL_EmitGroupIDSuit
    
        typedef int ( *UTIL_EmitGroupIDSuit_function_type )( ::edict_t *,int );
        
        bp::def( 
            "UTIL_EmitGroupIDSuit"
            , UTIL_EmitGroupIDSuit_function_type( &::UTIL_EmitGroupIDSuit )
            , ( bp::arg("entity"), bp::arg("isentenceg") ) );
    
    }

    { //::UTIL_EmitGroupnameSuit
    
        typedef int ( *UTIL_EmitGroupnameSuit_function_type )( ::edict_t *,char const * );
        
        bp::def( 
            "UTIL_EmitGroupnameSuit"
            , UTIL_EmitGroupnameSuit_function_type( &::UTIL_EmitGroupnameSuit )
            , ( bp::arg("entity"), bp::arg("groupname") ) );
    
    }

    { //::UTIL_EmitSoundSuit
    
        typedef void ( *UTIL_EmitSoundSuit_function_type )( ::edict_t *,char const * );
        
        bp::def( 
            "UTIL_EmitSoundSuit"
            , UTIL_EmitSoundSuit_function_type( &::UTIL_EmitSoundSuit )
            , ( bp::arg("entity"), bp::arg("sample") ) );
    
    }

    { //::UTIL_EnableRemoveImmediate
    
        typedef void ( *UTIL_EnableRemoveImmediate_function_type )(  );
        
        bp::def( 
            "UTIL_EnableRemoveImmediate"
            , UTIL_EnableRemoveImmediate_function_type( &::UTIL_EnableRemoveImmediate ) );
    
    }

    { //::UTIL_EntitiesInPVS
    
        typedef ::CBaseEntity * ( *UTIL_EntitiesInPVS_function_type )( ::CBaseEntity *,::CBaseEntity * );
        
        bp::def( 
            "UTIL_EntitiesInPVS"
            , UTIL_EntitiesInPVS_function_type( &::UTIL_EntitiesInPVS )
            , ( bp::arg("pPVSEntity"), bp::arg("pStartingEntity") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_EntityByIndex
    
        typedef ::CBaseEntity * ( *UTIL_EntityByIndex_function_type )( int );
        
        bp::def( 
            "UTIL_EntityByIndex"
            , UTIL_EntityByIndex_function_type( &::UTIL_EntityByIndex )
            , ( bp::arg("entityIndex") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_EntityHasMatchingRootParent
    
        typedef bool ( *UTIL_EntityHasMatchingRootParent_function_type )( ::CBaseEntity *,::CBaseEntity * );
        
        bp::def( 
            "UTIL_EntityHasMatchingRootParent"
            , UTIL_EntityHasMatchingRootParent_function_type( &::UTIL_EntityHasMatchingRootParent )
            , ( bp::arg("pRootParent"), bp::arg("pEntity") ) );
    
    }

    { //::UTIL_EntityInSolid
    
        typedef int ( *UTIL_EntityInSolid_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "UTIL_EntityInSolid"
            , UTIL_EntityInSolid_function_type( &::UTIL_EntityInSolid )
            , ( bp::arg("ent") ) );
    
    }

    { //::UTIL_FindClientInPVS
    
        typedef ::CBaseEntity * ( *UTIL_FindClientInPVS_function_type )( ::Vector const &,::Vector const & );
        
        bp::def( 
            "UTIL_FindClientInPVS"
            , UTIL_FindClientInPVS_function_type( &::UTIL_FindClientInPVS )
            , ( bp::arg("vecBoxMins"), bp::arg("vecBoxMaxs") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_FindClientInPVS
    
        typedef ::edict_t * ( *UTIL_FindClientInPVS_function_type )( ::edict_t * );
        
        bp::def( 
            "UTIL_FindClientInPVS"
            , UTIL_FindClientInPVS_function_type( &::UTIL_FindClientInPVS )
            , ( bp::arg("pEdict") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_FindClientInVisibilityPVS
    
        typedef ::edict_t * ( *UTIL_FindClientInVisibilityPVS_function_type )( ::edict_t * );
        
        bp::def( 
            "UTIL_FindClientInVisibilityPVS"
            , UTIL_FindClientInVisibilityPVS_function_type( &::UTIL_FindClientInVisibilityPVS )
            , ( bp::arg("pEdict") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_FindWaterSurface
    
        typedef float ( *UTIL_FindWaterSurface_function_type )( ::Vector const &,float,float );
        
        bp::def( 
            "UTIL_FindWaterSurface"
            , UTIL_FindWaterSurface_function_type( &::UTIL_FindWaterSurface )
            , ( bp::arg("position"), bp::arg("minz"), bp::arg("maxz") ) );
    
    }

    { //::UTIL_GetActiveHolidayString
    
        typedef char const * ( *UTIL_GetActiveHolidayString_function_type )(  );
        
        bp::def( 
            "UTIL_GetActiveHolidayString"
            , UTIL_GetActiveHolidayString_function_type( &::UTIL_GetActiveHolidayString ) );
    
    }

    { //::UTIL_GetCommandClient
    
        typedef ::CBasePlayer * ( *UTIL_GetCommandClient_function_type )(  );
        
        bp::def( 
            "UTIL_GetCommandClient"
            , UTIL_GetCommandClient_function_type( &::UTIL_GetCommandClient )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_GetCommandClientIndex
    
        typedef int ( *UTIL_GetCommandClientIndex_function_type )(  );
        
        bp::def( 
            "UTIL_GetCommandClientIndex"
            , UTIL_GetCommandClientIndex_function_type( &::UTIL_GetCommandClientIndex ) );
    
    }

    { //::UTIL_GetHolidayForString
    
        typedef int ( *UTIL_GetHolidayForString_function_type )( char const * );
        
        bp::def( 
            "UTIL_GetHolidayForString"
            , UTIL_GetHolidayForString_function_type( &::UTIL_GetHolidayForString )
            , ( bp::arg("pszHolidayName") ) );
    
    }

    { //::UTIL_GetListenServerHost
    
        typedef ::CBasePlayer * ( *UTIL_GetListenServerHost_function_type )(  );
        
        bp::def( 
            "UTIL_GetListenServerHost"
            , UTIL_GetListenServerHost_function_type( &::UTIL_GetListenServerHost )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_GetLocalPlayer
    
        typedef ::CBasePlayer * ( *UTIL_GetLocalPlayer_function_type )(  );
        
        bp::def( 
            "UTIL_GetLocalPlayer"
            , UTIL_GetLocalPlayer_function_type( &::UTIL_GetLocalPlayer )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_GetModDir
    
        typedef bool ( *UTIL_GetModDir_function_type )( char *,unsigned int );
        
        bp::def( 
            "UTIL_GetModDir"
            , UTIL_GetModDir_function_type( &::UTIL_GetModDir )
            , ( bp::arg("lpszTextOut"), bp::arg("nSize") ) );
    
    }

    { //::UTIL_GetPlayerConnectionInfo
    
        typedef void ( *UTIL_GetPlayerConnectionInfo_function_type )( int,int &,int & );
        
        bp::def( 
            "UTIL_GetPlayerConnectionInfo"
            , UTIL_GetPlayerConnectionInfo_function_type( &::UTIL_GetPlayerConnectionInfo )
            , ( bp::arg("playerIndex"), bp::arg("ping"), bp::arg("packetloss") ) );
    
    }

    { //::UTIL_GetSimulationInterval
    
        typedef float ( *UTIL_GetSimulationInterval_function_type )(  );
        
        bp::def( 
            "UTIL_GetSimulationInterval"
            , UTIL_GetSimulationInterval_function_type( &::UTIL_GetSimulationInterval ) );
    
    }

    { //::UTIL_HudHintText
    
        typedef void ( *UTIL_HudHintText_function_type )( ::CBaseEntity *,char const * );
        
        bp::def( 
            "UTIL_HudHintText"
            , UTIL_HudHintText_function_type( &::UTIL_HudHintText )
            , ( bp::arg("pEntity"), bp::arg("pMessage") ) );
    
    }

    { //::UTIL_HudMessage
    
        typedef void ( *UTIL_HudMessage_function_type )( ::CBasePlayer *,::hudtextparms_t const &,char const * );
        
        bp::def( 
            "UTIL_HudMessage"
            , UTIL_HudMessage_function_type( &::UTIL_HudMessage )
            , ( bp::arg("pToPlayer"), bp::arg("textparms"), bp::arg("pMessage") ) );
    
    }

    { //::UTIL_HudMessageAll
    
        typedef void ( *UTIL_HudMessageAll_function_type )( ::hudtextparms_t const &,char const * );
        
        bp::def( 
            "UTIL_HudMessageAll"
            , UTIL_HudMessageAll_function_type( &::UTIL_HudMessageAll )
            , ( bp::arg("textparms"), bp::arg("pMessage") ) );
    
    }

    { //::UTIL_ImpactTrace
    
        typedef void ( *UTIL_ImpactTrace_function_type )( ::trace_t *,int,char const * );
        
        bp::def( 
            "UTIL_ImpactTrace"
            , UTIL_ImpactTrace_function_type( &::UTIL_ImpactTrace )
            , ( bp::arg("pTrace"), bp::arg("iDamageType"), bp::arg("pCustomImpactName")=bp::object() ) );
    
    }

    { //::UTIL_IsCommandIssuedByServerAdmin
    
        typedef bool ( *UTIL_IsCommandIssuedByServerAdmin_function_type )(  );
        
        bp::def( 
            "UTIL_IsCommandIssuedByServerAdmin"
            , UTIL_IsCommandIssuedByServerAdmin_function_type( &::UTIL_IsCommandIssuedByServerAdmin ) );
    
    }

    { //::UTIL_IsFacingWithinTolerance
    
        typedef bool ( *UTIL_IsFacingWithinTolerance_function_type )( ::CBaseEntity *,::CBaseEntity *,float,float * );
        
        bp::def( 
            "UTIL_IsFacingWithinTolerance"
            , UTIL_IsFacingWithinTolerance_function_type( &::UTIL_IsFacingWithinTolerance )
            , ( bp::arg("pViewer"), bp::arg("pTarget"), bp::arg("flDotTolerance"), bp::arg("pflDot")=bp::object() ) );
    
    }

    { //::UTIL_IsFacingWithinTolerance
    
        typedef bool ( *UTIL_IsFacingWithinTolerance_function_type )( ::CBaseEntity *,::Vector const &,float,float * );
        
        bp::def( 
            "UTIL_IsFacingWithinTolerance"
            , UTIL_IsFacingWithinTolerance_function_type( &::UTIL_IsFacingWithinTolerance )
            , ( bp::arg("pViewer"), bp::arg("vecPosition"), bp::arg("flDotTolerance"), bp::arg("pflDot")=bp::object() ) );
    
    }

    { //::UTIL_IsHolidayActive
    
        typedef bool ( *UTIL_IsHolidayActive_function_type )( int );
        
        bp::def( 
            "UTIL_IsHolidayActive"
            , UTIL_IsHolidayActive_function_type( &::UTIL_IsHolidayActive )
            , ( bp::arg("eHoliday") ) );
    
    }

    { //::UTIL_IsLowViolence
    
        typedef bool ( *UTIL_IsLowViolence_function_type )(  );
        
        bp::def( 
            "UTIL_IsLowViolence"
            , UTIL_IsLowViolence_function_type( &::UTIL_IsLowViolence ) );
    
    }

    { //::UTIL_IsMasterTriggered
    
        typedef bool ( *UTIL_IsMasterTriggered_function_type )( ::string_t,::CBaseEntity * );
        
        bp::def( 
            "UTIL_IsMasterTriggered"
            , UTIL_IsMasterTriggered_function_type( &::UTIL_IsMasterTriggered )
            , ( bp::arg("sMaster"), bp::arg("pActivator") ) );
    
    }

    { //::UTIL_IsSpaceEmpty
    
        typedef bool ( *UTIL_IsSpaceEmpty_function_type )( ::CBaseEntity *,::Vector const &,::Vector const & );
        
        bp::def( 
            "UTIL_IsSpaceEmpty"
            , UTIL_IsSpaceEmpty_function_type( &::UTIL_IsSpaceEmpty )
            , ( bp::arg("pMainEnt"), bp::arg("vMin"), bp::arg("vMax") ) );
    
    }

    { //::UTIL_IsValidEntity
    
        typedef bool ( *UTIL_IsValidEntity_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "UTIL_IsValidEntity"
            , UTIL_IsValidEntity_function_type( &::UTIL_IsValidEntity )
            , ( bp::arg("pEnt") ) );
    
    }

    { //::UTIL_ListDir
    
        typedef ::boost::python::list ( *UTIL_ListDir_function_type )( char const *,char const *,char const * );
        
        bp::def( 
            "UTIL_ListDir"
            , UTIL_ListDir_function_type( &::UTIL_ListDir )
            , ( bp::arg("path"), bp::arg("pathid")=bp::object(), bp::arg("wildcard")="*" ) );
    
    }

    { //::UTIL_LoadAndSpawnEntitiesFromScript
    
        typedef bool ( *UTIL_LoadAndSpawnEntitiesFromScript_function_type )( ::CUtlVector< CBaseEntity*, CUtlMemory< CBaseEntity*, int > > &,char const *,char const *,bool );
        
        bp::def( 
            "UTIL_LoadAndSpawnEntitiesFromScript"
            , UTIL_LoadAndSpawnEntitiesFromScript_function_type( &::UTIL_LoadAndSpawnEntitiesFromScript )
            , ( bp::arg("entities"), bp::arg("pScriptFile"), bp::arg("pBlock"), bp::arg("bActivate")=(bool)(true) ) );
    
    }

    { //::UTIL_MuzzleFlash
    
        typedef void ( *UTIL_MuzzleFlash_function_type )( ::Vector const &,::QAngle const &,int,int );
        
        bp::def( 
            "UTIL_MuzzleFlash"
            , UTIL_MuzzleFlash_function_type( &::UTIL_MuzzleFlash )
            , ( bp::arg("origin"), bp::arg("angles"), bp::arg("scale"), bp::arg("type") ) );
    
    }

    { //::UTIL_ParentToWorldSpace
    
        typedef void ( *UTIL_ParentToWorldSpace_function_type )( ::CBaseEntity *,::Vector &,::Quaternion & );
        
        bp::def( 
            "UTIL_ParentToWorldSpace"
            , UTIL_ParentToWorldSpace_function_type( &::UTIL_ParentToWorldSpace )
            , ( bp::arg("pEntity"), bp::arg("vecPosition"), bp::arg("quat") ) );
    
    }

    { //::UTIL_ParentToWorldSpace
    
        typedef void ( *UTIL_ParentToWorldSpace_function_type )( ::CBaseEntity *,::Vector &,::QAngle & );
        
        bp::def( 
            "UTIL_ParentToWorldSpace"
            , UTIL_ParentToWorldSpace_function_type( &::UTIL_ParentToWorldSpace )
            , ( bp::arg("pEntity"), bp::arg("vecPosition"), bp::arg("vecAngles") ) );
    
    }

    { //::UTIL_ParticleEffect
    
        typedef void ( *UTIL_ParticleEffect_function_type )( ::Vector const &,::Vector const &,::ULONG,::ULONG );
        
        bp::def( 
            "UTIL_ParticleEffect"
            , UTIL_ParticleEffect_function_type( &::UTIL_ParticleEffect )
            , ( bp::arg("vecOrigin"), bp::arg("vecDirection"), bp::arg("ulColor"), bp::arg("ulCount") ) );
    
    }

    { //::UTIL_ParticleTracer
    
        typedef void ( *UTIL_ParticleTracer_function_type )( char const *,::Vector const &,::Vector const &,int,int,bool );
        
        bp::def( 
            "UTIL_ParticleTracer"
            , UTIL_ParticleTracer_function_type( &::UTIL_ParticleTracer )
            , ( bp::arg("pszTracerEffectName"), bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("iEntIndex")=(int)(0), bp::arg("iAttachment")=(int)(0), bp::arg("bWhiz")=(bool)(false) ) );
    
    }

    { //::UTIL_PlayerByIndex
    
        typedef ::CBasePlayer * ( *UTIL_PlayerByIndex_function_type )( int );
        
        bp::def( 
            "UTIL_PlayerByIndex"
            , UTIL_PlayerByIndex_function_type( &::UTIL_PlayerByIndex )
            , ( bp::arg("entindex") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_PlayerByName
    
        typedef ::CBasePlayer * ( *UTIL_PlayerByName_function_type )( char const * );
        
        bp::def( 
            "UTIL_PlayerByName"
            , UTIL_PlayerByName_function_type( &::UTIL_PlayerByName )
            , ( bp::arg("name") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_PlayerByUserId
    
        typedef ::CBasePlayer * ( *UTIL_PlayerByUserId_function_type )( int );
        
        bp::def( 
            "UTIL_PlayerByUserId"
            , UTIL_PlayerByUserId_function_type( &::UTIL_PlayerByUserId )
            , ( bp::arg("userID") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::UTIL_PlayerDecalTrace
    
        typedef void ( *UTIL_PlayerDecalTrace_function_type )( ::trace_t *,int );
        
        bp::def( 
            "UTIL_PlayerDecalTrace"
            , UTIL_PlayerDecalTrace_function_type( &::UTIL_PlayerDecalTrace )
            , ( bp::arg("pTrace"), bp::arg("playernum") ) );
    
    }

    { //::UTIL_PointAtEntity
    
        typedef bool ( *UTIL_PointAtEntity_function_type )( ::CBaseEntity *,::CBaseEntity * );
        
        bp::def( 
            "UTIL_PointAtEntity"
            , UTIL_PointAtEntity_function_type( &::UTIL_PointAtEntity )
            , ( bp::arg("pEnt"), bp::arg("pTarget") ) );
    
    }

    { //::UTIL_PointAtNamedEntity
    
        typedef void ( *UTIL_PointAtNamedEntity_function_type )( ::CBaseEntity *,::string_t );
        
        bp::def( 
            "UTIL_PointAtNamedEntity"
            , UTIL_PointAtNamedEntity_function_type( &::UTIL_PointAtNamedEntity )
            , ( bp::arg("pEnt"), bp::arg("strTarget") ) );
    
    }

    { //::UTIL_PointContents
    
        typedef int ( *UTIL_PointContents_function_type )( ::Vector const & );
        
        bp::def( 
            "UTIL_PointContents"
            , UTIL_PointContents_function_type( &::UTIL_PointContents )
            , ( bp::arg("vec") ) );
    
    }

    { //::UTIL_PointOnLineNearestPoint
    
        typedef ::Vector ( *UTIL_PointOnLineNearestPoint_function_type )( ::Vector const &,::Vector const &,::Vector const &,bool );
        
        bp::def( 
            "UTIL_PointOnLineNearestPoint"
            , UTIL_PointOnLineNearestPoint_function_type( &::UTIL_PointOnLineNearestPoint )
            , ( bp::arg("vStartPos"), bp::arg("vEndPos"), bp::arg("vPoint"), bp::arg("clampEnds")=(bool)(false) ) );
    
    }

    { //::UTIL_PrecacheDecal
    
        typedef int ( *UTIL_PrecacheDecal_function_type )( char const *,bool );
        
        bp::def( 
            "UTIL_PrecacheDecal"
            , UTIL_PrecacheDecal_function_type( &::UTIL_PrecacheDecal )
            , ( bp::arg("name"), bp::arg("preload")=(bool)(false) ) );
    
    }

    { //::UTIL_PrecacheOther
    
        typedef void ( *UTIL_PrecacheOther_function_type )( char const *,char const * );
        
        bp::def( 
            "UTIL_PrecacheOther"
            , UTIL_PrecacheOther_function_type( &::UTIL_PrecacheOther )
            , ( bp::arg("szClassname"), bp::arg("modelName")=bp::object() ) );
    
    }

    { //::UTIL_PredictedPosition
    
        typedef void ( *UTIL_PredictedPosition_function_type )( ::CBaseEntity *,float,::Vector * );
        
        bp::def( 
            "UTIL_PredictedPosition"
            , UTIL_PredictedPosition_function_type( &::UTIL_PredictedPosition )
            , ( bp::arg("pTarget"), bp::arg("flTimeDelta"), bp::arg("vecPredictedPosition") ) );
    
    }

    { //::UTIL_PyEntitiesAlongRay
    
        typedef ::boost::python::object ( *UTIL_EntitiesAlongRay_function_type )( int,::PyRay_t const &,int,int );
        
        bp::def( 
            "UTIL_EntitiesAlongRay"
            , UTIL_EntitiesAlongRay_function_type( &::UTIL_PyEntitiesAlongRay )
            , ( bp::arg("listMax"), bp::arg("ray"), bp::arg("flagMask"), bp::arg("partitionmask")=int(::PARTITION_ENGINE_NON_STATIC_EDICTS) ) );
    
    }

    { //::UTIL_PyEntitiesInBox
    
        typedef ::boost::python::object ( *UTIL_EntitiesInBox_function_type )( int,::Vector const &,::Vector const &,int,int );
        
        bp::def( 
            "UTIL_EntitiesInBox"
            , UTIL_EntitiesInBox_function_type( &::UTIL_PyEntitiesInBox )
            , ( bp::arg("listMax"), bp::arg("mins"), bp::arg("maxs"), bp::arg("flagMask"), bp::arg("partitionmask")=int(::PARTITION_ENGINE_NON_STATIC_EDICTS) ) );
    
    }

    { //::UTIL_PyEntitiesInSphere
    
        typedef ::boost::python::object ( *UTIL_EntitiesInSphere_function_type )( int,::Vector const &,float,int,int );
        
        bp::def( 
            "UTIL_EntitiesInSphere"
            , UTIL_EntitiesInSphere_function_type( &::UTIL_PyEntitiesInSphere )
            , ( bp::arg("listMax"), bp::arg("center"), bp::arg("radius"), bp::arg("flagMask"), bp::arg("partitionmask")=int(::PARTITION_ENGINE_NON_STATIC_EDICTS) ) );
    
    }

    { //::UTIL_PySetModel
    
        typedef void ( *UTIL_SetModel_function_type )( ::CBaseEntity *,char const * );
        
        bp::def( 
            "UTIL_SetModel"
            , UTIL_SetModel_function_type( &::UTIL_PySetModel )
            , ( bp::arg("entity"), bp::arg("modelname") ) );
    
    }

    { //::UTIL_PySetSize
    
        typedef void ( *UTIL_SetSize_function_type )( ::CBaseEntity *,::Vector const &,::Vector const & );
        
        bp::def( 
            "UTIL_SetSize"
            , UTIL_SetSize_function_type( &::UTIL_PySetSize )
            , ( bp::arg("ent"), bp::arg("vecmin"), bp::arg("vecmax") ) );
    
    }

    { //::UTIL_PyTraceRay
    
        typedef void ( *UTIL_TraceRay_function_type )( ::PyRay_t const &,unsigned int,::ITraceFilter &,::trace_t * );
        
        bp::def( 
            "UTIL_TraceRay"
            , UTIL_TraceRay_function_type( &::UTIL_PyTraceRay )
            , ( bp::arg("ray"), bp::arg("mask"), bp::arg("traceFilter"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_PyTraceRay
    
        typedef void ( *UTIL_TraceRay_function_type )( ::PyRay_t const &,unsigned int,::CBaseEntity const *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceRay"
            , UTIL_TraceRay_function_type( &::UTIL_PyTraceRay )
            , ( bp::arg("ray"), bp::arg("mask"), bp::arg("ignore"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_RandomBloodVector
    
        typedef ::Vector ( *UTIL_RandomBloodVector_function_type )(  );
        
        bp::def( 
            "UTIL_RandomBloodVector"
            , UTIL_RandomBloodVector_function_type( &::UTIL_RandomBloodVector ) );
    
    }

    { //::UTIL_Remove
    
        typedef void ( *UTIL_Remove_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "UTIL_Remove"
            , UTIL_Remove_function_type( &::UTIL_Remove )
            , ( bp::arg("oldObj") ) );
    
    }

    { //::UTIL_Remove
    
        typedef void ( *UTIL_Remove_function_type )( ::IServerNetworkable * );
        
        bp::def( 
            "UTIL_Remove"
            , UTIL_Remove_function_type( &::UTIL_Remove )
            , ( bp::arg("oldObj") ) );
    
    }

    { //::UTIL_RemoveImmediate
    
        typedef void ( *UTIL_RemoveImmediate_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "UTIL_RemoveImmediate"
            , UTIL_RemoveImmediate_function_type( &::UTIL_RemoveImmediate )
            , ( bp::arg("oldObj") ) );
    
    }

    { //::UTIL_RestartAmbientSounds
    
        typedef void ( *UTIL_RestartAmbientSounds_function_type )(  );
        
        bp::def( 
            "UTIL_RestartAmbientSounds"
            , UTIL_RestartAmbientSounds_function_type( &::UTIL_RestartAmbientSounds ) );
    
    }

    { //::UTIL_SayText
    
        typedef void ( *UTIL_SayText_function_type )( char const *,::CBasePlayer * );
        
        bp::def( 
            "UTIL_SayText"
            , UTIL_SayText_function_type( &::UTIL_SayText )
            , ( bp::arg("pText"), bp::arg("pEntity") ) );
    
    }

    { //::UTIL_SayText2Filter
    
        typedef void ( *UTIL_SayText2Filter_function_type )( ::IRecipientFilter &,::CBasePlayer *,bool,char const *,char const *,char const *,char const *,char const * );
        
        bp::def( 
            "UTIL_SayText2Filter"
            , UTIL_SayText2Filter_function_type( &::UTIL_SayText2Filter )
            , ( bp::arg("filter"), bp::arg("pEntity"), bp::arg("bChat"), bp::arg("msg_name"), bp::arg("param1")=bp::object(), bp::arg("param2")=bp::object(), bp::arg("param3")=bp::object(), bp::arg("param4")=bp::object() ) );
    
    }

    { //::UTIL_SayTextAll
    
        typedef void ( *UTIL_SayTextAll_function_type )( char const *,::CBasePlayer *,bool );
        
        bp::def( 
            "UTIL_SayTextAll"
            , UTIL_SayTextAll_function_type( &::UTIL_SayTextAll )
            , ( bp::arg("pText"), bp::arg("pEntity")=bp::object(), bp::arg("bChat")=(bool)(false) ) );
    
    }

    { //::UTIL_SayTextFilter
    
        typedef void ( *UTIL_SayTextFilter_function_type )( ::IRecipientFilter &,char const *,::CBasePlayer *,bool );
        
        bp::def( 
            "UTIL_SayTextFilter"
            , UTIL_SayTextFilter_function_type( &::UTIL_SayTextFilter )
            , ( bp::arg("filter"), bp::arg("pText"), bp::arg("pEntity"), bp::arg("bChat") ) );
    
    }

    { //::UTIL_ScaleForGravity
    
        typedef float ( *UTIL_ScaleForGravity_function_type )( float );
        
        bp::def( 
            "UTIL_ScaleForGravity"
            , UTIL_ScaleForGravity_function_type( &::UTIL_ScaleForGravity )
            , ( bp::arg("desiredGravity") ) );
    
    }

    { //::UTIL_ScreenFade
    
        typedef void ( *UTIL_ScreenFade_function_type )( ::CBaseEntity *,::color32 const &,float,float,int );
        
        bp::def( 
            "UTIL_ScreenFade"
            , UTIL_ScreenFade_function_type( &::UTIL_ScreenFade )
            , ( bp::arg("pEntity"), bp::arg("color"), bp::arg("fadeTime"), bp::arg("fadeHold"), bp::arg("flags") ) );
    
    }

    { //::UTIL_ScreenFadeAll
    
        typedef void ( *UTIL_ScreenFadeAll_function_type )( ::color32 const &,float,float,int );
        
        bp::def( 
            "UTIL_ScreenFadeAll"
            , UTIL_ScreenFadeAll_function_type( &::UTIL_ScreenFadeAll )
            , ( bp::arg("color"), bp::arg("fadeTime"), bp::arg("holdTime"), bp::arg("flags") ) );
    
    }

    { //::UTIL_ScreenShake
    
        typedef void ( *UTIL_ScreenShake_function_type )( ::Vector const &,float,float,float,float,::ShakeCommand_t,bool );
        
        bp::def( 
            "UTIL_ScreenShake"
            , UTIL_ScreenShake_function_type( &::UTIL_ScreenShake )
            , ( bp::arg("center"), bp::arg("amplitude"), bp::arg("frequency"), bp::arg("duration"), bp::arg("radius"), bp::arg("eCommand"), bp::arg("bAirShake")=(bool)(false) ) );
    
    }

    { //::UTIL_ScreenShakeObject
    
        typedef void ( *UTIL_ScreenShakeObject_function_type )( ::CBaseEntity *,::Vector const &,float,float,float,float,::ShakeCommand_t,bool );
        
        bp::def( 
            "UTIL_ScreenShakeObject"
            , UTIL_ScreenShakeObject_function_type( &::UTIL_ScreenShakeObject )
            , ( bp::arg("pEnt"), bp::arg("center"), bp::arg("amplitude"), bp::arg("frequency"), bp::arg("duration"), bp::arg("radius"), bp::arg("eCommand"), bp::arg("bAirShake")=(bool)(false) ) );
    
    }

    { //::UTIL_SetClientVisibilityPVS
    
        typedef void ( *UTIL_SetClientVisibilityPVS_function_type )( ::edict_t *,unsigned char const *,int );
        
        bp::def( 
            "UTIL_SetClientVisibilityPVS"
            , UTIL_SetClientVisibilityPVS_function_type( &::UTIL_SetClientVisibilityPVS )
            , ( bp::arg("pClient"), bp::arg("pvs"), bp::arg("pvssize") ) );
    
    }

    { //::UTIL_SetOrigin
    
        typedef void ( *UTIL_SetOrigin_function_type )( ::CBaseEntity *,::Vector const &,bool );
        
        bp::def( 
            "UTIL_SetOrigin"
            , UTIL_SetOrigin_function_type( &::UTIL_SetOrigin )
            , ( bp::arg("entity"), bp::arg("vecOrigin"), bp::arg("bFireTriggers")=(bool)(false) ) );
    
    }

    { //::UTIL_SetTrace
    
        typedef void ( *UTIL_SetTrace_function_type )( ::trace_t &,::Ray_t const &,::edict_t *,float,int,unsigned int,::Vector const &,float );
        
        bp::def( 
            "UTIL_SetTrace"
            , UTIL_SetTrace_function_type( &::UTIL_SetTrace )
            , ( bp::arg("tr"), bp::arg("ray"), bp::arg("edict"), bp::arg("fraction"), bp::arg("hitgroup"), bp::arg("contents"), bp::arg("normal"), bp::arg("intercept") ) );
    
    }

    { //::UTIL_ShouldShowBlood
    
        typedef bool ( *UTIL_ShouldShowBlood_function_type )( int );
        
        bp::def( 
            "UTIL_ShouldShowBlood"
            , UTIL_ShouldShowBlood_function_type( &::UTIL_ShouldShowBlood )
            , ( bp::arg("bloodColor") ) );
    
    }

    { //::UTIL_ShowMessage
    
        typedef void ( *UTIL_ShowMessage_function_type )( char const *,::CBasePlayer * );
        
        bp::def( 
            "UTIL_ShowMessage"
            , UTIL_ShowMessage_function_type( &::UTIL_ShowMessage )
            , ( bp::arg("pString"), bp::arg("pPlayer") ) );
    
    }

    { //::UTIL_ShowMessageAll
    
        typedef void ( *UTIL_ShowMessageAll_function_type )( char const * );
        
        bp::def( 
            "UTIL_ShowMessageAll"
            , UTIL_ShowMessageAll_function_type( &::UTIL_ShowMessageAll )
            , ( bp::arg("pString") ) );
    
    }

    { //::UTIL_Smoke
    
        typedef void ( *UTIL_Smoke_function_type )( ::Vector const &,float const,float const );
        
        bp::def( 
            "UTIL_Smoke"
            , UTIL_Smoke_function_type( &::UTIL_Smoke )
            , ( bp::arg("origin"), bp::arg("scale"), bp::arg("framerate") ) );
    
    }

    { //::UTIL_SnapDirectionToAxis
    
        typedef void ( *UTIL_SnapDirectionToAxis_function_type )( ::Vector &,float );
        
        bp::def( 
            "UTIL_SnapDirectionToAxis"
            , UTIL_SnapDirectionToAxis_function_type( &::UTIL_SnapDirectionToAxis )
            , ( bp::arg("direction"), bp::arg("epsilon")=2.00000009499490261077880859375e-3f ) );
    
    }

    { //::UTIL_StringToColor32
    
        typedef void ( *UTIL_StringToColor32_function_type )( ::color32 *,char const * );
        
        bp::def( 
            "UTIL_StringToColor32"
            , UTIL_StringToColor32_function_type( &::UTIL_StringToColor32 )
            , ( bp::arg("color"), bp::arg("pString") ) );
    
    }

    { //::UTIL_StringToFloatArray
    
        typedef void ( *UTIL_StringToFloatArray_function_type )( float *,int,char const * );
        
        bp::def( 
            "UTIL_StringToFloatArray"
            , UTIL_StringToFloatArray_function_type( &::UTIL_StringToFloatArray )
            , ( bp::arg("pVector"), bp::arg("count"), bp::arg("pString") ) );
    
    }

    { //::UTIL_StringToIntArray
    
        typedef void ( *UTIL_StringToIntArray_function_type )( int *,int,char const * );
        
        bp::def( 
            "UTIL_StringToIntArray"
            , UTIL_StringToIntArray_function_type( &::UTIL_StringToIntArray )
            , ( bp::arg("pVector"), bp::arg("count"), bp::arg("pString") ) );
    
    }

    { //::UTIL_StringToVector
    
        typedef void ( *UTIL_StringToVector_function_type )( float *,char const * );
        
        bp::def( 
            "UTIL_StringToVector"
            , UTIL_StringToVector_function_type( &::UTIL_StringToVector )
            , ( bp::arg("pVector"), bp::arg("pString") ) );
    
    }

    { //::UTIL_StripToken
    
        typedef void ( *UTIL_StripToken_function_type )( char const *,char * );
        
        bp::def( 
            "UTIL_StripToken"
            , UTIL_StripToken_function_type( &::UTIL_StripToken )
            , ( bp::arg("pKey"), bp::arg("pDest") ) );
    
    }

    { //::UTIL_TeamsMatch
    
        typedef bool ( *UTIL_TeamsMatch_function_type )( char const *,char const * );
        
        bp::def( 
            "UTIL_TeamsMatch"
            , UTIL_TeamsMatch_function_type( &::UTIL_TeamsMatch )
            , ( bp::arg("pTeamName1"), bp::arg("pTeamName2") ) );
    
    }

    { //::UTIL_TraceEntity
    
        typedef void ( *UTIL_TraceEntity_function_type )( ::CBaseEntity *,::Vector const &,::Vector const &,unsigned int,::IHandleEntity const *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceEntity"
            , UTIL_TraceEntity_function_type( &::UTIL_TraceEntity )
            , ( bp::arg("pEntity"), bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("ignore"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceEntity
    
        typedef void ( *UTIL_TraceEntity_function_type )( ::CBaseEntity *,::Vector const &,::Vector const &,unsigned int,::ITraceFilter *,::trace_t * );
        
        bp::def( 
            "UTIL_TraceEntity"
            , UTIL_TraceEntity_function_type( &::UTIL_TraceEntity )
            , ( bp::arg("pEntity"), bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("pFilter"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceEntity
    
        typedef void ( *UTIL_TraceEntity_function_type )( ::CBaseEntity *,::Vector const &,::Vector const &,unsigned int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceEntity"
            , UTIL_TraceEntity_function_type( &::UTIL_TraceEntity )
            , ( bp::arg("pEntity"), bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceHull
    
        typedef void ( *UTIL_TraceHull_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,unsigned int,::ITraceFilter *,::trace_t * );
        
        bp::def( 
            "UTIL_TraceHull"
            , UTIL_TraceHull_function_type( &::UTIL_TraceHull )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("hullMin"), bp::arg("hullMax"), bp::arg("mask"), bp::arg("pFilter"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceHull
    
        typedef void ( *UTIL_TraceHull_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,unsigned int,::IHandleEntity const *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceHull"
            , UTIL_TraceHull_function_type( &::UTIL_TraceHull )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("hullMin"), bp::arg("hullMax"), bp::arg("mask"), bp::arg("ignore"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceLine
    
        typedef void ( *UTIL_TraceLine_function_type )( ::Vector const &,::Vector const &,unsigned int,::ITraceFilter *,::trace_t * );
        
        bp::def( 
            "UTIL_TraceLine"
            , UTIL_TraceLine_function_type( &::UTIL_TraceLine )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("pFilter"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceLine
    
        typedef void ( *UTIL_TraceLine_function_type )( ::Vector const &,::Vector const &,unsigned int,::IHandleEntity const *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceLine"
            , UTIL_TraceLine_function_type( &::UTIL_TraceLine )
            , ( bp::arg("vecAbsStart"), bp::arg("vecAbsEnd"), bp::arg("mask"), bp::arg("ignore"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_TraceModel
    
        typedef void ( *UTIL_TraceModel_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::CBaseEntity *,int,::trace_t * );
        
        bp::def( 
            "UTIL_TraceModel"
            , UTIL_TraceModel_function_type( &::UTIL_TraceModel )
            , ( bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("hullMin"), bp::arg("hullMax"), bp::arg("pentModel"), bp::arg("collisionGroup"), bp::arg("ptr") ) );
    
    }

    { //::UTIL_Tracer
    
        typedef void ( *UTIL_Tracer_function_type )( ::Vector const &,::Vector const &,int,int,float,bool,char const *,int );
        
        bp::def( 
            "UTIL_Tracer"
            , UTIL_Tracer_function_type( &::UTIL_Tracer )
            , ( bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("iEntIndex")=(int)(0), bp::arg("iAttachment")=(int)(-0x000000001), bp::arg("flVelocity")=0, bp::arg("bWhiz")=(bool)(false), bp::arg("pCustomTracerName")=bp::object(), bp::arg("iParticleID")=(int)(0) ) );
    
    }

    { //::UTIL_TransferPoseParameters
    
        typedef bool ( *UTIL_TransferPoseParameters_function_type )( ::CBaseEntity *,::CBaseEntity * );
        
        bp::def( 
            "UTIL_TransferPoseParameters"
            , UTIL_TransferPoseParameters_function_type( &::UTIL_TransferPoseParameters )
            , ( bp::arg("pSourceEntity"), bp::arg("pDestEntity") ) );
    
    }

    { //::UTIL_ValidateSoundName
    
        typedef void ( *UTIL_ValidateSoundName_function_type )( ::string_t &,char const * );
        
        bp::def( 
            "UTIL_ValidateSoundName"
            , UTIL_ValidateSoundName_function_type( &::UTIL_ValidateSoundName )
            , ( bp::arg("name"), bp::arg("defaultStr") ) );
    
    }

    { //::UTIL_VecToPitch
    
        typedef float ( *UTIL_VecToPitch_function_type )( ::matrix3x4_t const &,::Vector const & );
        
        bp::def( 
            "UTIL_VecToPitch"
            , UTIL_VecToPitch_function_type( &::UTIL_VecToPitch )
            , ( bp::arg("matrix"), bp::arg("vec") ) );
    
    }

    { //::UTIL_VecToPitch
    
        typedef float ( *UTIL_VecToPitch_function_type )( ::Vector const & );
        
        bp::def( 
            "UTIL_VecToPitch"
            , UTIL_VecToPitch_function_type( &::UTIL_VecToPitch )
            , ( bp::arg("vec") ) );
    
    }

    { //::UTIL_VecToYaw
    
        typedef float ( *UTIL_VecToYaw_function_type )( ::matrix3x4_t const &,::Vector const & );
        
        bp::def( 
            "UTIL_VecToYaw"
            , UTIL_VecToYaw_function_type( &::UTIL_VecToYaw )
            , ( bp::arg("matrix"), bp::arg("vec") ) );
    
    }

    { //::UTIL_VecToYaw
    
        typedef float ( *UTIL_VecToYaw_function_type )( ::Vector const & );
        
        bp::def( 
            "UTIL_VecToYaw"
            , UTIL_VecToYaw_function_type( &::UTIL_VecToYaw )
            , ( bp::arg("vec") ) );
    
    }

    { //::UTIL_ViewPunch
    
        typedef void ( *UTIL_ViewPunch_function_type )( ::Vector const &,::QAngle,float,bool );
        
        bp::def( 
            "UTIL_ViewPunch"
            , UTIL_ViewPunch_function_type( &::UTIL_ViewPunch )
            , ( bp::arg("center"), bp::arg("angPunch"), bp::arg("radius"), bp::arg("bInAir") ) );
    
    }

    { //::UTIL_WaterLevel
    
        typedef float ( *UTIL_WaterLevel_function_type )( ::Vector const &,float,float );
        
        bp::def( 
            "UTIL_WaterLevel"
            , UTIL_WaterLevel_function_type( &::UTIL_WaterLevel )
            , ( bp::arg("position"), bp::arg("minz"), bp::arg("maxz") ) );
    
    }

    { //::UTIL_WorldToParentSpace
    
        typedef void ( *UTIL_WorldToParentSpace_function_type )( ::CBaseEntity *,::Vector &,::Quaternion & );
        
        bp::def( 
            "UTIL_WorldToParentSpace"
            , UTIL_WorldToParentSpace_function_type( &::UTIL_WorldToParentSpace )
            , ( bp::arg("pEntity"), bp::arg("vecPosition"), bp::arg("quat") ) );
    
    }

    { //::UTIL_WorldToParentSpace
    
        typedef void ( *UTIL_WorldToParentSpace_function_type )( ::CBaseEntity *,::Vector &,::QAngle & );
        
        bp::def( 
            "UTIL_WorldToParentSpace"
            , UTIL_WorldToParentSpace_function_type( &::UTIL_WorldToParentSpace )
            , ( bp::arg("pEntity"), bp::arg("vecPosition"), bp::arg("vecAngles") ) );
    
    }

    bp::scope().attr( "SF_ENVEXPLOSION_NODAMAGE" ) = SF_ENVEXPLOSION_NODAMAGE;

    bp::scope().attr( "SF_ENVEXPLOSION_REPEATABLE" ) = SF_ENVEXPLOSION_REPEATABLE;

    bp::scope().attr( "SF_ENVEXPLOSION_NOFIREBALL" ) = SF_ENVEXPLOSION_NOFIREBALL;

    bp::scope().attr( "SF_ENVEXPLOSION_NOSMOKE" ) = SF_ENVEXPLOSION_NOSMOKE;

    bp::scope().attr( "SF_ENVEXPLOSION_NODECAL" ) = SF_ENVEXPLOSION_NODECAL;

    bp::scope().attr( "SF_ENVEXPLOSION_NOSPARKS" ) = SF_ENVEXPLOSION_NOSPARKS;

    bp::scope().attr( "SF_ENVEXPLOSION_NOSOUND" ) = SF_ENVEXPLOSION_NOSOUND;

    bp::scope().attr( "SF_ENVEXPLOSION_RND_ORIENT" ) = SF_ENVEXPLOSION_RND_ORIENT;

    bp::scope().attr( "SF_ENVEXPLOSION_NOFIREBALLSMOKE" ) = SF_ENVEXPLOSION_NOFIREBALLSMOKE;

    bp::scope().attr( "SF_ENVEXPLOSION_NOPARTICLES" ) = SF_ENVEXPLOSION_NOPARTICLES;

    bp::scope().attr( "SF_ENVEXPLOSION_NODLIGHTS" ) = SF_ENVEXPLOSION_NODLIGHTS;

    bp::scope().attr( "SF_ENVEXPLOSION_NOCLAMPMIN" ) = SF_ENVEXPLOSION_NOCLAMPMIN;

    bp::scope().attr( "SF_ENVEXPLOSION_NOCLAMPMAX" ) = SF_ENVEXPLOSION_NOCLAMPMAX;

    bp::scope().attr( "SF_ENVEXPLOSION_SURFACEONLY" ) = SF_ENVEXPLOSION_SURFACEONLY;

    bp::scope().attr( "SF_ENVEXPLOSION_GENERIC_DAMAGE" ) = SF_ENVEXPLOSION_GENERIC_DAMAGE;

    { //::UTIL_YawToVector
    
        typedef ::Vector ( *UTIL_YawToVector_function_type )( float );
        
        bp::def( 
            "UTIL_YawToVector"
            , UTIL_YawToVector_function_type( &::UTIL_YawToVector )
            , ( bp::arg("yaw") ) );
    
    }
}
#endif

