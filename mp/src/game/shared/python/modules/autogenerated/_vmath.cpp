// This file has been generated by Py++.

#include "cbase.h"



#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "fmtstr.h"

#include "mathlib/mathlib.h"

#include "mathlib/vector.h"

#include "mathlib/vector2d.h"

#include "mathlib/vmatrix.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct QAngle_wrapper : QAngle, bp::wrapper< QAngle > {

    QAngle_wrapper(QAngle const & arg )
    : QAngle( arg )
      , bp::wrapper< QAngle >(){
        // copy constructor
        
    }

    QAngle_wrapper( )
    : QAngle( )
      , bp::wrapper< QAngle >(){
        // null constructor
    
    }

    QAngle_wrapper(::vec_t X, ::vec_t Y, ::vec_t Z )
    : QAngle( X, Y, Z )
      , bp::wrapper< QAngle >(){
        // constructor
    
    }

    static ::vec_t GetItem( QAngle const & inst, int i ) {
       if( i < 0 || i > 2 ) {
           PyErr_SetString(PyExc_IndexError, "Index out of range" );
           throw boost::python::error_already_set();
       }
       return inst[i];
    }

    static void SetItem( QAngle & inst, int i, ::vec_t v ) {
       if( i < 0 || i > 2 ) {
           PyErr_SetString(PyExc_IndexError, "Index out of range" );
           throw boost::python::error_already_set();
       }
       inst[i] = v;
    }

};

struct VMatrix_wrapper : VMatrix, bp::wrapper< VMatrix > {

    VMatrix_wrapper(VMatrix const & arg )
    : VMatrix( arg )
      , bp::wrapper< VMatrix >(){
        // copy constructor
        
    }

    VMatrix_wrapper( )
    : VMatrix( )
      , bp::wrapper< VMatrix >(){
        // null constructor
    
    }

    VMatrix_wrapper(::vec_t m00, ::vec_t m01, ::vec_t m02, ::vec_t m03, ::vec_t m10, ::vec_t m11, ::vec_t m12, ::vec_t m13, ::vec_t m20, ::vec_t m21, ::vec_t m22, ::vec_t m23, ::vec_t m30, ::vec_t m31, ::vec_t m32, ::vec_t m33 )
    : VMatrix( m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33 )
      , bp::wrapper< VMatrix >(){
        // constructor
    
    }

    VMatrix_wrapper(::matrix3x4_t const & matrix3x4 )
    : VMatrix( boost::ref(matrix3x4) )
      , bp::wrapper< VMatrix >(){
        // constructor
    
    }

    VMatrix_wrapper(::Vector const & xAxis, ::Vector const & yAxis, ::Vector const & zAxis )
    : VMatrix( boost::ref(xAxis), boost::ref(yAxis), boost::ref(zAxis) )
      , bp::wrapper< VMatrix >(){
        // constructor
    
    }

    VMatrix_wrapper(::Vector const & xAxis, ::Vector const & yAxis, ::Vector const & zAxis, ::Vector const & translation )
    : VMatrix( boost::ref(xAxis), boost::ref(yAxis), boost::ref(zAxis), boost::ref(translation) )
      , bp::wrapper< VMatrix >(){
        // constructor
    
    }

    static boost::python::object Str( VMatrix const & inst ) {
       return boost::python::object(VMatToString(inst));
    }

};

struct Vector_wrapper : Vector, bp::wrapper< Vector > {

    Vector_wrapper(Vector const & arg )
    : Vector( arg )
      , bp::wrapper< Vector >(){
        // copy constructor
        
    }

    Vector_wrapper( )
    : Vector( )
      , bp::wrapper< Vector >(){
        // null constructor
    
    }

    Vector_wrapper(::vec_t X, ::vec_t Y, ::vec_t Z )
    : Vector( X, Y, Z )
      , bp::wrapper< Vector >(){
        // constructor
    
    }

    Vector_wrapper(::vec_t XYZ )
    : Vector( XYZ )
      , bp::wrapper< Vector >(){
        // constructor
    
    }

    static ::vec_t GetItem( Vector const & inst, int i ) {
       if( i < 0 || i > 2 ) {
           PyErr_SetString(PyExc_IndexError, "Index out of range" );
           throw boost::python::error_already_set();
       }
       return inst[i];
    }

    static void SetItem( Vector & inst, int i, ::vec_t v ) {
       if( i < 0 || i > 2 ) {
           PyErr_SetString(PyExc_IndexError, "Index out of range" );
           throw boost::python::error_already_set();
       }
       inst[i] = v;
    }

};

struct Vector2D_wrapper : Vector2D, bp::wrapper< Vector2D > {

    Vector2D_wrapper( )
    : Vector2D( )
      , bp::wrapper< Vector2D >(){
        // null constructor
    
    }

    Vector2D_wrapper(::vec_t X, ::vec_t Y )
    : Vector2D( X, Y )
      , bp::wrapper< Vector2D >(){
        // constructor
    
    }

    Vector2D_wrapper(::Vector2D const & vOther )
    : Vector2D( boost::ref(vOther) )
      , bp::wrapper< Vector2D >(){
        // copy constructor
    
    }

    static ::vec_t GetItem( Vector2D const & inst, int i ) {
       if( i < 0 || i > 1 ) {
           PyErr_SetString(PyExc_IndexError, "Index out of range" );
           throw boost::python::error_already_set();
       }
       return inst[i];
    }

    static void SetItem( Vector2D & inst, int i, ::vec_t v ) {
       if( i < 0 || i > 1 ) {
           PyErr_SetString(PyExc_IndexError, "Index out of range" );
           throw boost::python::error_already_set();
       }
       inst[i] = v;
    }

};

static boost::python::object CalcSqrDistAndClosestPointOnAABB_9f58e81483fec37787abb9035f371f46( ::Vector const & mins, ::Vector const & maxs, ::Vector const & point, ::Vector & closestOut ){
    float distSqrOut2;
    ::CalcSqrDistAndClosestPointOnAABB(mins, maxs, point, closestOut, distSqrOut2);
    return bp::object( distSqrOut2 );
}

static boost::python::object ComputeTrianglePlane_fd5ab800d06f24759463cf9352b8c202( ::Vector const & v1, ::Vector const & v2, ::Vector const & v3, ::Vector & normal ){
    float intercept2;
    ::ComputeTrianglePlane(v1, v2, v3, normal, intercept2);
    return bp::object( intercept2 );
}

static boost::python::tuple QuaternionAxisAngle_1aeb858644987511f87d26402e6d7dc8( ::Quaternion const & q ){
    Vector axis2;
    float angle2;
    ::QuaternionAxisAngle(q, axis2, angle2);
    return bp::make_tuple( axis2, angle2 );
}

static boost::python::tuple RotationDeltaAxisAngle_115cc0d1cdab06a8b09f189b0b486926( ::QAngle const & srcAngles, ::QAngle const & destAngles ){
    Vector deltaAxis2;
    float deltaAngle2;
    ::RotationDeltaAxisAngle(srcAngles, destAngles, deltaAxis2, deltaAngle2);
    return bp::make_tuple( deltaAxis2, deltaAngle2 );
}

static boost::python::tuple SolveInverseQuadratic_a961cf4fc5c78184b9bbe209d40b79e5( float x1, float y1, float x2, float y2, float x3, float y3 ){
    float a2;
    float b2;
    float c2;
    bool result = ::SolveInverseQuadratic(x1, y1, x2, y2, x3, y3, a2, b2, c2);
    return bp::make_tuple( result, a2, b2, c2 );
}

static boost::python::tuple SolveInverseQuadraticMonotonic_7d4ba4b0f2e21d9213defa1a459f1d80( float x1, float y1, float x2, float y2, float x3, float y3 ){
    float a2;
    float b2;
    float c2;
    bool result = ::SolveInverseQuadraticMonotonic(x1, y1, x2, y2, x3, y3, a2, b2, c2);
    return bp::make_tuple( result, a2, b2, c2 );
}

static boost::python::tuple SolveInverseReciprocalQuadratic_57f0efe0eaad2db1faf78c8edcc7d0e6( float x1, float y1, float x2, float y2, float x3, float y3 ){
    float a2;
    float b2;
    float c2;
    bool result = ::SolveInverseReciprocalQuadratic(x1, y1, x2, y2, x3, y3, a2, b2, c2);
    return bp::make_tuple( result, a2, b2, c2 );
}

static boost::python::tuple SolveQuadratic_31ef7b9460cfa222a08c796ffdd4ca0a( float a, float b, float c ){
    float root12;
    float root22;
    bool result = ::SolveQuadratic(a, b, c, root12, root22);
    return bp::make_tuple( result, root12, root22 );
}

BOOST_PYTHON_MODULE(_vmath){
    bp::docstring_options doc_options( true, true, false );

    bp::class_< ColorRGBExp32 >( "ColorRGBExp32" )    
        .def_readwrite( "b", &ColorRGBExp32::b )    
        .def_readwrite( "exponent", &ColorRGBExp32::exponent )    
        .def_readwrite( "g", &ColorRGBExp32::g )    
        .def_readwrite( "r", &ColorRGBExp32::r );

    { //::QAngle
        typedef bp::class_< QAngle_wrapper > QAngle_exposer_t;
        QAngle_exposer_t QAngle_exposer = QAngle_exposer_t( "QAngle", bp::init< >() );
        bp::scope QAngle_scope( QAngle_exposer );
        QAngle_exposer.def( bp::init< vec_t, vec_t, vec_t >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z") )) );
        { //::QAngle::Init
        
            typedef void ( ::QAngle::*Init_function_type )( ::vec_t,::vec_t,::vec_t ) ;
            
            QAngle_exposer.def( 
                "Init"
                , Init_function_type( &::QAngle::Init )
                , ( bp::arg("ix")=0.0f, bp::arg("iy")=0.0f, bp::arg("iz")=0.0f ) );
        
        }
        { //::QAngle::Invalidate
        
            typedef void ( ::QAngle::*Invalidate_function_type )(  ) ;
            
            QAngle_exposer.def( 
                "Invalidate"
                , Invalidate_function_type( &::QAngle::Invalidate ) );
        
        }
        { //::QAngle::IsValid
        
            typedef bool ( ::QAngle::*IsValid_function_type )(  ) const;
            
            QAngle_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::QAngle::IsValid ) );
        
        }
        { //::QAngle::Length
        
            typedef ::vec_t ( ::QAngle::*Length_function_type )(  ) const;
            
            QAngle_exposer.def( 
                "Length"
                , Length_function_type( &::QAngle::Length ) );
        
        }
        { //::QAngle::LengthSqr
        
            typedef ::vec_t ( ::QAngle::*LengthSqr_function_type )(  ) const;
            
            QAngle_exposer.def( 
                "LengthSqr"
                , LengthSqr_function_type( &::QAngle::LengthSqr ) );
        
        }
        { //::QAngle::Random
        
            typedef void ( ::QAngle::*Random_function_type )( ::vec_t,::vec_t ) ;
            
            QAngle_exposer.def( 
                "Random"
                , Random_function_type( &::QAngle::Random )
                , ( bp::arg("minVal"), bp::arg("maxVal") ) );
        
        }
        QAngle_exposer.def( "as__scope_QAngleByValue_const__ref_", &QAngle::operator ::QAngleByValue const & ,bp::return_value_policy< bp::copy_const_reference >() );
        QAngle_exposer.def( bp::self != bp::self );
        QAngle_exposer.def( bp::self * bp::other< float >() );
        QAngle_exposer.def( bp::self *= bp::other< float >() );
        QAngle_exposer.def( bp::self + bp::self );
        QAngle_exposer.def( bp::self += bp::self );
        QAngle_exposer.def( -bp::self );
        QAngle_exposer.def( bp::self - bp::self );
        QAngle_exposer.def( bp::self -= bp::self );
        QAngle_exposer.def( bp::self / bp::other< float >() );
        QAngle_exposer.def( bp::self /= bp::other< float >() );
        QAngle_exposer.def( bp::self == bp::self );
        QAngle_exposer.def_readwrite( "x", &QAngle::x );
        QAngle_exposer.def_readwrite( "y", &QAngle::y );
        QAngle_exposer.def_readwrite( "z", &QAngle::z );
        QAngle_exposer.def( "__getitem__", &::QAngle_wrapper::GetItem );
        QAngle_exposer.def( "__setitem__", &::QAngle_wrapper::SetItem );
        QAngle_exposer.def( bp::init< const QAngle & >(( bp::arg("vOther") )) );
    }

    { //::Quaternion
        typedef bp::class_< Quaternion > Quaternion_exposer_t;
        Quaternion_exposer_t Quaternion_exposer = Quaternion_exposer_t( "Quaternion", bp::init< >() );
        bp::scope Quaternion_scope( Quaternion_exposer );
        Quaternion_exposer.def( bp::init< vec_t, vec_t, vec_t, vec_t >(( bp::arg("ix"), bp::arg("iy"), bp::arg("iz"), bp::arg("iw") )) );
        Quaternion_exposer.def( bp::init< RadianEuler const & >(( bp::arg("angle") )) );
        bp::implicitly_convertible< RadianEuler const &, Quaternion >();
        { //::Quaternion::Init
        
            typedef void ( ::Quaternion::*Init_function_type )( ::vec_t,::vec_t,::vec_t,::vec_t ) ;
            
            Quaternion_exposer.def( 
                "Init"
                , Init_function_type( &::Quaternion::Init )
                , ( bp::arg("ix")=0.0f, bp::arg("iy")=0.0f, bp::arg("iz")=0.0f, bp::arg("iw")=0.0f ) );
        
        }
        { //::Quaternion::Invalidate
        
            typedef void ( ::Quaternion::*Invalidate_function_type )(  ) ;
            
            Quaternion_exposer.def( 
                "Invalidate"
                , Invalidate_function_type( &::Quaternion::Invalidate ) );
        
        }
        { //::Quaternion::IsValid
        
            typedef bool ( ::Quaternion::*IsValid_function_type )(  ) const;
            
            Quaternion_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::Quaternion::IsValid ) );
        
        }
        Quaternion_exposer.def( bp::self != bp::self );
        Quaternion_exposer.def( bp::self == bp::self );
        Quaternion_exposer.def_readwrite( "w", &Quaternion::w );
        Quaternion_exposer.def_readwrite( "x", &Quaternion::x );
        Quaternion_exposer.def_readwrite( "y", &Quaternion::y );
        Quaternion_exposer.def_readwrite( "z", &Quaternion::z );
    }

    { //::VMatrix
        typedef bp::class_< VMatrix_wrapper > VMatrix_exposer_t;
        VMatrix_exposer_t VMatrix_exposer = VMatrix_exposer_t( "VMatrix", bp::init< >() );
        bp::scope VMatrix_scope( VMatrix_exposer );
        VMatrix_exposer.def( bp::init< vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t, vec_t >(( bp::arg("m00"), bp::arg("m01"), bp::arg("m02"), bp::arg("m03"), bp::arg("m10"), bp::arg("m11"), bp::arg("m12"), bp::arg("m13"), bp::arg("m20"), bp::arg("m21"), bp::arg("m22"), bp::arg("m23"), bp::arg("m30"), bp::arg("m31"), bp::arg("m32"), bp::arg("m33") )) );
        VMatrix_exposer.def( bp::init< matrix3x4_t const & >(( bp::arg("matrix3x4") )) );
        bp::implicitly_convertible< matrix3x4_t const &, VMatrix >();
        VMatrix_exposer.def( bp::init< Vector const &, Vector const &, Vector const & >(( bp::arg("xAxis"), bp::arg("yAxis"), bp::arg("zAxis") )) );
        VMatrix_exposer.def( bp::init< Vector const &, Vector const &, Vector const &, Vector const & >(( bp::arg("xAxis"), bp::arg("yAxis"), bp::arg("zAxis"), bp::arg("translation") )) );
        { //::VMatrix::ApplyRotation
        
            typedef ::Vector ( ::VMatrix::*ApplyRotation_function_type )( ::Vector const & ) const;
            
            VMatrix_exposer.def( 
                "ApplyRotation"
                , ApplyRotation_function_type( &::VMatrix::ApplyRotation )
                , ( bp::arg("vVec") ) );
        
        }
        { //::VMatrix::CopyFrom3x4
        
            typedef void ( ::VMatrix::*CopyFrom3x4_function_type )( ::matrix3x4_t const & ) ;
            
            VMatrix_exposer.def( 
                "CopyFrom3x4"
                , CopyFrom3x4_function_type( &::VMatrix::CopyFrom3x4 )
                , ( bp::arg("m3x4") ) );
        
        }
        { //::VMatrix::GetBasisVectors
        
            typedef void ( ::VMatrix::*GetBasisVectors_function_type )( ::Vector &,::Vector &,::Vector & ) const;
            
            VMatrix_exposer.def( 
                "GetBasisVectors"
                , GetBasisVectors_function_type( &::VMatrix::GetBasisVectors )
                , ( bp::arg("vForward"), bp::arg("vLeft"), bp::arg("vUp") ) );
        
        }
        { //::VMatrix::GetForward
        
            typedef ::Vector ( ::VMatrix::*GetForward_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "GetForward"
                , GetForward_function_type( &::VMatrix::GetForward ) );
        
        }
        { //::VMatrix::GetLeft
        
            typedef ::Vector ( ::VMatrix::*GetLeft_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "GetLeft"
                , GetLeft_function_type( &::VMatrix::GetLeft ) );
        
        }
        { //::VMatrix::GetScale
        
            typedef ::Vector ( ::VMatrix::*GetScale_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "GetScale"
                , GetScale_function_type( &::VMatrix::GetScale ) );
        
        }
        { //::VMatrix::GetUp
        
            typedef ::Vector ( ::VMatrix::*GetUp_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "GetUp"
                , GetUp_function_type( &::VMatrix::GetUp ) );
        
        }
        { //::VMatrix::Identity
        
            typedef void ( ::VMatrix::*Identity_function_type )(  ) ;
            
            VMatrix_exposer.def( 
                "Identity"
                , Identity_function_type( &::VMatrix::Identity ) );
        
        }
        { //::VMatrix::Init
        
            typedef void ( ::VMatrix::*Init_function_type )( ::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t,::vec_t ) ;
            
            VMatrix_exposer.def( 
                "Init"
                , Init_function_type( &::VMatrix::Init )
                , ( bp::arg("m00"), bp::arg("m01"), bp::arg("m02"), bp::arg("m03"), bp::arg("m10"), bp::arg("m11"), bp::arg("m12"), bp::arg("m13"), bp::arg("m20"), bp::arg("m21"), bp::arg("m22"), bp::arg("m23"), bp::arg("m30"), bp::arg("m31"), bp::arg("m32"), bp::arg("m33") ) );
        
        }
        { //::VMatrix::Init
        
            typedef void ( ::VMatrix::*Init_function_type )( ::matrix3x4_t const & ) ;
            
            VMatrix_exposer.def( 
                "Init"
                , Init_function_type( &::VMatrix::Init )
                , ( bp::arg("matrix3x4") ) );
        
        }
        { //::VMatrix::InverseGeneral
        
            typedef bool ( ::VMatrix::*InverseGeneral_function_type )( ::VMatrix & ) const;
            
            VMatrix_exposer.def( 
                "InverseGeneral"
                , InverseGeneral_function_type( &::VMatrix::InverseGeneral )
                , ( bp::arg("vInverse") ) );
        
        }
        { //::VMatrix::InverseTR
        
            typedef void ( ::VMatrix::*InverseTR_function_type )( ::VMatrix & ) const;
            
            VMatrix_exposer.def( 
                "InverseTR"
                , InverseTR_function_type( &::VMatrix::InverseTR )
                , ( bp::arg("mRet") ) );
        
        }
        { //::VMatrix::InverseTR
        
            typedef ::VMatrix ( ::VMatrix::*InverseTR_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "InverseTR"
                , InverseTR_function_type( &::VMatrix::InverseTR ) );
        
        }
        { //::VMatrix::IsIdentity
        
            typedef bool ( ::VMatrix::*IsIdentity_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "IsIdentity"
                , IsIdentity_function_type( &::VMatrix::IsIdentity ) );
        
        }
        { //::VMatrix::IsRotationMatrix
        
            typedef bool ( ::VMatrix::*IsRotationMatrix_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "IsRotationMatrix"
                , IsRotationMatrix_function_type( &::VMatrix::IsRotationMatrix ) );
        
        }
        { //::VMatrix::MatrixMul
        
            typedef void ( ::VMatrix::*MatrixMul_function_type )( ::VMatrix const &,::VMatrix & ) const;
            
            VMatrix_exposer.def( 
                "MatrixMul"
                , MatrixMul_function_type( &::VMatrix::MatrixMul )
                , ( bp::arg("vm"), bp::arg("out") ) );
        
        }
        { //::VMatrix::NormalizeBasisVectors
        
            typedef ::VMatrix ( ::VMatrix::*NormalizeBasisVectors_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "NormalizeBasisVectors"
                , NormalizeBasisVectors_function_type( &::VMatrix::NormalizeBasisVectors ) );
        
        }
        { //::VMatrix::PostTranslate
        
            typedef void ( ::VMatrix::*PostTranslate_function_type )( ::Vector const & ) ;
            
            VMatrix_exposer.def( 
                "PostTranslate"
                , PostTranslate_function_type( &::VMatrix::PostTranslate )
                , ( bp::arg("vTrans") ) );
        
        }
        { //::VMatrix::PreTranslate
        
            typedef void ( ::VMatrix::*PreTranslate_function_type )( ::Vector const & ) ;
            
            VMatrix_exposer.def( 
                "PreTranslate"
                , PreTranslate_function_type( &::VMatrix::PreTranslate )
                , ( bp::arg("vTrans") ) );
        
        }
        { //::VMatrix::Scale
        
            typedef ::VMatrix ( ::VMatrix::*Scale_function_type )( ::Vector const & ) ;
            
            VMatrix_exposer.def( 
                "Scale"
                , Scale_function_type( &::VMatrix::Scale )
                , ( bp::arg("vScale") ) );
        
        }
        { //::VMatrix::Set3x4
        
            typedef void ( ::VMatrix::*Set3x4_function_type )( ::matrix3x4_t & ) const;
            
            VMatrix_exposer.def( 
                "Set3x4"
                , Set3x4_function_type( &::VMatrix::Set3x4 )
                , ( bp::arg("matrix3x4") ) );
        
        }
        { //::VMatrix::SetBasisVectors
        
            typedef void ( ::VMatrix::*SetBasisVectors_function_type )( ::Vector const &,::Vector const &,::Vector const & ) ;
            
            VMatrix_exposer.def( 
                "SetBasisVectors"
                , SetBasisVectors_function_type( &::VMatrix::SetBasisVectors )
                , ( bp::arg("vForward"), bp::arg("vLeft"), bp::arg("vUp") ) );
        
        }
        { //::VMatrix::SetForward
        
            typedef void ( ::VMatrix::*SetForward_function_type )( ::Vector const & ) ;
            
            VMatrix_exposer.def( 
                "SetForward"
                , SetForward_function_type( &::VMatrix::SetForward )
                , ( bp::arg("vForward") ) );
        
        }
        { //::VMatrix::SetLeft
        
            typedef void ( ::VMatrix::*SetLeft_function_type )( ::Vector const & ) ;
            
            VMatrix_exposer.def( 
                "SetLeft"
                , SetLeft_function_type( &::VMatrix::SetLeft )
                , ( bp::arg("vLeft") ) );
        
        }
        { //::VMatrix::SetTranslation
        
            typedef void ( ::VMatrix::*SetTranslation_function_type )( ::Vector const & ) ;
            
            VMatrix_exposer.def( 
                "SetTranslation"
                , SetTranslation_function_type( &::VMatrix::SetTranslation )
                , ( bp::arg("vTrans") ) );
        
        }
        { //::VMatrix::SetUp
        
            typedef void ( ::VMatrix::*SetUp_function_type )( ::Vector const & ) ;
            
            VMatrix_exposer.def( 
                "SetUp"
                , SetUp_function_type( &::VMatrix::SetUp )
                , ( bp::arg("vUp") ) );
        
        }
        { //::VMatrix::SetupMatrixOrgAngles
        
            typedef void ( ::VMatrix::*SetupMatrixOrgAngles_function_type )( ::Vector const &,::QAngle const & ) ;
            
            VMatrix_exposer.def( 
                "SetupMatrixOrgAngles"
                , SetupMatrixOrgAngles_function_type( &::VMatrix::SetupMatrixOrgAngles )
                , ( bp::arg("origin"), bp::arg("vAngles") ) );
        
        }
        { //::VMatrix::TransformPlane
        
            typedef void ( ::VMatrix::*TransformPlane_function_type )( ::VPlane const &,::VPlane & ) const;
            
            VMatrix_exposer.def( 
                "TransformPlane"
                , TransformPlane_function_type( &::VMatrix::TransformPlane )
                , ( bp::arg("inPlane"), bp::arg("outPlane") ) );
        
        }
        { //::VMatrix::Transpose
        
            typedef ::VMatrix ( ::VMatrix::*Transpose_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "Transpose"
                , Transpose_function_type( &::VMatrix::Transpose ) );
        
        }
        { //::VMatrix::Transpose3x3
        
            typedef ::VMatrix ( ::VMatrix::*Transpose3x3_function_type )(  ) const;
            
            VMatrix_exposer.def( 
                "Transpose3x3"
                , Transpose3x3_function_type( &::VMatrix::Transpose3x3 ) );
        
        }
        { //::VMatrix::V3Mul
        
            typedef void ( ::VMatrix::*V3Mul_function_type )( ::Vector const &,::Vector & ) const;
            
            VMatrix_exposer.def( 
                "V3Mul"
                , V3Mul_function_type( &::VMatrix::V3Mul )
                , ( bp::arg("vIn"), bp::arg("vOut") ) );
        
        }
        { //::VMatrix::V4Mul
        
            typedef void ( ::VMatrix::*V4Mul_function_type )( ::Vector4D const &,::Vector4D & ) const;
            
            VMatrix_exposer.def( 
                "V4Mul"
                , V4Mul_function_type( &::VMatrix::V4Mul )
                , ( bp::arg("vIn"), bp::arg("vOut") ) );
        
        }
        { //::VMatrix::VMul3x3
        
            typedef ::Vector ( ::VMatrix::*VMul3x3_function_type )( ::Vector const & ) const;
            
            VMatrix_exposer.def( 
                "VMul3x3"
                , VMul3x3_function_type( &::VMatrix::VMul3x3 )
                , ( bp::arg("vVec") ) );
        
        }
        { //::VMatrix::VMul3x3Transpose
        
            typedef ::Vector ( ::VMatrix::*VMul3x3Transpose_function_type )( ::Vector const & ) const;
            
            VMatrix_exposer.def( 
                "VMul3x3Transpose"
                , VMul3x3Transpose_function_type( &::VMatrix::VMul3x3Transpose )
                , ( bp::arg("vVec") ) );
        
        }
        { //::VMatrix::VMul4x3
        
            typedef ::Vector ( ::VMatrix::*VMul4x3_function_type )( ::Vector const & ) const;
            
            VMatrix_exposer.def( 
                "VMul4x3"
                , VMul4x3_function_type( &::VMatrix::VMul4x3 )
                , ( bp::arg("vVec") ) );
        
        }
        { //::VMatrix::VMul4x3Transpose
        
            typedef ::Vector ( ::VMatrix::*VMul4x3Transpose_function_type )( ::Vector const & ) const;
            
            VMatrix_exposer.def( 
                "VMul4x3Transpose"
                , VMul4x3Transpose_function_type( &::VMatrix::VMul4x3Transpose )
                , ( bp::arg("vVec") ) );
        
        }
        VMatrix_exposer.def( bp::self != bp::self );
        VMatrix_exposer.def( bp::self * bp::other< Vector >() );
        VMatrix_exposer.def( bp::self * bp::other< VPlane >() );
        VMatrix_exposer.def( bp::self * bp::self );
        VMatrix_exposer.def( bp::self + bp::self );
        VMatrix_exposer.def( bp::self += bp::self );
        VMatrix_exposer.def( bp::self - bp::self );
        VMatrix_exposer.def( -bp::self );
        VMatrix_exposer.def( bp::self == bp::self );
        VMatrix_exposer.def( ~bp::self );
        VMatrix_exposer.def( "__str__", &::VMatrix_wrapper::Str );
    }

    { //::Vector
        typedef bp::class_< Vector_wrapper > Vector_exposer_t;
        Vector_exposer_t Vector_exposer = Vector_exposer_t( "Vector", bp::init< >() );
        bp::scope Vector_scope( Vector_exposer );
        Vector_exposer.def( bp::init< vec_t, vec_t, vec_t >(( bp::arg("X"), bp::arg("Y"), bp::arg("Z") )) );
        Vector_exposer.def( bp::init< vec_t >(( bp::arg("XYZ") )) );
        bp::implicitly_convertible< vec_t, Vector >();
        { //::Vector::AsVector2D
        
            typedef ::Vector2D & ( ::Vector::*AsVector2D_function_type )(  ) ;
            
            Vector_exposer.def( 
                "AsVector2D"
                , AsVector2D_function_type( &::Vector::AsVector2D )
                , bp::return_internal_reference< >() );
        
        }
        { //::Vector::AsVector2D
        
            typedef ::Vector2D const & ( ::Vector::*AsVector2D_function_type )(  ) const;
            
            Vector_exposer.def( 
                "AsVector2D"
                , AsVector2D_function_type( &::Vector::AsVector2D )
                , bp::return_internal_reference< >() );
        
        }
        { //::Vector::Cross
        
            typedef ::Vector ( ::Vector::*Cross_function_type )( ::Vector const & ) const;
            
            Vector_exposer.def( 
                "Cross"
                , Cross_function_type( &::Vector::Cross )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector::DistTo
        
            typedef ::vec_t ( ::Vector::*DistTo_function_type )( ::Vector const & ) const;
            
            Vector_exposer.def( 
                "DistTo"
                , DistTo_function_type( &::Vector::DistTo )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector::DistToSqr
        
            typedef ::vec_t ( ::Vector::*DistToSqr_function_type )( ::Vector const & ) const;
            
            Vector_exposer.def( 
                "DistToSqr"
                , DistToSqr_function_type( &::Vector::DistToSqr )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector::Dot
        
            typedef ::vec_t ( ::Vector::*Dot_function_type )( ::Vector const & ) const;
            
            Vector_exposer.def( 
                "Dot"
                , Dot_function_type( &::Vector::Dot )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector::Init
        
            typedef void ( ::Vector::*Init_function_type )( ::vec_t,::vec_t,::vec_t ) ;
            
            Vector_exposer.def( 
                "Init"
                , Init_function_type( &::Vector::Init )
                , ( bp::arg("ix")=0.0f, bp::arg("iy")=0.0f, bp::arg("iz")=0.0f ) );
        
        }
        { //::Vector::Invalidate
        
            typedef void ( ::Vector::*Invalidate_function_type )(  ) ;
            
            Vector_exposer.def( 
                "Invalidate"
                , Invalidate_function_type( &::Vector::Invalidate ) );
        
        }
        { //::Vector::IsLengthGreaterThan
        
            typedef bool ( ::Vector::*IsLengthGreaterThan_function_type )( float ) const;
            
            Vector_exposer.def( 
                "IsLengthGreaterThan"
                , IsLengthGreaterThan_function_type( &::Vector::IsLengthGreaterThan )
                , ( bp::arg("val") ) );
        
        }
        { //::Vector::IsLengthLessThan
        
            typedef bool ( ::Vector::*IsLengthLessThan_function_type )( float ) const;
            
            Vector_exposer.def( 
                "IsLengthLessThan"
                , IsLengthLessThan_function_type( &::Vector::IsLengthLessThan )
                , ( bp::arg("val") ) );
        
        }
        { //::Vector::IsValid
        
            typedef bool ( ::Vector::*IsValid_function_type )(  ) const;
            
            Vector_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::Vector::IsValid ) );
        
        }
        { //::Vector::IsZero
        
            typedef bool ( ::Vector::*IsZero_function_type )( float ) const;
            
            Vector_exposer.def( 
                "IsZero"
                , IsZero_function_type( &::Vector::IsZero )
                , ( bp::arg("tolerance")=9.99999977648258209228515625e-3f ) );
        
        }
        { //::Vector::Length
        
            typedef ::vec_t ( ::Vector::*Length_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Length"
                , Length_function_type( &::Vector::Length ) );
        
        }
        { //::Vector::Length2D
        
            typedef ::vec_t ( ::Vector::*Length2D_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Length2D"
                , Length2D_function_type( &::Vector::Length2D ) );
        
        }
        { //::Vector::Length2DSqr
        
            typedef ::vec_t ( ::Vector::*Length2DSqr_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Length2DSqr"
                , Length2DSqr_function_type( &::Vector::Length2DSqr ) );
        
        }
        { //::Vector::LengthSqr
        
            typedef ::vec_t ( ::Vector::*LengthSqr_function_type )(  ) const;
            
            Vector_exposer.def( 
                "LengthSqr"
                , LengthSqr_function_type( &::Vector::LengthSqr ) );
        
        }
        { //::Vector::Max
        
            typedef ::Vector ( ::Vector::*Max_function_type )( ::Vector const & ) const;
            
            Vector_exposer.def( 
                "Max"
                , Max_function_type( &::Vector::Max )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector::Min
        
            typedef ::Vector ( ::Vector::*Min_function_type )( ::Vector const & ) const;
            
            Vector_exposer.def( 
                "Min"
                , Min_function_type( &::Vector::Min )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector::MulAdd
        
            typedef void ( ::Vector::*MulAdd_function_type )( ::Vector const &,::Vector const &,float ) ;
            
            Vector_exposer.def( 
                "MulAdd"
                , MulAdd_function_type( &::Vector::MulAdd )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("scalar") ) );
        
        }
        { //::Vector::Negate
        
            typedef void ( ::Vector::*Negate_function_type )(  ) ;
            
            Vector_exposer.def( 
                "Negate"
                , Negate_function_type( &::Vector::Negate ) );
        
        }
        { //::Vector::NormalizeInPlace
        
            typedef ::vec_t ( ::Vector::*NormalizeInPlace_function_type )(  ) ;
            
            Vector_exposer.def( 
                "NormalizeInPlace"
                , NormalizeInPlace_function_type( &::Vector::NormalizeInPlace ) );
        
        }
        { //::Vector::Normalized
        
            typedef ::Vector ( ::Vector::*Normalized_function_type )(  ) const;
            
            Vector_exposer.def( 
                "Normalized"
                , Normalized_function_type( &::Vector::Normalized ) );
        
        }
        { //::Vector::Random
        
            typedef void ( ::Vector::*Random_function_type )( ::vec_t,::vec_t ) ;
            
            Vector_exposer.def( 
                "Random"
                , Random_function_type( &::Vector::Random )
                , ( bp::arg("minVal"), bp::arg("maxVal") ) );
        
        }
        { //::Vector::WithinAABox
        
            typedef bool ( ::Vector::*WithinAABox_function_type )( ::Vector const &,::Vector const & ) ;
            
            Vector_exposer.def( 
                "WithinAABox"
                , WithinAABox_function_type( &::Vector::WithinAABox )
                , ( bp::arg("boxmin"), bp::arg("boxmax") ) );
        
        }
        { //::Vector::Zero
        
            typedef void ( ::Vector::*Zero_function_type )(  ) ;
            
            Vector_exposer.def( 
                "Zero"
                , Zero_function_type( &::Vector::Zero ) );
        
        }
        Vector_exposer.def( "as__scope_VectorByValue_const__ref_", &Vector::operator ::VectorByValue const & ,bp::return_value_policy< bp::copy_const_reference >() );
        Vector_exposer.def( bp::self != bp::self );
        Vector_exposer.def( bp::self * bp::self );
        Vector_exposer.def( bp::self * bp::other< float >() );
        Vector_exposer.def( bp::self *= bp::self );
        Vector_exposer.def( bp::self *= bp::other< float >() );
        Vector_exposer.def( bp::self + bp::self );
        Vector_exposer.def( bp::self += bp::self );
        Vector_exposer.def( bp::self += bp::other< float >() );
        Vector_exposer.def( -bp::self );
        Vector_exposer.def( bp::self - bp::self );
        Vector_exposer.def( bp::self -= bp::self );
        Vector_exposer.def( bp::self -= bp::other< float >() );
        Vector_exposer.def( bp::self / bp::self );
        Vector_exposer.def( bp::self / bp::other< float >() );
        Vector_exposer.def( bp::self /= bp::self );
        Vector_exposer.def( bp::self /= bp::other< float >() );
        Vector_exposer.def( bp::self == bp::self );
        Vector_exposer.def_readwrite( "x", &Vector::x );
        Vector_exposer.def_readwrite( "y", &Vector::y );
        Vector_exposer.def_readwrite( "z", &Vector::z );
        Vector_exposer.def( "__getitem__", &::Vector_wrapper::GetItem );
        Vector_exposer.def( "__setitem__", &::Vector_wrapper::SetItem );
        Vector_exposer.def( bp::init< const Vector & >(( bp::arg("vOther") )) );
    }

    { //::Vector2D
        typedef bp::class_< Vector2D_wrapper > Vector2D_exposer_t;
        Vector2D_exposer_t Vector2D_exposer = Vector2D_exposer_t( "Vector2D", bp::init< >() );
        bp::scope Vector2D_scope( Vector2D_exposer );
        Vector2D_exposer.def( bp::init< vec_t, vec_t >(( bp::arg("X"), bp::arg("Y") )) );
        Vector2D_exposer.def( bp::init< Vector2D const & >(( bp::arg("vOther") )) );
        { //::Vector2D::DistTo
        
            typedef ::vec_t ( ::Vector2D::*DistTo_function_type )( ::Vector2D const & ) const;
            
            Vector2D_exposer.def( 
                "DistTo"
                , DistTo_function_type( &::Vector2D::DistTo )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector2D::DistToSqr
        
            typedef ::vec_t ( ::Vector2D::*DistToSqr_function_type )( ::Vector2D const & ) const;
            
            Vector2D_exposer.def( 
                "DistToSqr"
                , DistToSqr_function_type( &::Vector2D::DistToSqr )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector2D::Dot
        
            typedef ::vec_t ( ::Vector2D::*Dot_function_type )( ::Vector2D const & ) const;
            
            Vector2D_exposer.def( 
                "Dot"
                , Dot_function_type( &::Vector2D::Dot )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector2D::Init
        
            typedef void ( ::Vector2D::*Init_function_type )( ::vec_t,::vec_t ) ;
            
            Vector2D_exposer.def( 
                "Init"
                , Init_function_type( &::Vector2D::Init )
                , ( bp::arg("ix")=0.0f, bp::arg("iy")=0.0f ) );
        
        }
        { //::Vector2D::IsLengthGreaterThan
        
            typedef bool ( ::Vector2D::*IsLengthGreaterThan_function_type )( float ) const;
            
            Vector2D_exposer.def( 
                "IsLengthGreaterThan"
                , IsLengthGreaterThan_function_type( &::Vector2D::IsLengthGreaterThan )
                , ( bp::arg("val") ) );
        
        }
        { //::Vector2D::IsLengthLessThan
        
            typedef bool ( ::Vector2D::*IsLengthLessThan_function_type )( float ) const;
            
            Vector2D_exposer.def( 
                "IsLengthLessThan"
                , IsLengthLessThan_function_type( &::Vector2D::IsLengthLessThan )
                , ( bp::arg("val") ) );
        
        }
        { //::Vector2D::IsValid
        
            typedef bool ( ::Vector2D::*IsValid_function_type )(  ) const;
            
            Vector2D_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::Vector2D::IsValid ) );
        
        }
        { //::Vector2D::IsZero
        
            typedef bool ( ::Vector2D::*IsZero_function_type )( float ) const;
            
            Vector2D_exposer.def( 
                "IsZero"
                , IsZero_function_type( &::Vector2D::IsZero )
                , ( bp::arg("tolerance")=9.99999977648258209228515625e-3f ) );
        
        }
        { //::Vector2D::Length
        
            typedef ::vec_t ( ::Vector2D::*Length_function_type )(  ) const;
            
            Vector2D_exposer.def( 
                "Length"
                , Length_function_type( &::Vector2D::Length ) );
        
        }
        { //::Vector2D::LengthSqr
        
            typedef ::vec_t ( ::Vector2D::*LengthSqr_function_type )(  ) const;
            
            Vector2D_exposer.def( 
                "LengthSqr"
                , LengthSqr_function_type( &::Vector2D::LengthSqr ) );
        
        }
        { //::Vector2D::Max
        
            typedef ::Vector2D ( ::Vector2D::*Max_function_type )( ::Vector2D const & ) const;
            
            Vector2D_exposer.def( 
                "Max"
                , Max_function_type( &::Vector2D::Max )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector2D::Min
        
            typedef ::Vector2D ( ::Vector2D::*Min_function_type )( ::Vector2D const & ) const;
            
            Vector2D_exposer.def( 
                "Min"
                , Min_function_type( &::Vector2D::Min )
                , ( bp::arg("vOther") ) );
        
        }
        { //::Vector2D::MulAdd
        
            typedef void ( ::Vector2D::*MulAdd_function_type )( ::Vector2D const &,::Vector2D const &,float ) ;
            
            Vector2D_exposer.def( 
                "MulAdd"
                , MulAdd_function_type( &::Vector2D::MulAdd )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("scalar") ) );
        
        }
        { //::Vector2D::Negate
        
            typedef void ( ::Vector2D::*Negate_function_type )(  ) ;
            
            Vector2D_exposer.def( 
                "Negate"
                , Negate_function_type( &::Vector2D::Negate ) );
        
        }
        { //::Vector2D::NormalizeInPlace
        
            typedef ::vec_t ( ::Vector2D::*NormalizeInPlace_function_type )(  ) ;
            
            Vector2D_exposer.def( 
                "NormalizeInPlace"
                , NormalizeInPlace_function_type( &::Vector2D::NormalizeInPlace ) );
        
        }
        { //::Vector2D::Random
        
            typedef void ( ::Vector2D::*Random_function_type )( float,float ) ;
            
            Vector2D_exposer.def( 
                "Random"
                , Random_function_type( &::Vector2D::Random )
                , ( bp::arg("minVal"), bp::arg("maxVal") ) );
        
        }
        Vector2D_exposer.def( bp::self != bp::self );
        Vector2D_exposer.def( bp::self * bp::self );
        Vector2D_exposer.def( bp::self * bp::other< float >() );
        Vector2D_exposer.def( bp::self *= bp::self );
        Vector2D_exposer.def( bp::self *= bp::other< float >() );
        Vector2D_exposer.def( bp::self + bp::self );
        Vector2D_exposer.def( bp::self += bp::self );
        Vector2D_exposer.def( -bp::self );
        Vector2D_exposer.def( bp::self - bp::self );
        Vector2D_exposer.def( bp::self -= bp::self );
        Vector2D_exposer.def( bp::self / bp::self );
        Vector2D_exposer.def( bp::self / bp::other< float >() );
        Vector2D_exposer.def( bp::self /= bp::self );
        Vector2D_exposer.def( bp::self /= bp::other< float >() );
        Vector2D_exposer.def( bp::self == bp::self );
        Vector2D_exposer.def_readwrite( "x", &Vector2D::x );
        Vector2D_exposer.def_readwrite( "y", &Vector2D::y );
        Vector2D_exposer.def( "__getitem__", &::Vector2D_wrapper::GetItem );
        Vector2D_exposer.def( "__setitem__", &::Vector2D_wrapper::SetItem );
    }

    bp::class_< cplane_t >( "cplane_t" )    
        .def_readwrite( "dist", &cplane_t::dist )    
        .def_readwrite( "normal", &cplane_t::normal )    
        .def_readwrite( "signbits", &cplane_t::signbits )    
        .def_readwrite( "type", &cplane_t::type );

    bp::class_< matrix3x4_t >( "matrix3x4_t", bp::init< >() )    
        .def( bp::init< float, float, float, float, float, float, float, float, float, float, float, float >(( bp::arg("m00"), bp::arg("m01"), bp::arg("m02"), bp::arg("m03"), bp::arg("m10"), bp::arg("m11"), bp::arg("m12"), bp::arg("m13"), bp::arg("m20"), bp::arg("m21"), bp::arg("m22"), bp::arg("m23") )) )    
        .def( bp::init< Vector const &, Vector const &, Vector const &, Vector const & >(( bp::arg("xAxis"), bp::arg("yAxis"), bp::arg("zAxis"), bp::arg("vecOrigin") )) )    
        .def( 
            "Init"
            , (void ( ::matrix3x4_t::* )( ::Vector const &,::Vector const &,::Vector const &,::Vector const & ) )( &::matrix3x4_t::Init )
            , ( bp::arg("xAxis"), bp::arg("yAxis"), bp::arg("zAxis"), bp::arg("vecOrigin") ) )    
        .def( 
            "Invalidate"
            , (void ( ::matrix3x4_t::* )(  ) )( &::matrix3x4_t::Invalidate ) );

    { //::AddPointToBounds
    
        typedef void ( *AddPointToBounds_function_type )( ::Vector const &,::Vector &,::Vector & );
        
        bp::def( 
            "AddPointToBounds"
            , AddPointToBounds_function_type( &::AddPointToBounds )
            , ( bp::arg("v"), bp::arg("mins"), bp::arg("maxs") ) );
    
    }

    { //::AngleDiff
    
        typedef float ( *AngleDiff_function_type )( float,float );
        
        bp::def( 
            "AngleDiff"
            , AngleDiff_function_type( &::AngleDiff )
            , ( bp::arg("destAngle"), bp::arg("srcAngle") ) );
    
    }

    { //::AngleDistance
    
        typedef float ( *AngleDistance_function_type )( float,float );
        
        bp::def( 
            "AngleDistance"
            , AngleDistance_function_type( &::AngleDistance )
            , ( bp::arg("next"), bp::arg("cur") ) );
    
    }

    { //::AngleIMatrix
    
        typedef void ( *AngleIMatrix_function_type )( ::RadianEuler const &,::matrix3x4_t & );
        
        bp::def( 
            "AngleIMatrix"
            , AngleIMatrix_function_type( &::AngleIMatrix )
            , ( bp::arg("angles"), bp::arg("mat") ) );
    
    }

    { //::AngleIMatrix
    
        typedef void ( *AngleIMatrix_function_type )( ::QAngle const &,::Vector const &,::matrix3x4_t & );
        
        bp::def( 
            "AngleIMatrix"
            , AngleIMatrix_function_type( &::AngleIMatrix )
            , ( bp::arg("angles"), bp::arg("position"), bp::arg("mat") ) );
    
    }

    { //::AngleIMatrix
    
        typedef void ( *AngleIMatrix_function_type )( ::QAngle const &,::matrix3x4_t & );
        
        bp::def( 
            "AngleIMatrix"
            , AngleIMatrix_function_type( &::AngleIMatrix )
            , ( bp::arg("angles"), bp::arg("mat") ) );
    
    }

    { //::AngleMatrix
    
        typedef void ( *AngleMatrix_function_type )( ::RadianEuler const &,::Vector const &,::matrix3x4_t & );
        
        bp::def( 
            "AngleMatrix"
            , AngleMatrix_function_type( &::AngleMatrix )
            , ( bp::arg("angles"), bp::arg("position"), bp::arg("mat") ) );
    
    }

    { //::AngleMatrix
    
        typedef void ( *AngleMatrix_function_type )( ::RadianEuler const &,::matrix3x4_t & );
        
        bp::def( 
            "AngleMatrix"
            , AngleMatrix_function_type( &::AngleMatrix )
            , ( bp::arg("angles"), bp::arg("mat") ) );
    
    }

    { //::AngleMatrix
    
        typedef void ( *AngleMatrix_function_type )( ::QAngle const &,::Vector const &,::matrix3x4_t & );
        
        bp::def( 
            "AngleMatrix"
            , AngleMatrix_function_type( &::AngleMatrix )
            , ( bp::arg("angles"), bp::arg("position"), bp::arg("mat") ) );
    
    }

    { //::AngleMatrix
    
        typedef void ( *AngleMatrix_function_type )( ::QAngle const &,::matrix3x4_t & );
        
        bp::def( 
            "AngleMatrix"
            , AngleMatrix_function_type( &::AngleMatrix )
            , ( bp::arg("angles"), bp::arg("mat") ) );
    
    }

    { //::AngleNormalize
    
        typedef float ( *AngleNormalize_function_type )( float );
        
        bp::def( 
            "AngleNormalize"
            , AngleNormalize_function_type( &::AngleNormalize )
            , ( bp::arg("angle") ) );
    
    }

    { //::AngleNormalizePositive
    
        typedef float ( *AngleNormalizePositive_function_type )( float );
        
        bp::def( 
            "AngleNormalizePositive"
            , AngleNormalizePositive_function_type( &::AngleNormalizePositive )
            , ( bp::arg("angle") ) );
    
    }

    { //::AngleQuaternion
    
        typedef void ( *AngleQuaternion_function_type )( ::QAngle const &,::Quaternion & );
        
        bp::def( 
            "AngleQuaternion"
            , AngleQuaternion_function_type( &::AngleQuaternion )
            , ( bp::arg("angles"), bp::arg("qt") ) );
    
    }

    { //::AngleQuaternion
    
        typedef void ( *AngleQuaternion_function_type )( ::RadianEuler const &,::Quaternion & );
        
        bp::def( 
            "AngleQuaternion"
            , AngleQuaternion_function_type( &::AngleQuaternion )
            , ( bp::arg("angles"), bp::arg("qt") ) );
    
    }

    { //::AngleVectors
    
        typedef void ( *AngleVectors_function_type )( ::QAngle const &,::Vector *,::Vector *,::Vector * );
        
        bp::def( 
            "AngleVectors"
            , AngleVectors_function_type( &::AngleVectors )
            , ( bp::arg("angles"), bp::arg("forward"), bp::arg("right"), bp::arg("up") ) );
    
    }

    { //::AngleVectors
    
        typedef void ( *AngleVectors_function_type )( ::QAngle const &,::Vector * );
        
        bp::def( 
            "AngleVectors"
            , AngleVectors_function_type( &::AngleVectors )
            , ( bp::arg("angles"), bp::arg("forward") ) );
    
    }

    { //::AngleVectorsTranspose
    
        typedef void ( *AngleVectorsTranspose_function_type )( ::QAngle const &,::Vector *,::Vector *,::Vector * );
        
        bp::def( 
            "AngleVectorsTranspose"
            , AngleVectorsTranspose_function_type( &::AngleVectorsTranspose )
            , ( bp::arg("angles"), bp::arg("forward"), bp::arg("right"), bp::arg("up") ) );
    
    }

    { //::AnglesAreEqual
    
        typedef bool ( *AnglesAreEqual_function_type )( float,float,float );
        
        bp::def( 
            "AnglesAreEqual"
            , AnglesAreEqual_function_type( &::AnglesAreEqual )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("tolerance")=0.0f ) );
    
    }

    { //::Approach
    
        typedef float ( *Approach_function_type )( float,float,float );
        
        bp::def( 
            "Approach"
            , Approach_function_type( &::Approach )
            , ( bp::arg("target"), bp::arg("value"), bp::arg("speed") ) );
    
    }

    { //::ApproachAngle
    
        typedef float ( *ApproachAngle_function_type )( float,float,float );
        
        bp::def( 
            "ApproachAngle"
            , ApproachAngle_function_type( &::ApproachAngle )
            , ( bp::arg("target"), bp::arg("value"), bp::arg("speed") ) );
    
    }

    { //::AxisAngleQuaternion
    
        typedef void ( *AxisAngleQuaternion_function_type )( ::Vector const &,float,::Quaternion & );
        
        bp::def( 
            "AxisAngleQuaternion"
            , AxisAngleQuaternion_function_type( &::AxisAngleQuaternion )
            , ( bp::arg("axis"), bp::arg("angle"), bp::arg("q") ) );
    
    }

    { //::BSpline
    
        typedef void ( *BSpline_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "BSpline"
            , BSpline_function_type( &::BSpline )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::BSpline_NormalizeX
    
        typedef void ( *BSpline_NormalizeX_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "BSpline_NormalizeX"
            , BSpline_NormalizeX_function_type( &::BSpline_NormalizeX )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::BasisToQuaternion
    
        typedef void ( *BasisToQuaternion_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Quaternion & );
        
        bp::def( 
            "BasisToQuaternion"
            , BasisToQuaternion_function_type( &::BasisToQuaternion )
            , ( bp::arg("vecForward"), bp::arg("vecRight"), bp::arg("vecUp"), bp::arg("q") ) );
    
    }

    { //::Bias
    
        typedef float ( *Bias_function_type )( float,float );
        
        bp::def( 
            "Bias"
            , Bias_function_type( &::Bias )
            , ( bp::arg("x"), bp::arg("biasAmt") ) );
    
    }

    { //::BoxOnPlaneSide
    
        typedef int ( *BoxOnPlaneSide_function_type )( ::Vector const &,::Vector const &,::cplane_t const * );
        
        bp::def( 
            "BoxOnPlaneSide"
            , BoxOnPlaneSide_function_type( &::BoxOnPlaneSide )
            , ( bp::arg("emins"), bp::arg("emaxs"), bp::arg("plane") ) );
    
    }

    { //::BoxOnPlaneSide2
    
        typedef int ( *BoxOnPlaneSide2_function_type )( ::Vector const &,::Vector const &,::cplane_t const *,float );
        
        bp::def( 
            "BoxOnPlaneSide2"
            , BoxOnPlaneSide2_function_type( &::BoxOnPlaneSide2 )
            , ( bp::arg("emins"), bp::arg("emaxs"), bp::arg("p"), bp::arg("tolerance")=0.0f ) );
    
    }

    { //::BuildGammaTable
    
        typedef void ( *BuildGammaTable_function_type )( float,float,float,int );
        
        bp::def( 
            "BuildGammaTable"
            , BuildGammaTable_function_type( &::BuildGammaTable )
            , ( bp::arg("gamma"), bp::arg("texGamma"), bp::arg("brightness"), bp::arg("overbright") ) );
    
    }

    { //::CalcClosestPointOnAABB
    
        typedef void ( *CalcClosestPointOnAABB_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "CalcClosestPointOnAABB"
            , CalcClosestPointOnAABB_function_type( &::CalcClosestPointOnAABB )
            , ( bp::arg("mins"), bp::arg("maxs"), bp::arg("point"), bp::arg("closestOut") ) );
    
    }

    { //::CalcDistanceToAABB
    
        typedef float ( *CalcDistanceToAABB_function_type )( ::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "CalcDistanceToAABB"
            , CalcDistanceToAABB_function_type( &::CalcDistanceToAABB )
            , ( bp::arg("mins"), bp::arg("maxs"), bp::arg("point") ) );
    
    }

    { //::CalcSqrDistAndClosestPointOnAABB
    
        typedef boost::python::object ( *CalcSqrDistAndClosestPointOnAABB_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "CalcSqrDistAndClosestPointOnAABB"
            , CalcSqrDistAndClosestPointOnAABB_function_type( &CalcSqrDistAndClosestPointOnAABB_9f58e81483fec37787abb9035f371f46 )
            , ( bp::arg("mins"), bp::arg("maxs"), bp::arg("point"), bp::arg("closestOut") ) );
    
    }

    { //::CalcSqrDistanceToAABB
    
        typedef float ( *CalcSqrDistanceToAABB_function_type )( ::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "CalcSqrDistanceToAABB"
            , CalcSqrDistanceToAABB_function_type( &::CalcSqrDistanceToAABB )
            , ( bp::arg("mins"), bp::arg("maxs"), bp::arg("point") ) );
    
    }

    { //::CalcTriangleTangentSpace
    
        typedef void ( *CalcTriangleTangentSpace_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector2D const &,::Vector2D const &,::Vector2D const &,::Vector &,::Vector & );
        
        bp::def( 
            "CalcTriangleTangentSpace"
            , CalcTriangleTangentSpace_function_type( &::CalcTriangleTangentSpace )
            , ( bp::arg("p0"), bp::arg("p1"), bp::arg("p2"), bp::arg("t0"), bp::arg("t1"), bp::arg("t2"), bp::arg("sVect"), bp::arg("tVect") ) );
    
    }

    { //::Catmull_Rom_Spline
    
        typedef void ( *Catmull_Rom_Spline_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Catmull_Rom_Spline"
            , Catmull_Rom_Spline_function_type( &::Catmull_Rom_Spline )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Catmull_Rom_Spline_Integral
    
        typedef void ( *Catmull_Rom_Spline_Integral_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "Catmull_Rom_Spline_Integral"
            , Catmull_Rom_Spline_Integral_function_type( &::Catmull_Rom_Spline_Integral )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("output") ) );
    
    }

    { //::Catmull_Rom_Spline_Integral
    
        typedef void ( *Catmull_Rom_Spline_Integral_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Catmull_Rom_Spline_Integral"
            , Catmull_Rom_Spline_Integral_function_type( &::Catmull_Rom_Spline_Integral )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Catmull_Rom_Spline_Integral_Normalize
    
        typedef void ( *Catmull_Rom_Spline_Integral_Normalize_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Catmull_Rom_Spline_Integral_Normalize"
            , Catmull_Rom_Spline_Integral_Normalize_function_type( &::Catmull_Rom_Spline_Integral_Normalize )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Catmull_Rom_Spline_Normalize
    
        typedef void ( *Catmull_Rom_Spline_Normalize_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Catmull_Rom_Spline_Normalize"
            , Catmull_Rom_Spline_Normalize_function_type( &::Catmull_Rom_Spline_Normalize )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Catmull_Rom_Spline_NormalizeX
    
        typedef void ( *Catmull_Rom_Spline_NormalizeX_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Catmull_Rom_Spline_NormalizeX"
            , Catmull_Rom_Spline_NormalizeX_function_type( &::Catmull_Rom_Spline_NormalizeX )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Catmull_Rom_Spline_Tangent
    
        typedef void ( *Catmull_Rom_Spline_Tangent_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Catmull_Rom_Spline_Tangent"
            , Catmull_Rom_Spline_Tangent_function_type( &::Catmull_Rom_Spline_Tangent )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Ceil2Int
    
        typedef int ( *Ceil2Int_function_type )( float );
        
        bp::def( 
            "Ceil2Int"
            , Ceil2Int_function_type( &::Ceil2Int )
            , ( bp::arg("a") ) );
    
    }

    { //::CeilPow2
    
        typedef int ( *CeilPow2_function_type )( int );
        
        bp::def( 
            "CeilPow2"
            , CeilPow2_function_type( &::CeilPow2 )
            , ( bp::arg("in") ) );
    
    }

    { //::ClampArrayBounds
    
        typedef int ( *ClampArrayBounds_function_type )( int,unsigned int );
        
        bp::def( 
            "ClampArrayBounds"
            , ClampArrayBounds_function_type( &::ClampArrayBounds )
            , ( bp::arg("n"), bp::arg("maxindex") ) );
    
    }

    { //::ClampToMsec
    
        typedef float ( *ClampToMsec_function_type )( float );
        
        bp::def( 
            "ClampToMsec"
            , ClampToMsec_function_type( &::ClampToMsec )
            , ( bp::arg("in") ) );
    
    }

    { //::ClearBounds
    
        typedef void ( *ClearBounds_function_type )( ::Vector &,::Vector & );
        
        bp::def( 
            "ClearBounds"
            , ClearBounds_function_type( &::ClearBounds )
            , ( bp::arg("mins"), bp::arg("maxs") ) );
    
    }

    { //::ClipPolyToPlane
    
        typedef int ( *ClipPolyToPlane_function_type )( ::Vector *,int,::Vector *,::Vector const &,float,float );
        
        bp::def( 
            "ClipPolyToPlane"
            , ClipPolyToPlane_function_type( &::ClipPolyToPlane )
            , ( bp::arg("inVerts"), bp::arg("vertCount"), bp::arg("outVerts"), bp::arg("normal"), bp::arg("dist"), bp::arg("fOnPlaneEpsilon")=1.00000001490116119384765625e-1f ) );
    
    }

    { //::ClipPolyToPlane_Precise
    
        typedef int ( *ClipPolyToPlane_Precise_function_type )( double *,int,double *,double const *,double,double );
        
        bp::def( 
            "ClipPolyToPlane_Precise"
            , ClipPolyToPlane_Precise_function_type( &::ClipPolyToPlane_Precise )
            , ( bp::arg("inVerts"), bp::arg("vertCount"), bp::arg("outVerts"), bp::arg("normal"), bp::arg("dist"), bp::arg("fOnPlaneEpsilon")=1.00000000000000005551115123125782702118158340454e-1 ) );
    
    }

    { //::ColorClamp
    
        typedef void ( *ColorClamp_function_type )( ::Vector & );
        
        bp::def( 
            "ColorClamp"
            , ColorClamp_function_type( &::ColorClamp )
            , ( bp::arg("color") ) );
    
    }

    { //::ColorClampTruncate
    
        typedef void ( *ColorClampTruncate_function_type )( ::Vector & );
        
        bp::def( 
            "ColorClampTruncate"
            , ColorClampTruncate_function_type( &::ColorClampTruncate )
            , ( bp::arg("color") ) );
    
    }

    { //::ComputeClosestPoint
    
        typedef void ( *ComputeClosestPoint_function_type )( ::Vector const &,float,::Vector const &,::Vector * );
        
        bp::def( 
            "ComputeClosestPoint"
            , ComputeClosestPoint_function_type( &::ComputeClosestPoint )
            , ( bp::arg("vecStart"), bp::arg("flMaxDist"), bp::arg("vecTarget"), bp::arg("pResult") ) );
    
    }

    { //::ComputeClosestPoint2D
    
        typedef void ( *ComputeClosestPoint2D_function_type )( ::Vector2D const &,float,::Vector2D const &,::Vector2D * );
        
        bp::def( 
            "ComputeClosestPoint2D"
            , ComputeClosestPoint2D_function_type( &::ComputeClosestPoint2D )
            , ( bp::arg("vecStart"), bp::arg("flMaxDist"), bp::arg("vecTarget"), bp::arg("pResult") ) );
    
    }

    { //::ComputeTrianglePlane
    
        typedef boost::python::object ( *ComputeTrianglePlane_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "ComputeTrianglePlane"
            , ComputeTrianglePlane_function_type( &ComputeTrianglePlane_fd5ab800d06f24759463cf9352b8c202 )
            , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("normal") ) );
    
    }

    { //::ConcatTransforms
    
        typedef void ( *ConcatTransforms_function_type )( ::matrix3x4_t const &,::matrix3x4_t const &,::matrix3x4_t & );
        
        bp::def( 
            "ConcatTransforms"
            , ConcatTransforms_function_type( &::ConcatTransforms )
            , ( bp::arg("in1"), bp::arg("in2"), bp::arg("out") ) );
    
    }

    { //::CrossProduct
    
        typedef ::Vector ( *CrossProduct_function_type )( ::Vector const &,::Vector const & );
        
        bp::def( 
            "CrossProduct"
            , CrossProduct_function_type( &::CrossProduct )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::CrossProduct
    
        typedef void ( *CrossProduct_function_type )( ::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "CrossProduct"
            , CrossProduct_function_type( &::CrossProduct )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("result") ) );
    
    }

    { //::Cubic_Spline
    
        typedef void ( *Cubic_Spline_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Cubic_Spline"
            , Cubic_Spline_function_type( &::Cubic_Spline )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Cubic_Spline_NormalizeX
    
        typedef void ( *Cubic_Spline_NormalizeX_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Cubic_Spline_NormalizeX"
            , Cubic_Spline_NormalizeX_function_type( &::Cubic_Spline_NormalizeX )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::DotProduct
    
        typedef ::vec_t ( *DotProduct_function_type )( ::vec_t const *,::vec_t const * );
        
        bp::def( 
            "DotProduct"
            , DotProduct_function_type( &::DotProduct )
            , ( bp::arg("v1"), bp::arg("v2") ) );
    
    }

    { //::DotProduct
    
        typedef ::vec_t ( *DotProduct_function_type )( ::Vector const &,::Vector const & );
        
        bp::def( 
            "DotProduct"
            , DotProduct_function_type( &::DotProduct )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::DotProduct2D
    
        typedef ::vec_t ( *DotProduct2D_function_type )( ::Vector2D const &,::Vector2D const & );
        
        bp::def( 
            "DotProduct2D"
            , DotProduct2D_function_type( &::DotProduct2D )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::ExponentialDecay
    
        typedef float ( *ExponentialDecay_function_type )( float,float,float );
        
        bp::def( 
            "ExponentialDecay"
            , ExponentialDecay_function_type( &::ExponentialDecay )
            , ( bp::arg("decayTo"), bp::arg("decayTime"), bp::arg("dt") ) );
    
    }

    { //::ExponentialDecay
    
        typedef float ( *ExponentialDecay_function_type )( float,float );
        
        bp::def( 
            "ExponentialDecay"
            , ExponentialDecay_function_type( &::ExponentialDecay )
            , ( bp::arg("halflife"), bp::arg("dt") ) );
    
    }

    { //::ExponentialDecayIntegral
    
        typedef float ( *ExponentialDecayIntegral_function_type )( float,float,float );
        
        bp::def( 
            "ExponentialDecayIntegral"
            , ExponentialDecayIntegral_function_type( &::ExponentialDecayIntegral )
            , ( bp::arg("decayTo"), bp::arg("decayTime"), bp::arg("dt") ) );
    
    }

    { //::FLerp
    
        typedef float ( *FLerp_function_type )( float,float,float,float,float );
        
        bp::def( 
            "FLerp"
            , FLerp_function_type( &::FLerp )
            , ( bp::arg("f1"), bp::arg("f2"), bp::arg("i1"), bp::arg("i2"), bp::arg("x") ) );
    
    }

    { //::FastFToC
    
        typedef unsigned int ( *FastFToC_function_type )( float );
        
        bp::def( 
            "FastFToC"
            , FastFToC_function_type( &::FastFToC )
            , ( bp::arg("c") ) );
    
    }

    { //::Float2Int
    
        typedef int ( *Float2Int_function_type )( float );
        
        bp::def( 
            "Float2Int"
            , Float2Int_function_type( &::Float2Int )
            , ( bp::arg("a") ) );
    
    }

    { //::Floor2Int
    
        typedef int ( *Floor2Int_function_type )( float );
        
        bp::def( 
            "Floor2Int"
            , Floor2Int_function_type( &::Floor2Int )
            , ( bp::arg("a") ) );
    
    }

    { //::FloorDivMod
    
        typedef void ( *FloorDivMod_function_type )( double,double,int *,int * );
        
        bp::def( 
            "FloorDivMod"
            , FloorDivMod_function_type( &::FloorDivMod )
            , ( bp::arg("numer"), bp::arg("denom"), bp::arg("quotient"), bp::arg("rem") ) );
    
    }

    { //::FloorPow2
    
        typedef int ( *FloorPow2_function_type )( int );
        
        bp::def( 
            "FloorPow2"
            , FloorPow2_function_type( &::FloorPow2 )
            , ( bp::arg("in") ) );
    
    }

    { //::Gain
    
        typedef float ( *Gain_function_type )( float,float );
        
        bp::def( 
            "Gain"
            , Gain_function_type( &::Gain )
            , ( bp::arg("x"), bp::arg("biasAmt") ) );
    
    }

    { //::GammaToLinear
    
        typedef float ( *GammaToLinear_function_type )( float );
        
        bp::def( 
            "GammaToLinear"
            , GammaToLinear_function_type( &::GammaToLinear )
            , ( bp::arg("gamma") ) );
    
    }

    { //::GammaToLinearFullRange
    
        typedef float ( *GammaToLinearFullRange_function_type )( float );
        
        bp::def( 
            "GammaToLinearFullRange"
            , GammaToLinearFullRange_function_type( &::GammaToLinearFullRange )
            , ( bp::arg("gamma") ) );
    
    }

    { //::GreatestCommonDivisor
    
        typedef int ( *GreatestCommonDivisor_function_type )( int,int );
        
        bp::def( 
            "GreatestCommonDivisor"
            , GreatestCommonDivisor_function_type( &::GreatestCommonDivisor )
            , ( bp::arg("i1"), bp::arg("i2") ) );
    
    }

    { //::HSVtoRGB
    
        typedef void ( *HSVtoRGB_function_type )( ::Vector const &,::Vector & );
        
        bp::def( 
            "HSVtoRGB"
            , HSVtoRGB_function_type( &::HSVtoRGB )
            , ( bp::arg("hsv"), bp::arg("rgb") ) );
    
    }

    { //::Hermite_Spline
    
        typedef void ( *Hermite_Spline_function_type )( ::Quaternion const &,::Quaternion const &,::Quaternion const &,float,::Quaternion & );
        
        bp::def( 
            "Hermite_Spline"
            , Hermite_Spline_function_type( &::Hermite_Spline )
            , ( bp::arg("q0"), bp::arg("q1"), bp::arg("q2"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Hermite_Spline
    
        typedef float ( *Hermite_Spline_function_type )( float,float,float,float );
        
        bp::def( 
            "Hermite_Spline"
            , Hermite_Spline_function_type( &::Hermite_Spline )
            , ( bp::arg("p0"), bp::arg("p1"), bp::arg("p2"), bp::arg("t") ) );
    
    }

    { //::Hermite_Spline
    
        typedef void ( *Hermite_Spline_function_type )( ::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Hermite_Spline"
            , Hermite_Spline_function_type( &::Hermite_Spline )
            , ( bp::arg("p0"), bp::arg("p1"), bp::arg("p2"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Hermite_Spline
    
        typedef float ( *Hermite_Spline_function_type )( float,float,float,float,float );
        
        bp::def( 
            "Hermite_Spline"
            , Hermite_Spline_function_type( &::Hermite_Spline )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("d1"), bp::arg("d2"), bp::arg("t") ) );
    
    }

    { //::Hermite_Spline
    
        typedef void ( *Hermite_Spline_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Hermite_Spline"
            , Hermite_Spline_function_type( &::Hermite_Spline )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("d1"), bp::arg("d2"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::IRotateAABB
    
        typedef void ( *IRotateAABB_function_type )( ::matrix3x4_t const &,::Vector const &,::Vector const &,::Vector &,::Vector & );
        
        bp::def( 
            "IRotateAABB"
            , IRotateAABB_function_type( &::IRotateAABB )
            , ( bp::arg("in1"), bp::arg("vecMinsIn"), bp::arg("vecMaxsIn"), bp::arg("vecMinsOut"), bp::arg("vecMaxsOut") ) );
    
    }

    { //::ITransformAABB
    
        typedef void ( *ITransformAABB_function_type )( ::matrix3x4_t const &,::Vector const &,::Vector const &,::Vector &,::Vector & );
        
        bp::def( 
            "ITransformAABB"
            , ITransformAABB_function_type( &::ITransformAABB )
            , ( bp::arg("in1"), bp::arg("vecMinsIn"), bp::arg("vecMaxsIn"), bp::arg("vecMinsOut"), bp::arg("vecMaxsOut") ) );
    
    }

    { //::IsDenormal
    
        typedef bool ( *IsDenormal_function_type )( float const & );
        
        bp::def( 
            "IsDenormal"
            , IsDenormal_function_type( &::IsDenormal )
            , ( bp::arg("val") ) );
    
    }

    { //::IsIntegralValue
    
        typedef bool ( *IsIntegralValue_function_type )( float,float );
        
        bp::def( 
            "IsIntegralValue"
            , IsIntegralValue_function_type( &::IsIntegralValue )
            , ( bp::arg("flValue"), bp::arg("flTolerance")=1.000000047497451305389404296875e-3f ) );
    
    }

    { //::Kochanek_Bartels_Spline
    
        typedef void ( *Kochanek_Bartels_Spline_function_type )( float,float,float,::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Kochanek_Bartels_Spline"
            , Kochanek_Bartels_Spline_function_type( &::Kochanek_Bartels_Spline )
            , ( bp::arg("tension"), bp::arg("bias"), bp::arg("continuity"), bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Kochanek_Bartels_Spline_NormalizeX
    
        typedef void ( *Kochanek_Bartels_Spline_NormalizeX_function_type )( float,float,float,::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Kochanek_Bartels_Spline_NormalizeX"
            , Kochanek_Bartels_Spline_NormalizeX_function_type( &::Kochanek_Bartels_Spline_NormalizeX )
            , ( bp::arg("tension"), bp::arg("bias"), bp::arg("continuity"), bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::LargestPowerOfTwoLessThanOrEqual
    
        typedef ::uint ( *LargestPowerOfTwoLessThanOrEqual_function_type )( ::uint );
        
        bp::def( 
            "LargestPowerOfTwoLessThanOrEqual"
            , LargestPowerOfTwoLessThanOrEqual_function_type( &::LargestPowerOfTwoLessThanOrEqual )
            , ( bp::arg("x") ) );
    
    }

    { //::Lerp
    
        typedef ::QAngle ( *Lerp_function_type )( float,::QAngle const &,::QAngle const & );
        
        bp::def( 
            "Lerp"
            , Lerp_function_type( &::Lerp )
            , ( bp::arg("flPercent"), bp::arg("q1"), bp::arg("q2") ) );
    
    }

    { //::LinearToGamma
    
        typedef float ( *LinearToGamma_function_type )( float );
        
        bp::def( 
            "LinearToGamma"
            , LinearToGamma_function_type( &::LinearToGamma )
            , ( bp::arg("linear") ) );
    
    }

    { //::LinearToGammaFullRange
    
        typedef float ( *LinearToGammaFullRange_function_type )( float );
        
        bp::def( 
            "LinearToGammaFullRange"
            , LinearToGammaFullRange_function_type( &::LinearToGammaFullRange )
            , ( bp::arg("linear") ) );
    
    }

    { //::LinearToLightmap
    
        typedef unsigned char ( *LinearToLightmap_function_type )( float );
        
        bp::def( 
            "LinearToLightmap"
            , LinearToLightmap_function_type( &::LinearToLightmap )
            , ( bp::arg("f") ) );
    
    }

    { //::LinearToScreenGamma
    
        typedef int ( *LinearToScreenGamma_function_type )( float );
        
        bp::def( 
            "LinearToScreenGamma"
            , LinearToScreenGamma_function_type( &::LinearToScreenGamma )
            , ( bp::arg("f") ) );
    
    }

    { //::LinearToTexture
    
        typedef int ( *LinearToTexture_function_type )( float );
        
        bp::def( 
            "LinearToTexture"
            , LinearToTexture_function_type( &::LinearToTexture )
            , ( bp::arg("f") ) );
    
    }

    { //::LinearToVertexLight
    
        typedef float ( *LinearToVertexLight_function_type )( float );
        
        bp::def( 
            "LinearToVertexLight"
            , LinearToVertexLight_function_type( &::LinearToVertexLight )
            , ( bp::arg("f") ) );
    
    }

    { //::MatricesAreEqual
    
        typedef bool ( *MatricesAreEqual_function_type )( ::VMatrix const &,::VMatrix const &,float );
        
        bp::def( 
            "MatricesAreEqual"
            , MatricesAreEqual_function_type( &::MatricesAreEqual )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("flTolerance") ) );
    
    }

    { //::MatricesAreEqual
    
        typedef bool ( *MatricesAreEqual_function_type )( ::matrix3x4_t const &,::matrix3x4_t const &,float );
        
        bp::def( 
            "MatricesAreEqual"
            , MatricesAreEqual_function_type( &::MatricesAreEqual )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("flTolerance")=1.00000000000000008180305391403130954586231382564e-5 ) );
    
    }

    { //::MatrixAngles
    
        typedef void ( *MatrixAngles_function_type )( ::matrix3x4_t const &,::Quaternion &,::Vector & );
        
        bp::def( 
            "MatrixAngles"
            , MatrixAngles_function_type( &::MatrixAngles )
            , ( bp::arg("mat"), bp::arg("q"), bp::arg("position") ) );
    
    }

    { //::MatrixAngles
    
        typedef void ( *MatrixAngles_function_type )( ::matrix3x4_t const &,::RadianEuler &,::Vector & );
        
        bp::def( 
            "MatrixAngles"
            , MatrixAngles_function_type( &::MatrixAngles )
            , ( bp::arg("mat"), bp::arg("angles"), bp::arg("position") ) );
    
    }

    { //::MatrixAngles
    
        typedef void ( *MatrixAngles_function_type )( ::matrix3x4_t const &,::RadianEuler & );
        
        bp::def( 
            "MatrixAngles"
            , MatrixAngles_function_type( &::MatrixAngles )
            , ( bp::arg("matrix"), bp::arg("angles") ) );
    
    }

    { //::MatrixAngles
    
        typedef void ( *MatrixAngles_function_type )( ::matrix3x4_t const &,::QAngle &,::Vector & );
        
        bp::def( 
            "MatrixAngles"
            , MatrixAngles_function_type( &::MatrixAngles )
            , ( bp::arg("matrix"), bp::arg("angles"), bp::arg("position") ) );
    
    }

    { //::MatrixAngles
    
        typedef void ( *MatrixAngles_function_type )( ::matrix3x4_t const &,::QAngle & );
        
        bp::def( 
            "MatrixAngles"
            , MatrixAngles_function_type( &::MatrixAngles )
            , ( bp::arg("matrix"), bp::arg("angles") ) );
    
    }

    { //::MatrixBuildRotateZ
    
        typedef void ( *MatrixBuildRotateZ_function_type )( ::VMatrix &,float );
        
        bp::def( 
            "MatrixBuildRotateZ"
            , MatrixBuildRotateZ_function_type( &::MatrixBuildRotateZ )
            , ( bp::arg("dst"), bp::arg("angleDegrees") ) );
    
    }

    { //::MatrixBuildRotationAboutAxis
    
        typedef void ( *MatrixBuildRotationAboutAxis_function_type )( ::VMatrix &,::Vector const &,float );
        
        bp::def( 
            "MatrixBuildRotationAboutAxis"
            , MatrixBuildRotationAboutAxis_function_type( &::MatrixBuildRotationAboutAxis )
            , ( bp::arg("dst"), bp::arg("vAxisOfRot"), bp::arg("angleDegrees") ) );
    
    }

    { //::MatrixBuildRotationAboutAxis
    
        typedef void ( *MatrixBuildRotationAboutAxis_function_type )( ::Vector const &,float,::matrix3x4_t & );
        
        bp::def( 
            "MatrixBuildRotationAboutAxis"
            , MatrixBuildRotationAboutAxis_function_type( &::MatrixBuildRotationAboutAxis )
            , ( bp::arg("vAxisOfRot"), bp::arg("angleDegrees"), bp::arg("dst") ) );
    
    }

    { //::MatrixColumnDotProduct
    
        typedef float ( *MatrixColumnDotProduct_function_type )( ::matrix3x4_t const &,int,::Vector const & );
        
        bp::def( 
            "MatrixColumnDotProduct"
            , MatrixColumnDotProduct_function_type( &::MatrixColumnDotProduct )
            , ( bp::arg("in1"), bp::arg("col"), bp::arg("in2") ) );
    
    }

    { //::MatrixCopy
    
        typedef void ( *MatrixCopy_function_type )( ::VMatrix const &,::VMatrix & );
        
        bp::def( 
            "MatrixCopy"
            , MatrixCopy_function_type( &::MatrixCopy )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::MatrixCopy
    
        typedef void ( *MatrixCopy_function_type )( ::matrix3x4_t const &,::matrix3x4_t & );
        
        bp::def( 
            "MatrixCopy"
            , MatrixCopy_function_type( &::MatrixCopy )
            , ( bp::arg("in"), bp::arg("out") ) );
    
    }

    { //::MatrixFromAngles
    
        typedef void ( *MatrixFromAngles_function_type )( ::QAngle const &,::VMatrix & );
        
        bp::def( 
            "MatrixFromAngles"
            , MatrixFromAngles_function_type( &::MatrixFromAngles )
            , ( bp::arg("vAngles"), bp::arg("dst") ) );
    
    }

    { //::MatrixGetColumn
    
        typedef void ( *MatrixGetColumn_function_type )( ::VMatrix const &,int,::Vector * );
        
        bp::def( 
            "MatrixGetColumn"
            , MatrixGetColumn_function_type( &::MatrixGetColumn )
            , ( bp::arg("src"), bp::arg("nCol"), bp::arg("pColumn") ) );
    
    }

    { //::MatrixGetColumn
    
        typedef void ( *MatrixGetColumn_function_type )( ::matrix3x4_t const &,int,::Vector & );
        
        bp::def( 
            "MatrixGetColumn"
            , MatrixGetColumn_function_type( &::MatrixGetColumn )
            , ( bp::arg("in"), bp::arg("column"), bp::arg("out") ) );
    
    }

    { //::MatrixGetRow
    
        typedef void ( *MatrixGetRow_function_type )( ::VMatrix const &,int,::Vector * );
        
        bp::def( 
            "MatrixGetRow"
            , MatrixGetRow_function_type( &::MatrixGetRow )
            , ( bp::arg("src"), bp::arg("nRow"), bp::arg("pRow") ) );
    
    }

    { //::MatrixITransformPlane
    
        typedef void ( *MatrixITransformPlane_function_type )( ::matrix3x4_t const &,::cplane_t const &,::cplane_t & );
        
        bp::def( 
            "MatrixITransformPlane"
            , MatrixITransformPlane_function_type( &::MatrixITransformPlane )
            , ( bp::arg("src"), bp::arg("inPlane"), bp::arg("outPlane") ) );
    
    }

    { //::MatrixInitialize
    
        typedef void ( *MatrixInitialize_function_type )( ::matrix3x4_t &,::Vector const &,::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "MatrixInitialize"
            , MatrixInitialize_function_type( &::MatrixInitialize )
            , ( bp::arg("mat"), bp::arg("vecOrigin"), bp::arg("vecXAxis"), bp::arg("vecYAxis"), bp::arg("vecZAxis") ) );
    
    }

    { //::MatrixInverseTranspose
    
        typedef void ( *MatrixInverseTranspose_function_type )( ::VMatrix const &,::VMatrix & );
        
        bp::def( 
            "MatrixInverseTranspose"
            , MatrixInverseTranspose_function_type( &::MatrixInverseTranspose )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::MatrixInverseTranspose
    
        typedef void ( *MatrixInverseTranspose_function_type )( ::matrix3x4_t const &,::matrix3x4_t & );
        
        bp::def( 
            "MatrixInverseTranspose"
            , MatrixInverseTranspose_function_type( &::MatrixInverseTranspose )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::MatrixInvert
    
        typedef void ( *MatrixInvert_function_type )( ::matrix3x4_t const &,::matrix3x4_t & );
        
        bp::def( 
            "MatrixInvert"
            , MatrixInvert_function_type( &::MatrixInvert )
            , ( bp::arg("in"), bp::arg("out") ) );
    
    }

    { //::MatrixMultiply
    
        typedef void ( *MatrixMultiply_function_type )( ::VMatrix const &,::VMatrix const &,::VMatrix & );
        
        bp::def( 
            "MatrixMultiply"
            , MatrixMultiply_function_type( &::MatrixMultiply )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("dst") ) );
    
    }

    { //::MatrixMultiply
    
        typedef void ( *MatrixMultiply_function_type )( ::matrix3x4_t const &,::matrix3x4_t const &,::matrix3x4_t & );
        
        bp::def( 
            "MatrixMultiply"
            , MatrixMultiply_function_type( &::MatrixMultiply )
            , ( bp::arg("in1"), bp::arg("in2"), bp::arg("out") ) );
    
    }

    { //::MatrixPosition
    
        typedef void ( *MatrixPosition_function_type )( ::matrix3x4_t const &,::Vector & );
        
        bp::def( 
            "MatrixPosition"
            , MatrixPosition_function_type( &::MatrixPosition )
            , ( bp::arg("matrix"), bp::arg("position") ) );
    
    }

    { //::MatrixQuaternion
    
        typedef void ( *MatrixQuaternion_function_type )( ::matrix3x4_t const &,::Quaternion & );
        
        bp::def( 
            "MatrixQuaternion"
            , MatrixQuaternion_function_type( &::MatrixQuaternion )
            , ( bp::arg("mat"), bp::arg("q") ) );
    
    }

    { //::MatrixRotate
    
        typedef void ( *MatrixRotate_function_type )( ::VMatrix &,::Vector const &,float );
        
        bp::def( 
            "MatrixRotate"
            , MatrixRotate_function_type( &::MatrixRotate )
            , ( bp::arg("dst"), bp::arg("vAxisOfRot"), bp::arg("angleDegrees") ) );
    
    }

    { //::MatrixRowDotProduct
    
        typedef float ( *MatrixRowDotProduct_function_type )( ::matrix3x4_t const &,int,::Vector const & );
        
        bp::def( 
            "MatrixRowDotProduct"
            , MatrixRowDotProduct_function_type( &::MatrixRowDotProduct )
            , ( bp::arg("in1"), bp::arg("row"), bp::arg("in2") ) );
    
    }

    { //::MatrixSetColumn
    
        typedef void ( *MatrixSetColumn_function_type )( ::VMatrix &,int,::Vector const & );
        
        bp::def( 
            "MatrixSetColumn"
            , MatrixSetColumn_function_type( &::MatrixSetColumn )
            , ( bp::arg("src"), bp::arg("nCol"), bp::arg("column") ) );
    
    }

    { //::MatrixSetColumn
    
        typedef void ( *MatrixSetColumn_function_type )( ::Vector const &,int,::matrix3x4_t & );
        
        bp::def( 
            "MatrixSetColumn"
            , MatrixSetColumn_function_type( &::MatrixSetColumn )
            , ( bp::arg("in"), bp::arg("column"), bp::arg("out") ) );
    
    }

    { //::MatrixSetIdentity
    
        typedef void ( *MatrixSetIdentity_function_type )( ::VMatrix & );
        
        bp::def( 
            "MatrixSetIdentity"
            , MatrixSetIdentity_function_type( &::MatrixSetIdentity )
            , ( bp::arg("dst") ) );
    
    }

    { //::MatrixSetRow
    
        typedef void ( *MatrixSetRow_function_type )( ::VMatrix &,int,::Vector const & );
        
        bp::def( 
            "MatrixSetRow"
            , MatrixSetRow_function_type( &::MatrixSetRow )
            , ( bp::arg("dst"), bp::arg("nRow"), bp::arg("row") ) );
    
    }

    { //::MatrixToAngles
    
        typedef void ( *MatrixToAngles_function_type )( ::VMatrix const &,::QAngle & );
        
        bp::def( 
            "MatrixToAngles"
            , MatrixToAngles_function_type( &::MatrixToAngles )
            , ( bp::arg("src"), bp::arg("vAngles") ) );
    
    }

    { //::MatrixTransformPlane
    
        typedef void ( *MatrixTransformPlane_function_type )( ::VMatrix const &,::cplane_t const &,::cplane_t & );
        
        bp::def( 
            "MatrixTransformPlane"
            , MatrixTransformPlane_function_type( &::MatrixTransformPlane )
            , ( bp::arg("src"), bp::arg("inPlane"), bp::arg("outPlane") ) );
    
    }

    { //::MatrixTransformPlane
    
        typedef void ( *MatrixTransformPlane_function_type )( ::matrix3x4_t const &,::cplane_t const &,::cplane_t & );
        
        bp::def( 
            "MatrixTransformPlane"
            , MatrixTransformPlane_function_type( &::MatrixTransformPlane )
            , ( bp::arg("src"), bp::arg("inPlane"), bp::arg("outPlane") ) );
    
    }

    { //::MatrixTranslate
    
        typedef void ( *MatrixTranslate_function_type )( ::VMatrix &,::Vector const & );
        
        bp::def( 
            "MatrixTranslate"
            , MatrixTranslate_function_type( &::MatrixTranslate )
            , ( bp::arg("dst"), bp::arg("translation") ) );
    
    }

    { //::MatrixTranspose
    
        typedef void ( *MatrixTranspose_function_type )( ::VMatrix const &,::VMatrix & );
        
        bp::def( 
            "MatrixTranspose"
            , MatrixTranspose_function_type( &::MatrixTranspose )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::MatrixTranspose
    
        typedef void ( *MatrixTranspose_function_type )( ::matrix3x4_t const &,::matrix3x4_t & );
        
        bp::def( 
            "MatrixTranspose"
            , MatrixTranspose_function_type( &::MatrixTranspose )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::MatrixTranspose
    
        typedef void ( *MatrixTranspose_function_type )( ::matrix3x4_t & );
        
        bp::def( 
            "MatrixTranspose"
            , MatrixTranspose_function_type( &::MatrixTranspose )
            , ( bp::arg("mat") ) );
    
    }

    { //::MatrixVectors
    
        typedef void ( *MatrixVectors_function_type )( ::matrix3x4_t const &,::Vector *,::Vector *,::Vector * );
        
        bp::def( 
            "MatrixVectors"
            , MatrixVectors_function_type( &::MatrixVectors )
            , ( bp::arg("matrix"), bp::arg("pForward"), bp::arg("pRight"), bp::arg("pUp") ) );
    
    }

    { //::Parabolic_Spline
    
        typedef void ( *Parabolic_Spline_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Parabolic_Spline"
            , Parabolic_Spline_function_type( &::Parabolic_Spline )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::Parabolic_Spline_NormalizeX
    
        typedef void ( *Parabolic_Spline_NormalizeX_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,float,::Vector & );
        
        bp::def( 
            "Parabolic_Spline_NormalizeX"
            , Parabolic_Spline_NormalizeX_function_type( &::Parabolic_Spline_NormalizeX )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3"), bp::arg("p4"), bp::arg("t"), bp::arg("output") ) );
    
    }

    { //::PolyFromPlane
    
        typedef int ( *PolyFromPlane_function_type )( ::Vector *,::Vector const &,float,float );
        
        bp::def( 
            "PolyFromPlane"
            , PolyFromPlane_function_type( &::PolyFromPlane )
            , ( bp::arg("outVerts"), bp::arg("normal"), bp::arg("dist"), bp::arg("fHalfScale")=9.0e+3f ) );
    
    }

    { //::PositionMatrix
    
        typedef void ( *PositionMatrix_function_type )( ::Vector const &,::matrix3x4_t & );
        
        bp::def( 
            "PositionMatrix"
            , PositionMatrix_function_type( &::PositionMatrix )
            , ( bp::arg("position"), bp::arg("mat") ) );
    
    }

    { //::QAnglesAreEqual
    
        typedef bool ( *QAnglesAreEqual_function_type )( ::QAngle const &,::QAngle const &,float );
        
        bp::def( 
            "QAnglesAreEqual"
            , QAnglesAreEqual_function_type( &::QAnglesAreEqual )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("tolerance")=0.0f ) );
    
    }

    { //::Q_log2
    
        typedef int ( *Q_log2_function_type )( int );
        
        bp::def( 
            "Q_log2"
            , Q_log2_function_type( &::Q_log2 )
            , ( bp::arg("val") ) );
    
    }

    { //::QuaternionAdd
    
        typedef void ( *QuaternionAdd_function_type )( ::Quaternion const &,::Quaternion const &,::Quaternion & );
        
        bp::def( 
            "QuaternionAdd"
            , QuaternionAdd_function_type( &::QuaternionAdd )
            , ( bp::arg("p"), bp::arg("q"), bp::arg("qt") ) );
    
    }

    { //::QuaternionAngleDiff
    
        typedef float ( *QuaternionAngleDiff_function_type )( ::Quaternion const &,::Quaternion const & );
        
        bp::def( 
            "QuaternionAngleDiff"
            , QuaternionAngleDiff_function_type( &::QuaternionAngleDiff )
            , ( bp::arg("p"), bp::arg("q") ) );
    
    }

    { //::QuaternionAngles
    
        typedef void ( *QuaternionAngles_function_type )( ::Quaternion const &,::QAngle & );
        
        bp::def( 
            "QuaternionAngles"
            , QuaternionAngles_function_type( &::QuaternionAngles )
            , ( bp::arg("q"), bp::arg("angles") ) );
    
    }

    { //::QuaternionAngles
    
        typedef void ( *QuaternionAngles_function_type )( ::Quaternion const &,::RadianEuler & );
        
        bp::def( 
            "QuaternionAngles"
            , QuaternionAngles_function_type( &::QuaternionAngles )
            , ( bp::arg("q"), bp::arg("angles") ) );
    
    }

    { //::QuaternionAxisAngle
    
        typedef boost::python::tuple ( *QuaternionAxisAngle_function_type )( ::Quaternion const & );
        
        bp::def( 
            "QuaternionAxisAngle"
            , QuaternionAxisAngle_function_type( &QuaternionAxisAngle_1aeb858644987511f87d26402e6d7dc8 )
            , ( bp::arg("q") ) );
    
    }

    { //::QuaternionBlend
    
        typedef void ( *QuaternionBlend_function_type )( ::Quaternion const &,::Quaternion const &,float,::Quaternion & );
        
        bp::def( 
            "QuaternionBlend"
            , QuaternionBlend_function_type( &::QuaternionBlend )
            , ( bp::arg("p"), bp::arg("q"), bp::arg("t"), bp::arg("qt") ) );
    
    }

    { //::QuaternionBlendNoAlign
    
        typedef void ( *QuaternionBlendNoAlign_function_type )( ::Quaternion const &,::Quaternion const &,float,::Quaternion & );
        
        bp::def( 
            "QuaternionBlendNoAlign"
            , QuaternionBlendNoAlign_function_type( &::QuaternionBlendNoAlign )
            , ( bp::arg("p"), bp::arg("q"), bp::arg("t"), bp::arg("qt") ) );
    
    }

    { //::QuaternionConjugate
    
        typedef void ( *QuaternionConjugate_function_type )( ::Quaternion const &,::Quaternion & );
        
        bp::def( 
            "QuaternionConjugate"
            , QuaternionConjugate_function_type( &::QuaternionConjugate )
            , ( bp::arg("p"), bp::arg("q") ) );
    
    }

    { //::QuaternionDotProduct
    
        typedef float ( *QuaternionDotProduct_function_type )( ::Quaternion const &,::Quaternion const & );
        
        bp::def( 
            "QuaternionDotProduct"
            , QuaternionDotProduct_function_type( &::QuaternionDotProduct )
            , ( bp::arg("p"), bp::arg("q") ) );
    
    }

    { //::QuaternionIdentityBlend
    
        typedef void ( *QuaternionIdentityBlend_function_type )( ::Quaternion const &,float,::Quaternion & );
        
        bp::def( 
            "QuaternionIdentityBlend"
            , QuaternionIdentityBlend_function_type( &::QuaternionIdentityBlend )
            , ( bp::arg("p"), bp::arg("t"), bp::arg("qt") ) );
    
    }

    { //::QuaternionInvert
    
        typedef void ( *QuaternionInvert_function_type )( ::Quaternion const &,::Quaternion & );
        
        bp::def( 
            "QuaternionInvert"
            , QuaternionInvert_function_type( &::QuaternionInvert )
            , ( bp::arg("p"), bp::arg("q") ) );
    
    }

    { //::QuaternionMatrix
    
        typedef void ( *QuaternionMatrix_function_type )( ::Quaternion const &,::Vector const &,::matrix3x4_t & );
        
        bp::def( 
            "QuaternionMatrix"
            , QuaternionMatrix_function_type( &::QuaternionMatrix )
            , ( bp::arg("q"), bp::arg("pos"), bp::arg("matrix") ) );
    
    }

    { //::QuaternionMatrix
    
        typedef void ( *QuaternionMatrix_function_type )( ::Quaternion const &,::matrix3x4_t & );
        
        bp::def( 
            "QuaternionMatrix"
            , QuaternionMatrix_function_type( &::QuaternionMatrix )
            , ( bp::arg("q"), bp::arg("matrix") ) );
    
    }

    { //::QuaternionMult
    
        typedef void ( *QuaternionMult_function_type )( ::Quaternion const &,::Quaternion const &,::Quaternion & );
        
        bp::def( 
            "QuaternionMult"
            , QuaternionMult_function_type( &::QuaternionMult )
            , ( bp::arg("p"), bp::arg("q"), bp::arg("qt") ) );
    
    }

    { //::QuaternionNormalize
    
        typedef float ( *QuaternionNormalize_function_type )( ::Quaternion & );
        
        bp::def( 
            "QuaternionNormalize"
            , QuaternionNormalize_function_type( &::QuaternionNormalize )
            , ( bp::arg("q") ) );
    
    }

    { //::QuaternionScale
    
        typedef void ( *QuaternionScale_function_type )( ::Quaternion const &,float,::Quaternion & );
        
        bp::def( 
            "QuaternionScale"
            , QuaternionScale_function_type( &::QuaternionScale )
            , ( bp::arg("p"), bp::arg("t"), bp::arg("q") ) );
    
    }

    { //::QuaternionSlerp
    
        typedef void ( *QuaternionSlerp_function_type )( ::Quaternion const &,::Quaternion const &,float,::Quaternion & );
        
        bp::def( 
            "QuaternionSlerp"
            , QuaternionSlerp_function_type( &::QuaternionSlerp )
            , ( bp::arg("p"), bp::arg("q"), bp::arg("t"), bp::arg("qt") ) );
    
    }

    { //::QuaternionSlerpNoAlign
    
        typedef void ( *QuaternionSlerpNoAlign_function_type )( ::Quaternion const &,::Quaternion const &,float,::Quaternion & );
        
        bp::def( 
            "QuaternionSlerpNoAlign"
            , QuaternionSlerpNoAlign_function_type( &::QuaternionSlerpNoAlign )
            , ( bp::arg("p"), bp::arg("q"), bp::arg("t"), bp::arg("qt") ) );
    
    }

    { //::QuickBoxIntersectTest
    
        typedef bool ( *QuickBoxIntersectTest_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const & );
        
        bp::def( 
            "QuickBoxIntersectTest"
            , QuickBoxIntersectTest_function_type( &::QuickBoxIntersectTest )
            , ( bp::arg("vBox1Min"), bp::arg("vBox1Max"), bp::arg("vBox2Min"), bp::arg("vBox2Max") ) );
    
    }

    { //::QuickBoxSphereTest
    
        typedef bool ( *QuickBoxSphereTest_function_type )( ::Vector const &,float,::Vector const &,::Vector const & );
        
        bp::def( 
            "QuickBoxSphereTest"
            , QuickBoxSphereTest_function_type( &::QuickBoxSphereTest )
            , ( bp::arg("vOrigin"), bp::arg("flRadius"), bp::arg("bbMin"), bp::arg("bbMax") ) );
    
    }

    { //::QuinticInterpolatingPolynomial
    
        typedef float ( *QuinticInterpolatingPolynomial_function_type )( float );
        
        bp::def( 
            "QuinticInterpolatingPolynomial"
            , QuinticInterpolatingPolynomial_function_type( &::QuinticInterpolatingPolynomial )
            , ( bp::arg("t") ) );
    
    }

    { //::RGBtoHSV
    
        typedef void ( *RGBtoHSV_function_type )( ::Vector const &,::Vector & );
        
        bp::def( 
            "RGBtoHSV"
            , RGBtoHSV_function_type( &::RGBtoHSV )
            , ( bp::arg("rgb"), bp::arg("hsv") ) );
    
    }

    { //::RandomAngle
    
        typedef ::QAngle ( *RandomAngle_function_type )( float,float );
        
        bp::def( 
            "RandomAngle"
            , RandomAngle_function_type( &::RandomAngle )
            , ( bp::arg("minVal"), bp::arg("maxVal") ) );
    
    }

    { //::RandomAngularImpulse
    
        typedef ::AngularImpulse ( *RandomAngularImpulse_function_type )( float,float );
        
        bp::def( 
            "RandomAngularImpulse"
            , RandomAngularImpulse_function_type( &::RandomAngularImpulse )
            , ( bp::arg("minVal"), bp::arg("maxVal") ) );
    
    }

    { //::RandomVector
    
        typedef ::Vector ( *RandomVector_function_type )( float,float );
        
        bp::def( 
            "RandomVector"
            , RandomVector_function_type( &::RandomVector )
            , ( bp::arg("minVal"), bp::arg("maxVal") ) );
    
    }

    { //::RangeCompressor
    
        typedef float ( *RangeCompressor_function_type )( float,float,float,float );
        
        bp::def( 
            "RangeCompressor"
            , RangeCompressor_function_type( &::RangeCompressor )
            , ( bp::arg("flValue"), bp::arg("flMin"), bp::arg("flMax"), bp::arg("flBase") ) );
    
    }

    { //::RemapVal
    
        typedef float ( *RemapVal_function_type )( float,float,float,float,float );
        
        bp::def( 
            "RemapVal"
            , RemapVal_function_type( &::RemapVal )
            , ( bp::arg("val"), bp::arg("A"), bp::arg("B"), bp::arg("C"), bp::arg("D") ) );
    
    }

    { //::RemapValClamped
    
        typedef float ( *RemapValClamped_function_type )( float,float,float,float,float );
        
        bp::def( 
            "RemapValClamped"
            , RemapValClamped_function_type( &::RemapValClamped )
            , ( bp::arg("val"), bp::arg("A"), bp::arg("B"), bp::arg("C"), bp::arg("D") ) );
    
    }

    { //::RotateAABB
    
        typedef void ( *RotateAABB_function_type )( ::matrix3x4_t const &,::Vector const &,::Vector const &,::Vector &,::Vector & );
        
        bp::def( 
            "RotateAABB"
            , RotateAABB_function_type( &::RotateAABB )
            , ( bp::arg("in1"), bp::arg("vecMinsIn"), bp::arg("vecMaxsIn"), bp::arg("vecMinsOut"), bp::arg("vecMaxsOut") ) );
    
    }

    { //::RotationDelta
    
        typedef void ( *RotationDelta_function_type )( ::QAngle const &,::QAngle const &,::QAngle * );
        
        bp::def( 
            "RotationDelta"
            , RotationDelta_function_type( &::RotationDelta )
            , ( bp::arg("srcAngles"), bp::arg("destAngles"), bp::arg("out") ) );
    
    }

    { //::RotationDeltaAxisAngle
    
        typedef boost::python::tuple ( *RotationDeltaAxisAngle_function_type )( ::QAngle const &,::QAngle const & );
        
        bp::def( 
            "RotationDeltaAxisAngle"
            , RotationDeltaAxisAngle_function_type( &RotationDeltaAxisAngle_115cc0d1cdab06a8b09f189b0b486926 )
            , ( bp::arg("srcAngles"), bp::arg("destAngles") ) );
    
    }

    { //::RoundFloatToByte
    
        typedef unsigned char ( *RoundFloatToByte_function_type )( float );
        
        bp::def( 
            "RoundFloatToByte"
            , RoundFloatToByte_function_type( &::RoundFloatToByte )
            , ( bp::arg("f") ) );
    
    }

    { //::RoundFloatToInt
    
        typedef int ( *RoundFloatToInt_function_type )( float );
        
        bp::def( 
            "RoundFloatToInt"
            , RoundFloatToInt_function_type( &::RoundFloatToInt )
            , ( bp::arg("f") ) );
    
    }

    { //::RoundFloatToUnsignedLong
    
        typedef long unsigned int ( *RoundFloatToUnsignedLong_function_type )( float );
        
        bp::def( 
            "RoundFloatToUnsignedLong"
            , RoundFloatToUnsignedLong_function_type( &::RoundFloatToUnsignedLong )
            , ( bp::arg("f") ) );
    
    }

    { //::RoundInt
    
        typedef ::vec_t ( *RoundInt_function_type )( ::vec_t );
        
        bp::def( 
            "RoundInt"
            , RoundInt_function_type( &::RoundInt )
            , ( bp::arg("in") ) );
    
    }

    { //::SetIdentityMatrix
    
        typedef void ( *SetIdentityMatrix_function_type )( ::matrix3x4_t & );
        
        bp::def( 
            "SetIdentityMatrix"
            , SetIdentityMatrix_function_type( &::SetIdentityMatrix )
            , ( bp::arg("mat") ) );
    
    }

    { //::SetScaleMatrix
    
        typedef void ( *SetScaleMatrix_function_type )( ::Vector const &,::matrix3x4_t & );
        
        bp::def( 
            "SetScaleMatrix"
            , SetScaleMatrix_function_type( &::SetScaleMatrix )
            , ( bp::arg("scale"), bp::arg("dst") ) );
    
    }

    { //::SetScaleMatrix
    
        typedef void ( *SetScaleMatrix_function_type )( float,::matrix3x4_t & );
        
        bp::def( 
            "SetScaleMatrix"
            , SetScaleMatrix_function_type( &::SetScaleMatrix )
            , ( bp::arg("flScale"), bp::arg("dst") ) );
    
    }

    { //::SetScaleMatrix
    
        typedef void ( *SetScaleMatrix_function_type )( float,float,float,::matrix3x4_t & );
        
        bp::def( 
            "SetScaleMatrix"
            , SetScaleMatrix_function_type( &::SetScaleMatrix )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("dst") ) );
    
    }

    { //::Sign
    
        typedef float ( *Sign_function_type )( float );
        
        bp::def( 
            "Sign"
            , Sign_function_type( &::Sign )
            , ( bp::arg("x") ) );
    
    }

    { //::SimpleSpline
    
        typedef float ( *SimpleSpline_function_type )( float );
        
        bp::def( 
            "SimpleSpline"
            , SimpleSpline_function_type( &::SimpleSpline )
            , ( bp::arg("value") ) );
    
    }

    { //::SimpleSplineRemapVal
    
        typedef float ( *SimpleSplineRemapVal_function_type )( float,float,float,float,float );
        
        bp::def( 
            "SimpleSplineRemapVal"
            , SimpleSplineRemapVal_function_type( &::SimpleSplineRemapVal )
            , ( bp::arg("val"), bp::arg("A"), bp::arg("B"), bp::arg("C"), bp::arg("D") ) );
    
    }

    { //::SimpleSplineRemapValClamped
    
        typedef float ( *SimpleSplineRemapValClamped_function_type )( float,float,float,float,float );
        
        bp::def( 
            "SimpleSplineRemapValClamped"
            , SimpleSplineRemapValClamped_function_type( &::SimpleSplineRemapValClamped )
            , ( bp::arg("val"), bp::arg("A"), bp::arg("B"), bp::arg("C"), bp::arg("D") ) );
    
    }

    { //::SmallestPowerOfTwoGreaterOrEqual
    
        typedef ::uint ( *SmallestPowerOfTwoGreaterOrEqual_function_type )( ::uint );
        
        bp::def( 
            "SmallestPowerOfTwoGreaterOrEqual"
            , SmallestPowerOfTwoGreaterOrEqual_function_type( &::SmallestPowerOfTwoGreaterOrEqual )
            , ( bp::arg("x") ) );
    
    }

    { //::SmoothCurve
    
        typedef float ( *SmoothCurve_function_type )( float );
        
        bp::def( 
            "SmoothCurve"
            , SmoothCurve_function_type( &::SmoothCurve )
            , ( bp::arg("x") ) );
    
    }

    { //::SmoothCurve_Tweak
    
        typedef float ( *SmoothCurve_Tweak_function_type )( float,float,float );
        
        bp::def( 
            "SmoothCurve_Tweak"
            , SmoothCurve_Tweak_function_type( &::SmoothCurve_Tweak )
            , ( bp::arg("x"), bp::arg("flPeakPos")=5.0e-1, bp::arg("flPeakSharpness")=5.0e-1 ) );
    
    }

    { //::SolveInverseQuadratic
    
        typedef boost::python::tuple ( *SolveInverseQuadratic_function_type )( float,float,float,float,float,float );
        
        bp::def( 
            "SolveInverseQuadratic"
            , SolveInverseQuadratic_function_type( &SolveInverseQuadratic_a961cf4fc5c78184b9bbe209d40b79e5 )
            , ( bp::arg("x1"), bp::arg("y1"), bp::arg("x2"), bp::arg("y2"), bp::arg("x3"), bp::arg("y3") ) );
    
    }

    { //::SolveInverseQuadraticMonotonic
    
        typedef boost::python::tuple ( *SolveInverseQuadraticMonotonic_function_type )( float,float,float,float,float,float );
        
        bp::def( 
            "SolveInverseQuadraticMonotonic"
            , SolveInverseQuadraticMonotonic_function_type( &SolveInverseQuadraticMonotonic_7d4ba4b0f2e21d9213defa1a459f1d80 )
            , ( bp::arg("x1"), bp::arg("y1"), bp::arg("x2"), bp::arg("y2"), bp::arg("x3"), bp::arg("y3") ) );
    
    }

    { //::SolveInverseReciprocalQuadratic
    
        typedef boost::python::tuple ( *SolveInverseReciprocalQuadratic_function_type )( float,float,float,float,float,float );
        
        bp::def( 
            "SolveInverseReciprocalQuadratic"
            , SolveInverseReciprocalQuadratic_function_type( &SolveInverseReciprocalQuadratic_57f0efe0eaad2db1faf78c8edcc7d0e6 )
            , ( bp::arg("x1"), bp::arg("y1"), bp::arg("x2"), bp::arg("y2"), bp::arg("x3"), bp::arg("y3") ) );
    
    }

    { //::SolveQuadratic
    
        typedef boost::python::tuple ( *SolveQuadratic_function_type )( float,float,float );
        
        bp::def( 
            "SolveQuadratic"
            , SolveQuadratic_function_type( &SolveQuadratic_31ef7b9460cfa222a08c796ffdd4ca0a )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::Sqr
    
        typedef float ( *Sqr_function_type )( float );
        
        bp::def( 
            "Sqr"
            , Sqr_function_type( &::Sqr )
            , ( bp::arg("f") ) );
    
    }

    { //::SrgbGammaTo360Gamma
    
        typedef float ( *SrgbGammaTo360Gamma_function_type )( float );
        
        bp::def( 
            "SrgbGammaTo360Gamma"
            , SrgbGammaTo360Gamma_function_type( &::SrgbGammaTo360Gamma )
            , ( bp::arg("flSrgbGammaValue") ) );
    
    }

    { //::SrgbGammaToLinear
    
        typedef float ( *SrgbGammaToLinear_function_type )( float );
        
        bp::def( 
            "SrgbGammaToLinear"
            , SrgbGammaToLinear_function_type( &::SrgbGammaToLinear )
            , ( bp::arg("flSrgbGammaValue") ) );
    
    }

    { //::SrgbLinearToGamma
    
        typedef float ( *SrgbLinearToGamma_function_type )( float );
        
        bp::def( 
            "SrgbLinearToGamma"
            , SrgbLinearToGamma_function_type( &::SrgbLinearToGamma )
            , ( bp::arg("flLinearValue") ) );
    
    }

    { //::TableCos
    
        typedef float ( *TableCos_function_type )( float );
        
        bp::def( 
            "TableCos"
            , TableCos_function_type( &::TableCos )
            , ( bp::arg("theta") ) );
    
    }

    { //::TableSin
    
        typedef float ( *TableSin_function_type )( float );
        
        bp::def( 
            "TableSin"
            , TableSin_function_type( &::TableSin )
            , ( bp::arg("theta") ) );
    
    }

    { //::TexLightToLinear
    
        typedef float ( *TexLightToLinear_function_type )( int,int );
        
        bp::def( 
            "TexLightToLinear"
            , TexLightToLinear_function_type( &::TexLightToLinear )
            , ( bp::arg("c"), bp::arg("exponent") ) );
    
    }

    { //::TextureToLinear
    
        typedef float ( *TextureToLinear_function_type )( int );
        
        bp::def( 
            "TextureToLinear"
            , TextureToLinear_function_type( &::TextureToLinear )
            , ( bp::arg("c") ) );
    
    }

    { //::TransformAABB
    
        typedef void ( *TransformAABB_function_type )( ::matrix3x4_t const &,::Vector const &,::Vector const &,::Vector &,::Vector & );
        
        bp::def( 
            "TransformAABB"
            , TransformAABB_function_type( &::TransformAABB )
            , ( bp::arg("in1"), bp::arg("vecMinsIn"), bp::arg("vecMaxsIn"), bp::arg("vecMinsOut"), bp::arg("vecMaxsOut") ) );
    
    }

    { //::TransformAnglesToLocalSpace
    
        typedef ::QAngle ( *TransformAnglesToLocalSpace_function_type )( ::QAngle const &,::matrix3x4_t const & );
        
        bp::def( 
            "TransformAnglesToLocalSpace"
            , TransformAnglesToLocalSpace_function_type( &::TransformAnglesToLocalSpace )
            , ( bp::arg("angles"), bp::arg("parentMatrix") ) );
    
    }

    { //::Vector2DAdd
    
        typedef void ( *Vector2DAdd_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "Vector2DAdd"
            , Vector2DAdd_function_type( &::Vector2DAdd )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::Vector2DClear
    
        typedef void ( *Vector2DClear_function_type )( ::Vector2D & );
        
        bp::def( 
            "Vector2DClear"
            , Vector2DClear_function_type( &::Vector2DClear )
            , ( bp::arg("a") ) );
    
    }

    { //::Vector2DCopy
    
        typedef void ( *Vector2DCopy_function_type )( ::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "Vector2DCopy"
            , Vector2DCopy_function_type( &::Vector2DCopy )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::Vector2DDivide
    
        typedef void ( *Vector2DDivide_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "Vector2DDivide"
            , Vector2DDivide_function_type( &::Vector2DDivide )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::Vector2DDivide
    
        typedef void ( *Vector2DDivide_function_type )( ::Vector2D const &,::vec_t,::Vector2D & );
        
        bp::def( 
            "Vector2DDivide"
            , Vector2DDivide_function_type( &::Vector2DDivide )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::Vector2DLength
    
        typedef ::vec_t ( *Vector2DLength_function_type )( ::Vector2D const & );
        
        bp::def( 
            "Vector2DLength"
            , Vector2DLength_function_type( &::Vector2DLength )
            , ( bp::arg("v") ) );
    
    }

    { //::Vector2DLerp
    
        typedef void ( *Vector2DLerp_function_type )( ::Vector2D const &,::Vector2D const &,::vec_t,::Vector2D & );
        
        bp::def( 
            "Vector2DLerp"
            , Vector2DLerp_function_type( &::Vector2DLerp )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("t"), bp::arg("dest") ) );
    
    }

    { //::Vector2DMA
    
        typedef void ( *Vector2DMA_function_type )( ::Vector2D const &,float,::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "Vector2DMA"
            , Vector2DMA_function_type( &::Vector2DMA )
            , ( bp::arg("start"), bp::arg("s"), bp::arg("dir"), bp::arg("result") ) );
    
    }

    { //::Vector2DMax
    
        typedef void ( *Vector2DMax_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "Vector2DMax"
            , Vector2DMax_function_type( &::Vector2DMax )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("result") ) );
    
    }

    { //::Vector2DMin
    
        typedef void ( *Vector2DMin_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "Vector2DMin"
            , Vector2DMin_function_type( &::Vector2DMin )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("result") ) );
    
    }

    { //::Vector2DMultiply
    
        typedef void ( *Vector2DMultiply_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "Vector2DMultiply"
            , Vector2DMultiply_function_type( &::Vector2DMultiply )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::Vector2DMultiply
    
        typedef void ( *Vector2DMultiply_function_type )( ::Vector2D const &,::vec_t,::Vector2D & );
        
        bp::def( 
            "Vector2DMultiply"
            , Vector2DMultiply_function_type( &::Vector2DMultiply )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::Vector2DNormalize
    
        typedef ::vec_t ( *Vector2DNormalize_function_type )( ::Vector2D & );
        
        bp::def( 
            "Vector2DNormalize"
            , Vector2DNormalize_function_type( &::Vector2DNormalize )
            , ( bp::arg("v") ) );
    
    }

    { //::Vector2DSubtract
    
        typedef void ( *Vector2DSubtract_function_type )( ::Vector2D const &,::Vector2D const &,::Vector2D & );
        
        bp::def( 
            "Vector2DSubtract"
            , Vector2DSubtract_function_type( &::Vector2DSubtract )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::VectorAbs
    
        typedef void ( *VectorAbs_function_type )( ::Vector const &,::Vector & );
        
        bp::def( 
            "VectorAbs"
            , VectorAbs_function_type( &::VectorAbs )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::VectorAdd
    
        typedef void ( *VectorAdd_function_type )( ::vec_t const *,::vec_t const *,::vec_t * );
        
        bp::def( 
            "VectorAdd"
            , VectorAdd_function_type( &::VectorAdd )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::VectorAdd
    
        typedef void ( *VectorAdd_function_type )( ::QAngle const &,::QAngle const &,::QAngle & );
        
        bp::def( 
            "VectorAdd"
            , VectorAdd_function_type( &::VectorAdd )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("result") ) );
    
    }

    { //::VectorAdd
    
        typedef void ( *VectorAdd_function_type )( ::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "VectorAdd"
            , VectorAdd_function_type( &::VectorAdd )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::VectorAngles
    
        typedef void ( *VectorAngles_function_type )( ::Vector const &,::Vector const &,::QAngle & );
        
        bp::def( 
            "VectorAngles"
            , VectorAngles_function_type( &::VectorAngles )
            , ( bp::arg("forward"), bp::arg("pseudoup"), bp::arg("angles") ) );
    
    }

    { //::VectorAngles
    
        typedef void ( *VectorAngles_function_type )( ::Vector const &,::QAngle & );
        
        bp::def( 
            "VectorAngles"
            , VectorAngles_function_type( &::VectorAngles )
            , ( bp::arg("forward"), bp::arg("angles") ) );
    
    }

    { //::VectorAvg
    
        typedef ::vec_t ( *VectorAvg_function_type )( ::Vector & );
        
        bp::def( 
            "VectorAvg"
            , VectorAvg_function_type( &::VectorAvg )
            , ( bp::arg("a") ) );
    
    }

    { //::VectorClear
    
        typedef void ( *VectorClear_function_type )( ::vec_t * );
        
        bp::def( 
            "VectorClear"
            , VectorClear_function_type( &::VectorClear )
            , ( bp::arg("a") ) );
    
    }

    { //::VectorClear
    
        typedef void ( *VectorClear_function_type )( ::Vector & );
        
        bp::def( 
            "VectorClear"
            , VectorClear_function_type( &::VectorClear )
            , ( bp::arg("a") ) );
    
    }

    { //::VectorCompare
    
        typedef int ( *VectorCompare_function_type )( ::Vector const &,::Vector const & );
        
        bp::def( 
            "VectorCompare"
            , VectorCompare_function_type( &::VectorCompare )
            , ( bp::arg("v1"), bp::arg("v2") ) );
    
    }

    { //::VectorCopy
    
        typedef void ( *VectorCopy_function_type )( ::vec_t const *,::vec_t * );
        
        bp::def( 
            "VectorCopy"
            , VectorCopy_function_type( &::VectorCopy )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::VectorCopy
    
        typedef void ( *VectorCopy_function_type )( ::QAngle const &,::QAngle & );
        
        bp::def( 
            "VectorCopy"
            , VectorCopy_function_type( &::VectorCopy )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::VectorCopy
    
        typedef void ( *VectorCopy_function_type )( ::RadianEuler const &,::RadianEuler & );
        
        bp::def( 
            "VectorCopy"
            , VectorCopy_function_type( &::VectorCopy )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::VectorCopy
    
        typedef void ( *VectorCopy_function_type )( ::Vector const &,::Vector & );
        
        bp::def( 
            "VectorCopy"
            , VectorCopy_function_type( &::VectorCopy )
            , ( bp::arg("src"), bp::arg("dst") ) );
    
    }

    { //::VectorDivide
    
        typedef void ( *VectorDivide_function_type )( ::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "VectorDivide"
            , VectorDivide_function_type( &::VectorDivide )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::VectorDivide
    
        typedef void ( *VectorDivide_function_type )( ::Vector const &,::vec_t,::Vector & );
        
        bp::def( 
            "VectorDivide"
            , VectorDivide_function_type( &::VectorDivide )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::VectorFill
    
        typedef void ( *VectorFill_function_type )( ::Vector &,float );
        
        bp::def( 
            "VectorFill"
            , VectorFill_function_type( &::VectorFill )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::VectorFill
    
        typedef void ( *VectorFill_function_type )( ::vec_t *,float );
        
        bp::def( 
            "VectorFill"
            , VectorFill_function_type( &::VectorFill )
            , ( bp::arg("a"), bp::arg("b") ) );
    
    }

    { //::VectorIRotate
    
        typedef void ( *VectorIRotate_function_type )( ::Vector const &,::matrix3x4_t const &,::Vector & );
        
        bp::def( 
            "VectorIRotate"
            , VectorIRotate_function_type( &::VectorIRotate )
            , ( bp::arg("in1"), bp::arg("in2"), bp::arg("out") ) );
    
    }

    { //::VectorITransform
    
        typedef void ( *VectorITransform_function_type )( ::Vector const &,::matrix3x4_t const &,::Vector & );
        
        bp::def( 
            "VectorITransform"
            , VectorITransform_function_type( &::VectorITransform )
            , ( bp::arg("in1"), bp::arg("in2"), bp::arg("out") ) );
    
    }

    { //::VectorLength
    
        typedef ::vec_t ( *VectorLength_function_type )( ::Vector const & );
        
        bp::def( 
            "VectorLength"
            , VectorLength_function_type( &::VectorLength )
            , ( bp::arg("v") ) );
    
    }

    { //::VectorLerp
    
        typedef ::Vector ( *VectorLerp_function_type )( ::Vector const &,::Vector const &,::vec_t );
        
        bp::def( 
            "VectorLerp"
            , VectorLerp_function_type( &::VectorLerp )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("t") ) );
    
    }

    { //::VectorLerp
    
        typedef void ( *VectorLerp_function_type )( ::Vector const &,::Vector const &,::vec_t,::Vector & );
        
        bp::def( 
            "VectorLerp"
            , VectorLerp_function_type( &::VectorLerp )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("t"), bp::arg("dest") ) );
    
    }

    { //::VectorMA
    
        typedef void ( *VectorMA_function_type )( ::QAngle const &,float,::QAngle const &,::QAngle & );
        
        bp::def( 
            "VectorMA"
            , VectorMA_function_type( &::VectorMA )
            , ( bp::arg("start"), bp::arg("scale"), bp::arg("direction"), bp::arg("dest") ) );
    
    }

    { //::VectorMA
    
        typedef void ( *VectorMA_function_type )( ::Vector const &,float,::Vector const &,::Vector & );
        
        bp::def( 
            "VectorMA"
            , VectorMA_function_type( &::VectorMA )
            , ( bp::arg("start"), bp::arg("scale"), bp::arg("direction"), bp::arg("dest") ) );
    
    }

    { //::VectorMAInline
    
        typedef void ( *VectorMAInline_function_type )( ::Vector const &,float,::Vector const &,::Vector & );
        
        bp::def( 
            "VectorMAInline"
            , VectorMAInline_function_type( &::VectorMAInline )
            , ( bp::arg("start"), bp::arg("scale"), bp::arg("direction"), bp::arg("dest") ) );
    
    }

    { //::VectorMatrix
    
        typedef void ( *VectorMatrix_function_type )( ::Vector const &,::matrix3x4_t & );
        
        bp::def( 
            "VectorMatrix"
            , VectorMatrix_function_type( &::VectorMatrix )
            , ( bp::arg("forward"), bp::arg("mat") ) );
    
    }

    { //::VectorMax
    
        typedef void ( *VectorMax_function_type )( ::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "VectorMax"
            , VectorMax_function_type( &::VectorMax )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("result") ) );
    
    }

    { //::VectorMaximum
    
        typedef float ( *VectorMaximum_function_type )( ::Vector const & );
        
        bp::def( 
            "VectorMaximum"
            , VectorMaximum_function_type( &::VectorMaximum )
            , ( bp::arg("v") ) );
    
    }

    { //::VectorMaximum
    
        typedef float ( *VectorMaximum_function_type )( ::vec_t const * );
        
        bp::def( 
            "VectorMaximum"
            , VectorMaximum_function_type( &::VectorMaximum )
            , ( bp::arg("v") ) );
    
    }

    { //::VectorMin
    
        typedef void ( *VectorMin_function_type )( ::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "VectorMin"
            , VectorMin_function_type( &::VectorMin )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("result") ) );
    
    }

    { //::VectorMultiply
    
        typedef void ( *VectorMultiply_function_type )( ::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "VectorMultiply"
            , VectorMultiply_function_type( &::VectorMultiply )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::VectorMultiply
    
        typedef void ( *VectorMultiply_function_type )( ::Vector const &,::vec_t,::Vector & );
        
        bp::def( 
            "VectorMultiply"
            , VectorMultiply_function_type( &::VectorMultiply )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::VectorNegate
    
        typedef void ( *VectorNegate_function_type )( ::Vector & );
        
        bp::def( 
            "VectorNegate"
            , VectorNegate_function_type( &::VectorNegate )
            , ( bp::arg("a") ) );
    
    }

    { //::VectorNegate
    
        typedef void ( *VectorNegate_function_type )( ::vec_t * );
        
        bp::def( 
            "VectorNegate"
            , VectorNegate_function_type( &::VectorNegate )
            , ( bp::arg("a") ) );
    
    }

    { //::VectorNormalize
    
        typedef float ( *VectorNormalize_function_type )( ::Vector & );
        
        bp::def( 
            "VectorNormalize"
            , VectorNormalize_function_type( &::VectorNormalize )
            , ( bp::arg("vec") ) );
    
    }

    { //::VectorNormalizeFast
    
        typedef void ( *VectorNormalizeFast_function_type )( ::Vector & );
        
        bp::def( 
            "VectorNormalizeFast"
            , VectorNormalizeFast_function_type( &::VectorNormalizeFast )
            , ( bp::arg("vec") ) );
    
    }

    { //::VectorRotate
    
        typedef void ( *VectorRotate_function_type )( ::Vector const &,::matrix3x4_t const &,::Vector & );
        
        bp::def( 
            "VectorRotate"
            , VectorRotate_function_type( &::VectorRotate )
            , ( bp::arg("in1"), bp::arg("in2"), bp::arg("out") ) );
    
    }

    { //::VectorRotate
    
        typedef void ( *VectorRotate_function_type )( ::Vector const &,::Quaternion const &,::Vector & );
        
        bp::def( 
            "VectorRotate"
            , VectorRotate_function_type( &::VectorRotate )
            , ( bp::arg("in1"), bp::arg("in2"), bp::arg("out") ) );
    
    }

    { //::VectorRotate
    
        typedef void ( *VectorRotate_function_type )( ::Vector const &,::QAngle const &,::Vector & );
        
        bp::def( 
            "VectorRotate"
            , VectorRotate_function_type( &::VectorRotate )
            , ( bp::arg("in1"), bp::arg("in2"), bp::arg("out") ) );
    
    }

    { //::VectorScale
    
        typedef void ( *VectorScale_function_type )( ::RadianEuler const &,float,::RadianEuler & );
        
        bp::def( 
            "VectorScale"
            , VectorScale_function_type( &::VectorScale )
            , ( bp::arg("src"), bp::arg("b"), bp::arg("dst") ) );
    
    }

    { //::VectorScale
    
        typedef void ( *VectorScale_function_type )( ::Vector const &,::vec_t,::Vector & );
        
        bp::def( 
            "VectorScale"
            , VectorScale_function_type( &::VectorScale )
            , ( bp::arg("in"), bp::arg("scale"), bp::arg("result") ) );
    
    }

    { //::VectorSubtract
    
        typedef void ( *VectorSubtract_function_type )( ::vec_t const *,::vec_t const *,::vec_t * );
        
        bp::def( 
            "VectorSubtract"
            , VectorSubtract_function_type( &::VectorSubtract )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::VectorSubtract
    
        typedef void ( *VectorSubtract_function_type )( ::Vector const &,::Vector const &,::Vector & );
        
        bp::def( 
            "VectorSubtract"
            , VectorSubtract_function_type( &::VectorSubtract )
            , ( bp::arg("a"), bp::arg("b"), bp::arg("c") ) );
    
    }

    { //::VectorTransform
    
        typedef void ( *VectorTransform_function_type )( ::Vector const &,::matrix3x4_t const &,::Vector & );
        
        bp::def( 
            "VectorTransform"
            , VectorTransform_function_type( &::VectorTransform )
            , ( bp::arg("in1"), bp::arg("in2"), bp::arg("out") ) );
    
    }

    { //::VectorVectors
    
        typedef void ( *VectorVectors_function_type )( ::Vector const &,::Vector &,::Vector & );
        
        bp::def( 
            "VectorVectors"
            , VectorVectors_function_type( &::VectorVectors )
            , ( bp::arg("forward"), bp::arg("right"), bp::arg("up") ) );
    
    }

    { //::VectorYawRotate
    
        typedef void ( *VectorYawRotate_function_type )( ::Vector const &,float,::Vector & );
        
        bp::def( 
            "VectorYawRotate"
            , VectorYawRotate_function_type( &::VectorYawRotate )
            , ( bp::arg("in"), bp::arg("flYaw"), bp::arg("out") ) );
    
    }

    { //::VectorsAreEqual
    
        typedef bool ( *VectorsAreEqual_function_type )( ::Vector const &,::Vector const &,float );
        
        bp::def( 
            "VectorsAreEqual"
            , VectorsAreEqual_function_type( &::VectorsAreEqual )
            , ( bp::arg("src1"), bp::arg("src2"), bp::arg("tolerance")=0.0f ) );
    
    }

    { //::X360GammaToLinear
    
        typedef float ( *X360GammaToLinear_function_type )( float );
        
        bp::def( 
            "X360GammaToLinear"
            , X360GammaToLinear_function_type( &::X360GammaToLinear )
            , ( bp::arg("fl360GammaValue") ) );
    
    }

    { //::X360LinearToGamma
    
        typedef float ( *X360LinearToGamma_function_type )( float );
        
        bp::def( 
            "X360LinearToGamma"
            , X360LinearToGamma_function_type( &::X360LinearToGamma )
            , ( bp::arg("flLinearValue") ) );
    
    }

    { //::anglemod
    
        typedef float ( *anglemod_function_type )( float );
        
        bp::def( 
            "anglemod"
            , anglemod_function_type( &::anglemod )
            , ( bp::arg("a") ) );
    
    }

    bp::scope().attr("nanmask") = nanmask;

    bp::scope().attr("vec3_angle") = vec3_angle;

    bp::scope().attr("vec3_invalid") = vec3_invalid;

    bp::scope().attr("vec3_origin") = vec3_origin;
}
