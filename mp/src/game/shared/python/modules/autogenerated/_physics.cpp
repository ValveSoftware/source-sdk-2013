// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "cbase.h"

#include "srcpy_physics.h"

#include "physics.h"

#include "vphysics_interface.h"

#include "physics_shared.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct PyPhysicsObjectBase_wrapper : PyPhysicsObjectBase, bp::wrapper< PyPhysicsObjectBase > {

    PyPhysicsObjectBase_wrapper(PyPhysicsObjectBase const & arg )
    : PyPhysicsObjectBase( arg )
      , bp::wrapper< PyPhysicsObjectBase >(){
        // copy constructor
        
    }

    PyPhysicsObjectBase_wrapper( )
    : PyPhysicsObjectBase( )
      , bp::wrapper< PyPhysicsObjectBase >(){
        // null constructor
    
    }

    virtual PyObject *GetPySelf() const { return boost::python::detail::wrapper_base_::get_owner(*this); }

};

struct PyPhysicsObject_wrapper : PyPhysicsObject, bp::wrapper< PyPhysicsObject > {

    PyPhysicsObject_wrapper(PyPhysicsObject const & arg )
    : PyPhysicsObject( arg )
      , bp::wrapper< PyPhysicsObject >(){
        // copy constructor
        
    }

    PyPhysicsObject_wrapper( )
    : PyPhysicsObject( )
      , bp::wrapper< PyPhysicsObject >(){
        // null constructor
    
    }

    PyPhysicsObject_wrapper(::C_BaseEntity * pEnt )
    : PyPhysicsObject( boost::python::ptr(pEnt) )
      , bp::wrapper< PyPhysicsObject >(){
        // constructor
    
    }

    virtual PyObject *GetPySelf() const { return boost::python::detail::wrapper_base_::get_owner(*this); }

};

#ifdef _LINUX
typedef struct model_t {};
#endif // _LINUX

BOOST_PYTHON_MODULE(_physics){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< SurroundingBoundsType_t>("SurroundingBoundsType_t")
        .value("USE_OBB_COLLISION_BOUNDS", USE_OBB_COLLISION_BOUNDS)
        .value("USE_BEST_COLLISION_BOUNDS", USE_BEST_COLLISION_BOUNDS)
        .value("USE_HITBOXES", USE_HITBOXES)
        .value("USE_SPECIFIED_BOUNDS", USE_SPECIFIED_BOUNDS)
        .value("USE_GAME_CODE", USE_GAME_CODE)
        .value("USE_ROTATION_EXPANDED_BOUNDS", USE_ROTATION_EXPANDED_BOUNDS)
        .value("USE_COLLISION_BOUNDS_NEVER_VPHYSICS", USE_COLLISION_BOUNDS_NEVER_VPHYSICS)
        .value("SURROUNDING_TYPE_BIT_COUNT", SURROUNDING_TYPE_BIT_COUNT)
        .export_values()
        ;

    bp::class_< CCollisionProperty >( "CCollisionProperty", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AddSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ) )( &::CCollisionProperty::AddSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "BoundingRadius"
            , (float ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::BoundingRadius ) )    
        .def( 
            "BoundingRadius2D"
            , (float ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::BoundingRadius2D ) )    
        .def( 
            "CalcDistanceFromPoint"
            , (float ( ::CCollisionProperty::* )( ::Vector const & ) const)( &::CCollisionProperty::CalcDistanceFromPoint )
            , ( bp::arg("vecWorldPt") ) )    
        .def( 
            "CalcNearestPoint"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::CalcNearestPoint )
            , ( bp::arg("vecWorldPt"), bp::arg("pVecNearestWorldPt") ) )    
        .def( 
            "ClearSolidFlags"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::ClearSolidFlags ) )    
        .def( 
            "CollisionSpaceMaxs"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::CollisionSpaceMaxs )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionSpaceMins"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::CollisionSpaceMins )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToNormalizedSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::CollisionToNormalizedSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToWorldSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::CollisionToWorldSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToWorldTransform"
            , (::matrix3x4_t const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::CollisionToWorldTransform )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "ComputeSupportMap"
            , (float ( ::CCollisionProperty::* )( ::Vector const & ) const)( &::CCollisionProperty::ComputeSupportMap )
            , ( bp::arg("vecDirection") ) )    
        .def( 
            "CreatePartitionHandle"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::CreatePartitionHandle ) )    
        .def( 
            "DestroyPartitionHandle"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::DestroyPartitionHandle ) )    
        .def( 
            "DoesRotationInvalidateSurroundingBox"
            , (bool ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::DoesRotationInvalidateSurroundingBox ) )    
        .def( 
            "DoesVPhysicsInvalidateSurroundingBox"
            , (bool ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::DoesVPhysicsInvalidateSurroundingBox ) )    
        .def( 
            "GetCollisionAngles"
            , (::QAngle const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetCollisionAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetCollisionGroup"
            , (int ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetCollisionGroup ) )    
        .def( 
            "GetCollisionModel"
            , (::model_t const * ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::GetCollisionModel )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetCollisionModelIndex"
            , (int ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::GetCollisionModelIndex ) )    
        .def( 
            "GetCollisionOrigin"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetCollisionOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetPartitionHandle"
            , (short unsigned int ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetPartitionHandle ) )    
        .def( 
            "GetRootParentToWorldTransform"
            , (::matrix3x4_t const * ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetRootParentToWorldTransform )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetSolid"
            , (::SolidType_t ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetSolid ) )    
        .def( 
            "GetSolidFlags"
            , (int ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetSolidFlags ) )    
        .def( 
            "Init"
            , (void ( ::CCollisionProperty::* )( ::C_BaseEntity * ) )( &::CCollisionProperty::Init )
            , ( bp::arg("pEntity") ) )    
        .def( 
            "IsBoundsDefinedInEntitySpace"
            , (bool ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::IsBoundsDefinedInEntitySpace ) )    
        .def( 
            "IsPointInBounds"
            , (bool ( ::CCollisionProperty::* )( ::Vector const & ) const)( &::CCollisionProperty::IsPointInBounds )
            , ( bp::arg("vecWorldPt") ) )    
        .def( 
            "IsSolid"
            , (bool ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::IsSolid ) )    
        .def( 
            "IsSolidFlagSet"
            , (bool ( ::CCollisionProperty::* )( int ) const)( &::CCollisionProperty::IsSolidFlagSet )
            , ( bp::arg("flagMask") ) )    
        .def( 
            "MarkPartitionHandleDirty"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::MarkPartitionHandleDirty ) )    
        .def( 
            "MarkSurroundingBoundsDirty"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::MarkSurroundingBoundsDirty ) )    
        .def( 
            "NormalizedToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::NormalizedToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "NormalizedToWorldSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::NormalizedToWorldSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBCenter"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBCenter )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMaxs"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBMaxs )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMaxsPreScaled"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBMaxsPreScaled )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMins"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBMins )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMinsPreScaled"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBMinsPreScaled )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBSize"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBSize )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "RandomPointInBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector const &,::Vector * ) const)( &::CCollisionProperty::RandomPointInBounds )
            , ( bp::arg("vecNormalizedMins"), bp::arg("vecNormalizedMaxs"), bp::arg("pPoint") ) )    
        .def( 
            "RefreshScaledCollisionBounds"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::RefreshScaledCollisionBounds ) )    
        .def( 
            "RemoveSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ) )( &::CCollisionProperty::RemoveSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "SetCollisionBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector const & ) )( &::CCollisionProperty::SetCollisionBounds )
            , ( bp::arg("mins"), bp::arg("maxs") ) )    
        .def( 
            "SetSolid"
            , (void ( ::CCollisionProperty::* )( ::SolidType_t ) )( &::CCollisionProperty::SetSolid )
            , ( bp::arg("val") ) )    
        .def( 
            "SetSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ) )( &::CCollisionProperty::SetSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "SetSurroundingBoundsType"
            , (void ( ::CCollisionProperty::* )( ::SurroundingBoundsType_t,::Vector const *,::Vector const * ) )( &::CCollisionProperty::SetSurroundingBoundsType )
            , ( bp::arg("type"), bp::arg("pMins")=bp::object(), bp::arg("pMaxs")=bp::object() ) )    
        .def( 
            "ShouldTouchTrigger"
            , (bool ( ::CCollisionProperty::* )( int ) const)( &::CCollisionProperty::ShouldTouchTrigger )
            , ( bp::arg("triggerSolidFlags") ) )    
        .def( 
            "TestCollision"
            , (bool ( ::CCollisionProperty::* )( ::Ray_t const &,unsigned int,::trace_t & ) )( &::CCollisionProperty::TestCollision )
            , ( bp::arg("ray"), bp::arg("fContentsMask"), bp::arg("tr") ) )    
        .def( 
            "TestHitboxes"
            , (bool ( ::CCollisionProperty::* )( ::Ray_t const &,unsigned int,::trace_t & ) )( &::CCollisionProperty::TestHitboxes )
            , ( bp::arg("ray"), bp::arg("fContentsMask"), bp::arg("tr") ) )    
        .def( 
            "UpdatePartition"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::UpdatePartition ) )    
        .def( 
            "UseTriggerBounds"
            , (void ( ::CCollisionProperty::* )( bool,float ) )( &::CCollisionProperty::UseTriggerBounds )
            , ( bp::arg("bEnable"), bp::arg("flBloat")=0.0f ) )    
        .def( 
            "WorldDirectionToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::WorldDirectionToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldSpaceAABB"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * ) const)( &::CCollisionProperty::WorldSpaceAABB )
            , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) )    
        .def( 
            "WorldSpaceCenter"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::WorldSpaceCenter )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldSpaceSurroundingBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * ) )( &::CCollisionProperty::WorldSpaceSurroundingBounds )
            , ( bp::arg("pVecMins"), bp::arg("pVecMaxs") ) )    
        .def( 
            "WorldSpaceTriggerBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * ) const)( &::CCollisionProperty::WorldSpaceTriggerBounds )
            , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) )    
        .def( 
            "WorldToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::WorldToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldToNormalizedSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::WorldToNormalizedSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< PyPhysicsCollision >( "PhysicsCollision", bp::no_init )    
        .def( 
            "CollideGetAABB"
            , (::boost::python::tuple ( ::PyPhysicsCollision::* )( ::PyPhysicsObject *,::Vector const &,::QAngle const & ) )( &::PyPhysicsCollision::CollideGetAABB )
            , ( bp::arg("pPhysObj"), bp::arg("collideOrigin"), bp::arg("collideAngles") ) )    
        .def( 
            "TraceBox"
            , (void ( ::PyPhysicsCollision::* )( ::PyRay_t &,::PyPhysicsObject &,::Vector const &,::QAngle const &,::trace_t & ) )( &::PyPhysicsCollision::TraceBox )
            , ( bp::arg("ray"), bp::arg("physObj"), bp::arg("collideOrigin"), bp::arg("collideAngles"), bp::arg("ptr") ) );

    bp::class_< PyPhysicsObjectBase_wrapper >( "PhysicsObjectBase", bp::init< >() )    
        .def( 
            "AddVelocity"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const *,::AngularImpulse const * ) )( &::PyPhysicsObjectBase::AddVelocity )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "ApplyForceCenter"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const & ) )( &::PyPhysicsObjectBase::ApplyForceCenter )
            , ( bp::arg("forceVector") ) )    
        .def( 
            "ApplyForceOffset"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::Vector const & ) )( &::PyPhysicsObjectBase::ApplyForceOffset )
            , ( bp::arg("forceVector"), bp::arg("worldPosition") ) )    
        .def( 
            "ApplyTorqueCenter"
            , (void ( ::PyPhysicsObjectBase::* )( ::AngularImpulse const & ) )( &::PyPhysicsObjectBase::ApplyTorqueCenter )
            , ( bp::arg("torque") ) )    
        .def( 
            "BecomeHinged"
            , (void ( ::PyPhysicsObjectBase::* )( int ) )( &::PyPhysicsObjectBase::BecomeHinged )
            , ( bp::arg("localAxis") ) )    
        .def( 
            "BecomeTrigger"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::BecomeTrigger ) )    
        .def( 
            "CalculateAngularDrag"
            , (float ( ::PyPhysicsObjectBase::* )( ::Vector const & ) )( &::PyPhysicsObjectBase::CalculateAngularDrag )
            , ( bp::arg("objectSpaceRotationAxis") ) )    
        .def( 
            "CalculateForceOffset"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::Vector const &,::Vector *,::AngularImpulse * ) )( &::PyPhysicsObjectBase::CalculateForceOffset )
            , ( bp::arg("forceVector"), bp::arg("worldPosition"), bp::arg("centerForce"), bp::arg("centerTorque") ) )    
        .def( 
            "CalculateLinearDrag"
            , (float ( ::PyPhysicsObjectBase::* )( ::Vector const & ) )( &::PyPhysicsObjectBase::CalculateLinearDrag )
            , ( bp::arg("unitDirection") ) )    
        .def( 
            "CalculateVelocityOffset"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::Vector const &,::Vector *,::AngularImpulse * ) )( &::PyPhysicsObjectBase::CalculateVelocityOffset )
            , ( bp::arg("forceVector"), bp::arg("worldPosition"), bp::arg("centerVelocity"), bp::arg("centerAngularVelocity") ) )    
        .def( 
            "__cmp__"
            , (bool ( ::PyPhysicsObjectBase::* )( ::boost::python::object ) )( &::PyPhysicsObjectBase::Cmp )
            , ( bp::arg("other") ) )    
        .def( 
            "EnableCollisions"
            , (void ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::EnableCollisions )
            , ( bp::arg("enable") ) )    
        .def( 
            "EnableDrag"
            , (void ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::EnableDrag )
            , ( bp::arg("enable") ) )    
        .def( 
            "EnableGravity"
            , (void ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::EnableGravity )
            , ( bp::arg("enable") ) )    
        .def( 
            "EnableMotion"
            , (void ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::EnableMotion )
            , ( bp::arg("enable") ) )    
        .def( 
            "GetCallbackFlags"
            , (short unsigned int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetCallbackFlags ) )    
        .def( 
            "GetContents"
            , (unsigned int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetContents ) )    
        .def( 
            "GetDamping"
            , (::boost::python::tuple ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetDamping ) )    
        .def( 
            "GetEnergy"
            , (float ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetEnergy ) )    
        .def( 
            "GetGameFlags"
            , (short unsigned int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetGameFlags ) )    
        .def( 
            "GetGameIndex"
            , (short unsigned int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetGameIndex ) )    
        .def( 
            "GetImplicitVelocity"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::AngularImpulse * ) )( &::PyPhysicsObjectBase::GetImplicitVelocity )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "GetInertia"
            , (::Vector ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetInertia ) )    
        .def( 
            "GetInvInertia"
            , (::Vector ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetInvInertia ) )    
        .def( 
            "GetInvMass"
            , (float ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetInvMass ) )    
        .def( 
            "GetMass"
            , (float ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetMass ) )    
        .def( 
            "GetMassCenterLocalSpace"
            , (::Vector ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetMassCenterLocalSpace ) )    
        .def( 
            "GetMaterialIndex"
            , (int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetMaterialIndex ) )    
        .def( 
            "GetName"
            , (char const * ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetName ) )    
        .def( 
            "GetPosition"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::QAngle * ) )( &::PyPhysicsObjectBase::GetPosition )
            , ( bp::arg("worldPosition"), bp::arg("angles") ) )    
        .def( 
            "GetPositionMatrix"
            , (void ( ::PyPhysicsObjectBase::* )( ::matrix3x4_t * ) )( &::PyPhysicsObjectBase::GetPositionMatrix )
            , ( bp::arg("positionMatrix") ) )    
        .def( 
            "GetShadowController"
            , (::PyPhysicsShadowController ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetShadowController ) )    
        .def( 
            "GetShadowPosition"
            , (int ( ::PyPhysicsObjectBase::* )( ::Vector *,::QAngle * ) )( &::PyPhysicsObjectBase::GetShadowPosition )
            , ( bp::arg("position"), bp::arg("angles") ) )    
        .def( 
            "GetSphereRadius"
            , (float ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetSphereRadius ) )    
        .def( 
            "GetVelocity"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::AngularImpulse * ) )( &::PyPhysicsObjectBase::GetVelocity )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "GetVelocityAtPoint"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::Vector * ) )( &::PyPhysicsObjectBase::GetVelocityAtPoint )
            , ( bp::arg("worldPosition"), bp::arg("pVelocity") ) )    
        .def( 
            "IsAsleep"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsAsleep ) )    
        .def( 
            "IsAttachedToConstraint"
            , (bool ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::IsAttachedToConstraint )
            , ( bp::arg("bExternalOnly") ) )    
        .def( 
            "IsCollisionEnabled"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsCollisionEnabled ) )    
        .def( 
            "IsDragEnabled"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsDragEnabled ) )    
        .def( 
            "IsFluid"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsFluid ) )    
        .def( 
            "IsGravityEnabled"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsGravityEnabled ) )    
        .def( 
            "IsHinged"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsHinged ) )    
        .def( 
            "IsMotionEnabled"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsMotionEnabled ) )    
        .def( 
            "IsMoveable"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsMoveable ) )    
        .def( 
            "IsStatic"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsStatic ) )    
        .def( 
            "IsTrigger"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsTrigger ) )    
        .def( 
            "LocalToWorld"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::Vector const & ) )( &::PyPhysicsObjectBase::LocalToWorld )
            , ( bp::arg("worldPosition"), bp::arg("localPosition") ) )    
        .def( 
            "LocalToWorldVector"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::Vector const & ) )( &::PyPhysicsObjectBase::LocalToWorldVector )
            , ( bp::arg("worldVector"), bp::arg("localVector") ) )    
        .def( 
            "__nonzero__"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::NonZero ) )    
        .def( 
            "OutputDebugInfo"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::OutputDebugInfo ) )    
        .def( 
            "RecheckCollisionFilter"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RecheckCollisionFilter ) )    
        .def( 
            "RecheckContactPoints"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RecheckContactPoints ) )    
        .def( 
            "RemoveHinged"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RemoveHinged ) )    
        .def( 
            "RemoveShadowController"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RemoveShadowController ) )    
        .def( 
            "RemoveTrigger"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RemoveTrigger ) )    
        .def( 
            "SetBuoyancyRatio"
            , (void ( ::PyPhysicsObjectBase::* )( float ) )( &::PyPhysicsObjectBase::SetBuoyancyRatio )
            , ( bp::arg("ratio") ) )    
        .def( 
            "SetCallbackFlags"
            , (void ( ::PyPhysicsObjectBase::* )( short unsigned int ) )( &::PyPhysicsObjectBase::SetCallbackFlags )
            , ( bp::arg("callbackflags") ) )    
        .def( 
            "SetContents"
            , (void ( ::PyPhysicsObjectBase::* )( unsigned int ) )( &::PyPhysicsObjectBase::SetContents )
            , ( bp::arg("contents") ) )    
        .def( 
            "SetDamping"
            , (void ( ::PyPhysicsObjectBase::* )( float,float ) )( &::PyPhysicsObjectBase::SetDamping )
            , ( bp::arg("speed"), bp::arg("rot") ) )    
        .def( 
            "SetDragCoefficient"
            , (void ( ::PyPhysicsObjectBase::* )( float *,float * ) )( &::PyPhysicsObjectBase::SetDragCoefficient )
            , ( bp::arg("pDrag"), bp::arg("pAngularDrag") ) )    
        .def( 
            "SetGameFlags"
            , (void ( ::PyPhysicsObjectBase::* )( short unsigned int ) )( &::PyPhysicsObjectBase::SetGameFlags )
            , ( bp::arg("userFlags") ) )    
        .def( 
            "SetGameIndex"
            , (void ( ::PyPhysicsObjectBase::* )( short unsigned int ) )( &::PyPhysicsObjectBase::SetGameIndex )
            , ( bp::arg("gameIndex") ) )    
        .def( 
            "SetInertia"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const & ) )( &::PyPhysicsObjectBase::SetInertia )
            , ( bp::arg("inertia") ) )    
        .def( 
            "SetMass"
            , (void ( ::PyPhysicsObjectBase::* )( float ) )( &::PyPhysicsObjectBase::SetMass )
            , ( bp::arg("mass") ) )    
        .def( 
            "SetMaterialIndex"
            , (void ( ::PyPhysicsObjectBase::* )( int ) )( &::PyPhysicsObjectBase::SetMaterialIndex )
            , ( bp::arg("materialIndex") ) )    
        .def( 
            "SetPosition"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::QAngle const &,bool ) )( &::PyPhysicsObjectBase::SetPosition )
            , ( bp::arg("worldPosition"), bp::arg("angles"), bp::arg("isTeleport") ) )    
        .def( 
            "SetPositionMatrix"
            , (void ( ::PyPhysicsObjectBase::* )( ::matrix3x4_t const &,bool ) )( &::PyPhysicsObjectBase::SetPositionMatrix )
            , ( bp::arg("matrix"), bp::arg("isTeleport") ) )    
        .def( 
            "SetShadow"
            , (void ( ::PyPhysicsObjectBase::* )( float,float,bool,bool ) )( &::PyPhysicsObjectBase::SetShadow )
            , ( bp::arg("maxSpeed"), bp::arg("maxAngularSpeed"), bp::arg("allowPhysicsMovement"), bp::arg("allowPhysicsRotation") ) )    
        .def( 
            "SetVelocity"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const *,::AngularImpulse const * ) )( &::PyPhysicsObjectBase::SetVelocity )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "SetVelocityInstantaneous"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const *,::AngularImpulse const * ) )( &::PyPhysicsObjectBase::SetVelocityInstantaneous )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "Sleep"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::Sleep ) )    
        .def( 
            "UpdateShadow"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::QAngle const &,bool,float ) )( &::PyPhysicsObjectBase::UpdateShadow )
            , ( bp::arg("targetPosition"), bp::arg("targetAngles"), bp::arg("tempDisableGravity"), bp::arg("timeOffset") ) )    
        .def( 
            "Wake"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::Wake ) )    
        .def( 
            "WorldToLocal"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::Vector const & ) )( &::PyPhysicsObjectBase::WorldToLocal )
            , ( bp::arg("localPosition"), bp::arg("worldPosition") ) )    
        .def( 
            "WorldToLocalVector"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::Vector const & ) )( &::PyPhysicsObjectBase::WorldToLocalVector )
            , ( bp::arg("localVector"), bp::arg("worldVector") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self );

    { //::PyPhysicsObject
        typedef bp::class_< PyPhysicsObject_wrapper, bp::bases< PyPhysicsObjectBase > > PhysicsObject_exposer_t;
        PhysicsObject_exposer_t PhysicsObject_exposer = PhysicsObject_exposer_t( "PhysicsObject", bp::init< >() );
        bp::scope PhysicsObject_scope( PhysicsObject_exposer );
        PhysicsObject_exposer.def( bp::init< C_BaseEntity * >(( bp::arg("pEnt") )) );
        bp::implicitly_convertible< C_BaseEntity *, PyPhysicsObject >();
        { //::PyPhysicsObject::CheckValid
        
            typedef void ( ::PyPhysicsObject::*CheckValid_function_type )(  ) ;
            
            PhysicsObject_exposer.def( 
                "CheckValid"
                , CheckValid_function_type( &::PyPhysicsObject::CheckValid ) );
        
        }
        { //::PyPhysicsObject::Destroy
        
            typedef void ( ::PyPhysicsObject::*Destroy_function_type )(  ) ;
            
            PhysicsObject_exposer.def( 
                "Destroy"
                , Destroy_function_type( &::PyPhysicsObject::Destroy ) );
        
        }
        { //::PyPhysicsObject::HasEntity
        
            typedef bool ( ::PyPhysicsObject::*HasEntity_function_type )(  ) ;
            
            PhysicsObject_exposer.def( 
                "HasEntity"
                , HasEntity_function_type( &::PyPhysicsObject::HasEntity ) );
        
        }
    }

    { //::PyPhysicsShadowController
        typedef bp::class_< PyPhysicsShadowController > PhysicsShadowController_exposer_t;
        PhysicsShadowController_exposer_t PhysicsShadowController_exposer = PhysicsShadowController_exposer_t( "PhysicsShadowController", bp::init< bp::object >(( bp::arg("refPyPhysObj") )) );
        bp::scope PhysicsShadowController_scope( PhysicsShadowController_exposer );
        bp::implicitly_convertible< bp::object, PyPhysicsShadowController >();
        { //::PyPhysicsShadowController::AllowsRotation
        
            typedef bool ( ::PyPhysicsShadowController::*AllowsRotation_function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "AllowsRotation"
                , AllowsRotation_function_type( &::PyPhysicsShadowController::AllowsRotation ) );
        
        }
        { //::PyPhysicsShadowController::AllowsTranslation
        
            typedef bool ( ::PyPhysicsShadowController::*AllowsTranslation_function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "AllowsTranslation"
                , AllowsTranslation_function_type( &::PyPhysicsShadowController::AllowsTranslation ) );
        
        }
        { //::PyPhysicsShadowController::Cmp
        
            typedef bool ( ::PyPhysicsShadowController::*__cmp___function_type )( ::boost::python::object ) ;
            
            PhysicsShadowController_exposer.def( 
                "__cmp__"
                , __cmp___function_type( &::PyPhysicsShadowController::Cmp )
                , ( bp::arg("other") ) );
        
        }
        { //::PyPhysicsShadowController::GetLastImpulse
        
            typedef void ( ::PyPhysicsShadowController::*GetLastImpulse_function_type )( ::Vector * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetLastImpulse"
                , GetLastImpulse_function_type( &::PyPhysicsShadowController::GetLastImpulse )
                , ( bp::arg("pOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetMaxSpeed
        
            typedef void ( ::PyPhysicsShadowController::*GetMaxSpeed_function_type )( float *,float * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetMaxSpeed"
                , GetMaxSpeed_function_type( &::PyPhysicsShadowController::GetMaxSpeed )
                , ( bp::arg("pMaxSpeedOut"), bp::arg("pMaxAngularSpeedOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetTargetPosition
        
            typedef float ( ::PyPhysicsShadowController::*GetTargetPosition_function_type )( ::Vector *,::QAngle * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetTargetPosition"
                , GetTargetPosition_function_type( &::PyPhysicsShadowController::GetTargetPosition )
                , ( bp::arg("pPositionOut"), bp::arg("pAnglesOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetTeleportDistance
        
            typedef float ( ::PyPhysicsShadowController::*GetTeleportDistance_function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetTeleportDistance"
                , GetTeleportDistance_function_type( &::PyPhysicsShadowController::GetTeleportDistance ) );
        
        }
        { //::PyPhysicsShadowController::IsPhysicallyControlled
        
            typedef bool ( ::PyPhysicsShadowController::*IsPhysicallyControlled_function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "IsPhysicallyControlled"
                , IsPhysicallyControlled_function_type( &::PyPhysicsShadowController::IsPhysicallyControlled ) );
        
        }
        { //::PyPhysicsShadowController::MaxSpeed
        
            typedef void ( ::PyPhysicsShadowController::*MaxSpeed_function_type )( float,float ) ;
            
            PhysicsShadowController_exposer.def( 
                "MaxSpeed"
                , MaxSpeed_function_type( &::PyPhysicsShadowController::MaxSpeed )
                , ( bp::arg("maxSpeed"), bp::arg("maxAngularSpeed") ) );
        
        }
        { //::PyPhysicsShadowController::NonZero
        
            typedef bool ( ::PyPhysicsShadowController::*__nonzero___function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "__nonzero__"
                , __nonzero___function_type( &::PyPhysicsShadowController::NonZero ) );
        
        }
        { //::PyPhysicsShadowController::ObjectMaterialChanged
        
            typedef void ( ::PyPhysicsShadowController::*ObjectMaterialChanged_function_type )( int ) ;
            
            PhysicsShadowController_exposer.def( 
                "ObjectMaterialChanged"
                , ObjectMaterialChanged_function_type( &::PyPhysicsShadowController::ObjectMaterialChanged )
                , ( bp::arg("materialIndex") ) );
        
        }
        { //::PyPhysicsShadowController::SetPhysicallyControlled
        
            typedef void ( ::PyPhysicsShadowController::*SetPhysicallyControlled_function_type )( bool ) ;
            
            PhysicsShadowController_exposer.def( 
                "SetPhysicallyControlled"
                , SetPhysicallyControlled_function_type( &::PyPhysicsShadowController::SetPhysicallyControlled )
                , ( bp::arg("isPhysicallyControlled") ) );
        
        }
        { //::PyPhysicsShadowController::SetTeleportDistance
        
            typedef void ( ::PyPhysicsShadowController::*SetTeleportDistance_function_type )( float ) ;
            
            PhysicsShadowController_exposer.def( 
                "SetTeleportDistance"
                , SetTeleportDistance_function_type( &::PyPhysicsShadowController::SetTeleportDistance )
                , ( bp::arg("teleportDistance") ) );
        
        }
        { //::PyPhysicsShadowController::StepUp
        
            typedef void ( ::PyPhysicsShadowController::*StepUp_function_type )( float ) ;
            
            PhysicsShadowController_exposer.def( 
                "StepUp"
                , StepUp_function_type( &::PyPhysicsShadowController::StepUp )
                , ( bp::arg("height") ) );
        
        }
        { //::PyPhysicsShadowController::Update
        
            typedef void ( ::PyPhysicsShadowController::*Update_function_type )( ::Vector const &,::QAngle const &,float ) ;
            
            PhysicsShadowController_exposer.def( 
                "Update"
                , Update_function_type( &::PyPhysicsShadowController::Update )
                , ( bp::arg("position"), bp::arg("angles"), bp::arg("timeOffset") ) );
        
        }
        { //::PyPhysicsShadowController::UseShadowMaterial
        
            typedef void ( ::PyPhysicsShadowController::*UseShadowMaterial_function_type )( bool ) ;
            
            PhysicsShadowController_exposer.def( 
                "UseShadowMaterial"
                , UseShadowMaterial_function_type( &::PyPhysicsShadowController::UseShadowMaterial )
                , ( bp::arg("bUseShadowMaterial") ) );
        
        }
        PhysicsShadowController_exposer.def( bp::self != bp::self );
        PhysicsShadowController_exposer.def( bp::self == bp::self );
    }

    bp::class_< PyPhysicsSurfaceProps >( "PhysicsSurfaceProps", bp::no_init )    
        .def( 
            "GetPhysicsParameters"
            , (void ( ::PyPhysicsSurfaceProps::* )( int,::surfacephysicsparams_t & ) const)( &::PyPhysicsSurfaceProps::GetPhysicsParameters )
            , ( bp::arg("surfaceDataIndex"), bp::arg("paramsout") ) )    
        .def( 
            "GetPropName"
            , (char const * ( ::PyPhysicsSurfaceProps::* )( int ) const)( &::PyPhysicsSurfaceProps::GetPropName )
            , ( bp::arg("surfaceDataIndex") ) )    
        .def( 
            "GetString"
            , (char const * ( ::PyPhysicsSurfaceProps::* )( short unsigned int ) const)( &::PyPhysicsSurfaceProps::GetString )
            , ( bp::arg("stringTableIndex") ) )    
        .def( 
            "GetSurfaceData"
            , (::surfacedata_t ( ::PyPhysicsSurfaceProps::* )( int ) )( &::PyPhysicsSurfaceProps::GetSurfaceData )
            , ( bp::arg("surfaceDataIndex") ) )    
        .def( 
            "GetSurfaceIndex"
            , (int ( ::PyPhysicsSurfaceProps::* )( char const * ) const)( &::PyPhysicsSurfaceProps::GetSurfaceIndex )
            , ( bp::arg("pSurfacePropName") ) )    
        .def( 
            "ParseSurfaceData"
            , (int ( ::PyPhysicsSurfaceProps::* )( char const *,char const * ) )( &::PyPhysicsSurfaceProps::ParseSurfaceData )
            , ( bp::arg("pFilename"), bp::arg("pTextfile") ) )    
        .def( 
            "SurfacePropCount"
            , (int ( ::PyPhysicsSurfaceProps::* )(  ) const)( &::PyPhysicsSurfaceProps::SurfacePropCount ) );

    bp::class_< surfaceaudioparams_t >( "surfaceaudioparams_t" )    
        .def_readwrite( "hardThreshold", &surfaceaudioparams_t::hardThreshold )    
        .def_readwrite( "hardVelocityThreshold", &surfaceaudioparams_t::hardVelocityThreshold )    
        .def_readwrite( "hardnessFactor", &surfaceaudioparams_t::hardnessFactor )    
        .def_readwrite( "reflectivity", &surfaceaudioparams_t::reflectivity )    
        .def_readwrite( "roughThreshold", &surfaceaudioparams_t::roughThreshold )    
        .def_readwrite( "roughnessFactor", &surfaceaudioparams_t::roughnessFactor );

    bp::class_< surfacedata_t >( "surfacedata_t" )    
        .def_readwrite( "audio", &surfacedata_t::audio )    
        .def_readwrite( "game", &surfacedata_t::game )    
        .def_readwrite( "physics", &surfacedata_t::physics )    
        .def_readwrite( "soundhandles", &surfacedata_t::soundhandles )    
        .def_readwrite( "sounds", &surfacedata_t::sounds );

    bp::class_< surfacegameprops_t >( "surfacegameprops_t" )    
        .def_readwrite( "climbable", &surfacegameprops_t::climbable )    
        .def_readwrite( "jumpFactor", &surfacegameprops_t::jumpFactor )    
        .def_readwrite( "material", &surfacegameprops_t::material )    
        .def_readwrite( "maxSpeedFactor", &surfacegameprops_t::maxSpeedFactor )    
        .def_readwrite( "pad", &surfacegameprops_t::pad );

    bp::class_< surfacephysicsparams_t >( "surfacephysicsparams_t" )    
        .def_readwrite( "dampening", &surfacephysicsparams_t::dampening )    
        .def_readwrite( "density", &surfacephysicsparams_t::density )    
        .def_readwrite( "elasticity", &surfacephysicsparams_t::elasticity )    
        .def_readwrite( "friction", &surfacephysicsparams_t::friction )    
        .def_readwrite( "thickness", &surfacephysicsparams_t::thickness );

    bp::class_< surfacesoundhandles_t >( "surfacesoundhandles_t" )    
        .def_readwrite( "breakSound", &surfacesoundhandles_t::breakSound )    
        .def_readwrite( "bulletImpact", &surfacesoundhandles_t::bulletImpact )    
        .def_readwrite( "impactHard", &surfacesoundhandles_t::impactHard )    
        .def_readwrite( "impactSoft", &surfacesoundhandles_t::impactSoft )    
        .def_readwrite( "rolling", &surfacesoundhandles_t::rolling )    
        .def_readwrite( "scrapeRough", &surfacesoundhandles_t::scrapeRough )    
        .def_readwrite( "scrapeSmooth", &surfacesoundhandles_t::scrapeSmooth )    
        .def_readwrite( "stepleft", &surfacesoundhandles_t::stepleft )    
        .def_readwrite( "stepright", &surfacesoundhandles_t::stepright )    
        .def_readwrite( "strainSound", &surfacesoundhandles_t::strainSound );

    bp::class_< surfacesoundnames_t >( "surfacesoundnames_t" )    
        .def_readwrite( "breakSound", &surfacesoundnames_t::breakSound )    
        .def_readwrite( "bulletImpact", &surfacesoundnames_t::bulletImpact )    
        .def_readwrite( "impactHard", &surfacesoundnames_t::impactHard )    
        .def_readwrite( "impactSoft", &surfacesoundnames_t::impactSoft )    
        .def_readwrite( "rolling", &surfacesoundnames_t::rolling )    
        .def_readwrite( "scrapeRough", &surfacesoundnames_t::scrapeRough )    
        .def_readwrite( "scrapeSmooth", &surfacesoundnames_t::scrapeSmooth )    
        .def_readwrite( "stepleft", &surfacesoundnames_t::stepleft )    
        .def_readwrite( "stepright", &surfacesoundnames_t::stepright )    
        .def_readwrite( "strainSound", &surfacesoundnames_t::strainSound );

    { //::PyForcePhysicsSimulate
    
        typedef void ( *ForcePhysicsSimulate_function_type )(  );
        
        bp::def( 
            "ForcePhysicsSimulate"
            , ForcePhysicsSimulate_function_type( &::PyForcePhysicsSimulate ) );
    
    }

    { //::PyPhysDestroyObject
    
        typedef void ( *PhysDestroyObject_function_type )( ::PyPhysicsObject *,::C_BaseEntity * );
        
        bp::def( 
            "PhysDestroyObject"
            , PhysDestroyObject_function_type( &::PyPhysDestroyObject )
            , ( bp::arg("pPyPhysObj"), bp::arg("pEntity")=bp::object() ) );
    
    }

    { //::PyPhysModelCreateBox
    
        typedef ::boost::python::object ( *PhysModelCreateBox_function_type )( ::C_BaseEntity *,::Vector const &,::Vector const &,::Vector const &,bool );
        
        bp::def( 
            "PhysModelCreateBox"
            , PhysModelCreateBox_function_type( &::PyPhysModelCreateBox )
            , ( bp::arg("pEntity"), bp::arg("mins"), bp::arg("maxs"), bp::arg("origin"), bp::arg("isStatic") ) );
    
    }

    bp::scope().attr( "physcollision" ) = boost::ref(pyphyscollision);

    bp::scope().attr( "physprops" ) = boost::ref(pyphysprops);

    { //::PyPhysModelCreateOBB
    
        typedef ::boost::python::object ( *PhysModelCreateOBB_function_type )( ::C_BaseEntity *,::Vector const &,::Vector const &,::Vector const &,::QAngle const &,bool );
        
        bp::def( 
            "PhysModelCreateOBB"
            , PhysModelCreateOBB_function_type( &::PyPhysModelCreateOBB )
            , ( bp::arg("pEntity"), bp::arg("mins"), bp::arg("maxs"), bp::arg("origin"), bp::arg("angle"), bp::arg("isStatic") ) );
    
    }
}
#else
#include "cbase.h"

#include "srcpy_physics.h"

#include "physics.h"

#include "physics_impact_damage.h"

#include "vphysics_interface.h"

#include "physics_shared.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct PyPhysicsObjectBase_wrapper : PyPhysicsObjectBase, bp::wrapper< PyPhysicsObjectBase > {

    PyPhysicsObjectBase_wrapper(PyPhysicsObjectBase const & arg )
    : PyPhysicsObjectBase( arg )
      , bp::wrapper< PyPhysicsObjectBase >(){
        // copy constructor
        
    }

    PyPhysicsObjectBase_wrapper( )
    : PyPhysicsObjectBase( )
      , bp::wrapper< PyPhysicsObjectBase >(){
        // null constructor
    
    }

    virtual PyObject *GetPySelf() const { return boost::python::detail::wrapper_base_::get_owner(*this); }

};

struct PyPhysicsObject_wrapper : PyPhysicsObject, bp::wrapper< PyPhysicsObject > {

    PyPhysicsObject_wrapper(PyPhysicsObject const & arg )
    : PyPhysicsObject( arg )
      , bp::wrapper< PyPhysicsObject >(){
        // copy constructor
        
    }

    PyPhysicsObject_wrapper( )
    : PyPhysicsObject( )
      , bp::wrapper< PyPhysicsObject >(){
        // null constructor
    
    }

    PyPhysicsObject_wrapper(::CBaseEntity * pEnt )
    : PyPhysicsObject( boost::python::ptr(pEnt) )
      , bp::wrapper< PyPhysicsObject >(){
        // constructor
    
    }

    virtual PyObject *GetPySelf() const { return boost::python::detail::wrapper_base_::get_owner(*this); }

};

#ifdef _LINUX
typedef struct model_t {};
#endif // _LINUX

BOOST_PYTHON_MODULE(_physics){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< SurroundingBoundsType_t>("SurroundingBoundsType_t")
        .value("USE_OBB_COLLISION_BOUNDS", USE_OBB_COLLISION_BOUNDS)
        .value("USE_BEST_COLLISION_BOUNDS", USE_BEST_COLLISION_BOUNDS)
        .value("USE_HITBOXES", USE_HITBOXES)
        .value("USE_SPECIFIED_BOUNDS", USE_SPECIFIED_BOUNDS)
        .value("USE_GAME_CODE", USE_GAME_CODE)
        .value("USE_ROTATION_EXPANDED_BOUNDS", USE_ROTATION_EXPANDED_BOUNDS)
        .value("USE_COLLISION_BOUNDS_NEVER_VPHYSICS", USE_COLLISION_BOUNDS_NEVER_VPHYSICS)
        .value("SURROUNDING_TYPE_BIT_COUNT", SURROUNDING_TYPE_BIT_COUNT)
        .export_values()
        ;

    bp::class_< CCollisionProperty >( "CCollisionProperty", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AddSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ) )( &::CCollisionProperty::AddSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "BoundingRadius"
            , (float ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::BoundingRadius ) )    
        .def( 
            "BoundingRadius2D"
            , (float ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::BoundingRadius2D ) )    
        .def( 
            "CalcDistanceFromPoint"
            , (float ( ::CCollisionProperty::* )( ::Vector const & ) const)( &::CCollisionProperty::CalcDistanceFromPoint )
            , ( bp::arg("vecWorldPt") ) )    
        .def( 
            "CalcNearestPoint"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::CalcNearestPoint )
            , ( bp::arg("vecWorldPt"), bp::arg("pVecNearestWorldPt") ) )    
        .def( 
            "ClearSolidFlags"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::ClearSolidFlags ) )    
        .def( 
            "CollisionSpaceMaxs"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::CollisionSpaceMaxs )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionSpaceMins"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::CollisionSpaceMins )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToNormalizedSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::CollisionToNormalizedSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToWorldSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::CollisionToWorldSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToWorldTransform"
            , (::matrix3x4_t const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::CollisionToWorldTransform )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "ComputeSupportMap"
            , (float ( ::CCollisionProperty::* )( ::Vector const & ) const)( &::CCollisionProperty::ComputeSupportMap )
            , ( bp::arg("vecDirection") ) )    
        .def( 
            "CreatePartitionHandle"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::CreatePartitionHandle ) )    
        .def( 
            "DestroyPartitionHandle"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::DestroyPartitionHandle ) )    
        .def( 
            "DoesRotationInvalidateSurroundingBox"
            , (bool ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::DoesRotationInvalidateSurroundingBox ) )    
        .def( 
            "DoesVPhysicsInvalidateSurroundingBox"
            , (bool ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::DoesVPhysicsInvalidateSurroundingBox ) )    
        .def( 
            "GetCollisionAngles"
            , (::QAngle const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetCollisionAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetCollisionGroup"
            , (int ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetCollisionGroup ) )    
        .def( 
            "GetCollisionModel"
            , (::model_t const * ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::GetCollisionModel )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetCollisionModelIndex"
            , (int ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::GetCollisionModelIndex ) )    
        .def( 
            "GetCollisionOrigin"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetCollisionOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetPartitionHandle"
            , (short unsigned int ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetPartitionHandle ) )    
        .def( 
            "GetRootParentToWorldTransform"
            , (::matrix3x4_t const * ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetRootParentToWorldTransform )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetSolid"
            , (::SolidType_t ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetSolid ) )    
        .def( 
            "GetSolidFlags"
            , (int ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::GetSolidFlags ) )    
        .def( 
            "Init"
            , (void ( ::CCollisionProperty::* )( ::CBaseEntity * ) )( &::CCollisionProperty::Init )
            , ( bp::arg("pEntity") ) )    
        .def( 
            "IsBoundsDefinedInEntitySpace"
            , (bool ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::IsBoundsDefinedInEntitySpace ) )    
        .def( 
            "IsPointInBounds"
            , (bool ( ::CCollisionProperty::* )( ::Vector const & ) const)( &::CCollisionProperty::IsPointInBounds )
            , ( bp::arg("vecWorldPt") ) )    
        .def( 
            "IsSolid"
            , (bool ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::IsSolid ) )    
        .def( 
            "IsSolidFlagSet"
            , (bool ( ::CCollisionProperty::* )( int ) const)( &::CCollisionProperty::IsSolidFlagSet )
            , ( bp::arg("flagMask") ) )    
        .def( 
            "MarkPartitionHandleDirty"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::MarkPartitionHandleDirty ) )    
        .def( 
            "MarkSurroundingBoundsDirty"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::MarkSurroundingBoundsDirty ) )    
        .def( 
            "NormalizedToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::NormalizedToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "NormalizedToWorldSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::NormalizedToWorldSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBCenter"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBCenter )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMaxs"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBMaxs )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMaxsPreScaled"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBMaxsPreScaled )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMins"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBMins )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMinsPreScaled"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBMinsPreScaled )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBSize"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::OBBSize )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "RandomPointInBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector const &,::Vector * ) const)( &::CCollisionProperty::RandomPointInBounds )
            , ( bp::arg("vecNormalizedMins"), bp::arg("vecNormalizedMaxs"), bp::arg("pPoint") ) )    
        .def( 
            "RefreshScaledCollisionBounds"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::RefreshScaledCollisionBounds ) )    
        .def( 
            "RemoveSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ) )( &::CCollisionProperty::RemoveSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "SetCollisionBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector const & ) )( &::CCollisionProperty::SetCollisionBounds )
            , ( bp::arg("mins"), bp::arg("maxs") ) )    
        .def( 
            "SetSolid"
            , (void ( ::CCollisionProperty::* )( ::SolidType_t ) )( &::CCollisionProperty::SetSolid )
            , ( bp::arg("val") ) )    
        .def( 
            "SetSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ) )( &::CCollisionProperty::SetSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "SetSurroundingBoundsType"
            , (void ( ::CCollisionProperty::* )( ::SurroundingBoundsType_t,::Vector const *,::Vector const * ) )( &::CCollisionProperty::SetSurroundingBoundsType )
            , ( bp::arg("type"), bp::arg("pMins")=bp::object(), bp::arg("pMaxs")=bp::object() ) )    
        .def( 
            "ShouldTouchTrigger"
            , (bool ( ::CCollisionProperty::* )( int ) const)( &::CCollisionProperty::ShouldTouchTrigger )
            , ( bp::arg("triggerSolidFlags") ) )    
        .def( 
            "TestCollision"
            , (bool ( ::CCollisionProperty::* )( ::Ray_t const &,unsigned int,::trace_t & ) )( &::CCollisionProperty::TestCollision )
            , ( bp::arg("ray"), bp::arg("fContentsMask"), bp::arg("tr") ) )    
        .def( 
            "TestHitboxes"
            , (bool ( ::CCollisionProperty::* )( ::Ray_t const &,unsigned int,::trace_t & ) )( &::CCollisionProperty::TestHitboxes )
            , ( bp::arg("ray"), bp::arg("fContentsMask"), bp::arg("tr") ) )    
        .def( 
            "UpdatePartition"
            , (void ( ::CCollisionProperty::* )(  ) )( &::CCollisionProperty::UpdatePartition ) )    
        .def( 
            "UseTriggerBounds"
            , (void ( ::CCollisionProperty::* )( bool,float ) )( &::CCollisionProperty::UseTriggerBounds )
            , ( bp::arg("bEnable"), bp::arg("flBloat")=0.0f ) )    
        .def( 
            "WorldDirectionToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::WorldDirectionToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldSpaceAABB"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * ) const)( &::CCollisionProperty::WorldSpaceAABB )
            , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) )    
        .def( 
            "WorldSpaceCenter"
            , (::Vector const & ( ::CCollisionProperty::* )(  ) const)( &::CCollisionProperty::WorldSpaceCenter )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldSpaceSurroundingBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * ) )( &::CCollisionProperty::WorldSpaceSurroundingBounds )
            , ( bp::arg("pVecMins"), bp::arg("pVecMaxs") ) )    
        .def( 
            "WorldSpaceTriggerBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * ) const)( &::CCollisionProperty::WorldSpaceTriggerBounds )
            , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) )    
        .def( 
            "WorldToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::WorldToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldToNormalizedSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * ) const)( &::CCollisionProperty::WorldToNormalizedSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< PyPhysicsCollision >( "PhysicsCollision", bp::no_init )    
        .def( 
            "CollideGetAABB"
            , (::boost::python::tuple ( ::PyPhysicsCollision::* )( ::PyPhysicsObject *,::Vector const &,::QAngle const & ) )( &::PyPhysicsCollision::CollideGetAABB )
            , ( bp::arg("pPhysObj"), bp::arg("collideOrigin"), bp::arg("collideAngles") ) )    
        .def( 
            "TraceBox"
            , (void ( ::PyPhysicsCollision::* )( ::PyRay_t &,::PyPhysicsObject &,::Vector const &,::QAngle const &,::trace_t & ) )( &::PyPhysicsCollision::TraceBox )
            , ( bp::arg("ray"), bp::arg("physObj"), bp::arg("collideOrigin"), bp::arg("collideAngles"), bp::arg("ptr") ) );

    bp::class_< PyPhysicsObjectBase_wrapper >( "PhysicsObjectBase", bp::init< >() )    
        .def( 
            "AddVelocity"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const *,::AngularImpulse const * ) )( &::PyPhysicsObjectBase::AddVelocity )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "ApplyForceCenter"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const & ) )( &::PyPhysicsObjectBase::ApplyForceCenter )
            , ( bp::arg("forceVector") ) )    
        .def( 
            "ApplyForceOffset"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::Vector const & ) )( &::PyPhysicsObjectBase::ApplyForceOffset )
            , ( bp::arg("forceVector"), bp::arg("worldPosition") ) )    
        .def( 
            "ApplyTorqueCenter"
            , (void ( ::PyPhysicsObjectBase::* )( ::AngularImpulse const & ) )( &::PyPhysicsObjectBase::ApplyTorqueCenter )
            , ( bp::arg("torque") ) )    
        .def( 
            "BecomeHinged"
            , (void ( ::PyPhysicsObjectBase::* )( int ) )( &::PyPhysicsObjectBase::BecomeHinged )
            , ( bp::arg("localAxis") ) )    
        .def( 
            "BecomeTrigger"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::BecomeTrigger ) )    
        .def( 
            "CalculateAngularDrag"
            , (float ( ::PyPhysicsObjectBase::* )( ::Vector const & ) )( &::PyPhysicsObjectBase::CalculateAngularDrag )
            , ( bp::arg("objectSpaceRotationAxis") ) )    
        .def( 
            "CalculateForceOffset"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::Vector const &,::Vector *,::AngularImpulse * ) )( &::PyPhysicsObjectBase::CalculateForceOffset )
            , ( bp::arg("forceVector"), bp::arg("worldPosition"), bp::arg("centerForce"), bp::arg("centerTorque") ) )    
        .def( 
            "CalculateLinearDrag"
            , (float ( ::PyPhysicsObjectBase::* )( ::Vector const & ) )( &::PyPhysicsObjectBase::CalculateLinearDrag )
            , ( bp::arg("unitDirection") ) )    
        .def( 
            "CalculateVelocityOffset"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::Vector const &,::Vector *,::AngularImpulse * ) )( &::PyPhysicsObjectBase::CalculateVelocityOffset )
            , ( bp::arg("forceVector"), bp::arg("worldPosition"), bp::arg("centerVelocity"), bp::arg("centerAngularVelocity") ) )    
        .def( 
            "__cmp__"
            , (bool ( ::PyPhysicsObjectBase::* )( ::boost::python::object ) )( &::PyPhysicsObjectBase::Cmp )
            , ( bp::arg("other") ) )    
        .def( 
            "EnableCollisions"
            , (void ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::EnableCollisions )
            , ( bp::arg("enable") ) )    
        .def( 
            "EnableDrag"
            , (void ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::EnableDrag )
            , ( bp::arg("enable") ) )    
        .def( 
            "EnableGravity"
            , (void ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::EnableGravity )
            , ( bp::arg("enable") ) )    
        .def( 
            "EnableMotion"
            , (void ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::EnableMotion )
            , ( bp::arg("enable") ) )    
        .def( 
            "GetCallbackFlags"
            , (short unsigned int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetCallbackFlags ) )    
        .def( 
            "GetContents"
            , (unsigned int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetContents ) )    
        .def( 
            "GetDamping"
            , (::boost::python::tuple ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetDamping ) )    
        .def( 
            "GetEnergy"
            , (float ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetEnergy ) )    
        .def( 
            "GetGameFlags"
            , (short unsigned int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetGameFlags ) )    
        .def( 
            "GetGameIndex"
            , (short unsigned int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetGameIndex ) )    
        .def( 
            "GetImplicitVelocity"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::AngularImpulse * ) )( &::PyPhysicsObjectBase::GetImplicitVelocity )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "GetInertia"
            , (::Vector ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetInertia ) )    
        .def( 
            "GetInvInertia"
            , (::Vector ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetInvInertia ) )    
        .def( 
            "GetInvMass"
            , (float ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetInvMass ) )    
        .def( 
            "GetMass"
            , (float ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetMass ) )    
        .def( 
            "GetMassCenterLocalSpace"
            , (::Vector ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetMassCenterLocalSpace ) )    
        .def( 
            "GetMaterialIndex"
            , (int ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetMaterialIndex ) )    
        .def( 
            "GetName"
            , (char const * ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetName ) )    
        .def( 
            "GetPosition"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::QAngle * ) )( &::PyPhysicsObjectBase::GetPosition )
            , ( bp::arg("worldPosition"), bp::arg("angles") ) )    
        .def( 
            "GetPositionMatrix"
            , (void ( ::PyPhysicsObjectBase::* )( ::matrix3x4_t * ) )( &::PyPhysicsObjectBase::GetPositionMatrix )
            , ( bp::arg("positionMatrix") ) )    
        .def( 
            "GetShadowController"
            , (::PyPhysicsShadowController ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetShadowController ) )    
        .def( 
            "GetShadowPosition"
            , (int ( ::PyPhysicsObjectBase::* )( ::Vector *,::QAngle * ) )( &::PyPhysicsObjectBase::GetShadowPosition )
            , ( bp::arg("position"), bp::arg("angles") ) )    
        .def( 
            "GetSphereRadius"
            , (float ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::GetSphereRadius ) )    
        .def( 
            "GetVelocity"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::AngularImpulse * ) )( &::PyPhysicsObjectBase::GetVelocity )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "GetVelocityAtPoint"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::Vector * ) )( &::PyPhysicsObjectBase::GetVelocityAtPoint )
            , ( bp::arg("worldPosition"), bp::arg("pVelocity") ) )    
        .def( 
            "IsAsleep"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsAsleep ) )    
        .def( 
            "IsAttachedToConstraint"
            , (bool ( ::PyPhysicsObjectBase::* )( bool ) )( &::PyPhysicsObjectBase::IsAttachedToConstraint )
            , ( bp::arg("bExternalOnly") ) )    
        .def( 
            "IsCollisionEnabled"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsCollisionEnabled ) )    
        .def( 
            "IsDragEnabled"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsDragEnabled ) )    
        .def( 
            "IsFluid"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsFluid ) )    
        .def( 
            "IsGravityEnabled"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsGravityEnabled ) )    
        .def( 
            "IsHinged"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsHinged ) )    
        .def( 
            "IsMotionEnabled"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsMotionEnabled ) )    
        .def( 
            "IsMoveable"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsMoveable ) )    
        .def( 
            "IsStatic"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsStatic ) )    
        .def( 
            "IsTrigger"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::IsTrigger ) )    
        .def( 
            "LocalToWorld"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::Vector const & ) )( &::PyPhysicsObjectBase::LocalToWorld )
            , ( bp::arg("worldPosition"), bp::arg("localPosition") ) )    
        .def( 
            "LocalToWorldVector"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::Vector const & ) )( &::PyPhysicsObjectBase::LocalToWorldVector )
            , ( bp::arg("worldVector"), bp::arg("localVector") ) )    
        .def( 
            "__nonzero__"
            , (bool ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::NonZero ) )    
        .def( 
            "OutputDebugInfo"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::OutputDebugInfo ) )    
        .def( 
            "RecheckCollisionFilter"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RecheckCollisionFilter ) )    
        .def( 
            "RecheckContactPoints"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RecheckContactPoints ) )    
        .def( 
            "RemoveHinged"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RemoveHinged ) )    
        .def( 
            "RemoveShadowController"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RemoveShadowController ) )    
        .def( 
            "RemoveTrigger"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::RemoveTrigger ) )    
        .def( 
            "SetBuoyancyRatio"
            , (void ( ::PyPhysicsObjectBase::* )( float ) )( &::PyPhysicsObjectBase::SetBuoyancyRatio )
            , ( bp::arg("ratio") ) )    
        .def( 
            "SetCallbackFlags"
            , (void ( ::PyPhysicsObjectBase::* )( short unsigned int ) )( &::PyPhysicsObjectBase::SetCallbackFlags )
            , ( bp::arg("callbackflags") ) )    
        .def( 
            "SetContents"
            , (void ( ::PyPhysicsObjectBase::* )( unsigned int ) )( &::PyPhysicsObjectBase::SetContents )
            , ( bp::arg("contents") ) )    
        .def( 
            "SetDamping"
            , (void ( ::PyPhysicsObjectBase::* )( float,float ) )( &::PyPhysicsObjectBase::SetDamping )
            , ( bp::arg("speed"), bp::arg("rot") ) )    
        .def( 
            "SetDragCoefficient"
            , (void ( ::PyPhysicsObjectBase::* )( float *,float * ) )( &::PyPhysicsObjectBase::SetDragCoefficient )
            , ( bp::arg("pDrag"), bp::arg("pAngularDrag") ) )    
        .def( 
            "SetGameFlags"
            , (void ( ::PyPhysicsObjectBase::* )( short unsigned int ) )( &::PyPhysicsObjectBase::SetGameFlags )
            , ( bp::arg("userFlags") ) )    
        .def( 
            "SetGameIndex"
            , (void ( ::PyPhysicsObjectBase::* )( short unsigned int ) )( &::PyPhysicsObjectBase::SetGameIndex )
            , ( bp::arg("gameIndex") ) )    
        .def( 
            "SetInertia"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const & ) )( &::PyPhysicsObjectBase::SetInertia )
            , ( bp::arg("inertia") ) )    
        .def( 
            "SetMass"
            , (void ( ::PyPhysicsObjectBase::* )( float ) )( &::PyPhysicsObjectBase::SetMass )
            , ( bp::arg("mass") ) )    
        .def( 
            "SetMaterialIndex"
            , (void ( ::PyPhysicsObjectBase::* )( int ) )( &::PyPhysicsObjectBase::SetMaterialIndex )
            , ( bp::arg("materialIndex") ) )    
        .def( 
            "SetPosition"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::QAngle const &,bool ) )( &::PyPhysicsObjectBase::SetPosition )
            , ( bp::arg("worldPosition"), bp::arg("angles"), bp::arg("isTeleport") ) )    
        .def( 
            "SetPositionMatrix"
            , (void ( ::PyPhysicsObjectBase::* )( ::matrix3x4_t const &,bool ) )( &::PyPhysicsObjectBase::SetPositionMatrix )
            , ( bp::arg("matrix"), bp::arg("isTeleport") ) )    
        .def( 
            "SetShadow"
            , (void ( ::PyPhysicsObjectBase::* )( float,float,bool,bool ) )( &::PyPhysicsObjectBase::SetShadow )
            , ( bp::arg("maxSpeed"), bp::arg("maxAngularSpeed"), bp::arg("allowPhysicsMovement"), bp::arg("allowPhysicsRotation") ) )    
        .def( 
            "SetVelocity"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const *,::AngularImpulse const * ) )( &::PyPhysicsObjectBase::SetVelocity )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "SetVelocityInstantaneous"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const *,::AngularImpulse const * ) )( &::PyPhysicsObjectBase::SetVelocityInstantaneous )
            , ( bp::arg("velocity"), bp::arg("angularVelocity") ) )    
        .def( 
            "Sleep"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::Sleep ) )    
        .def( 
            "UpdateShadow"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector const &,::QAngle const &,bool,float ) )( &::PyPhysicsObjectBase::UpdateShadow )
            , ( bp::arg("targetPosition"), bp::arg("targetAngles"), bp::arg("tempDisableGravity"), bp::arg("timeOffset") ) )    
        .def( 
            "Wake"
            , (void ( ::PyPhysicsObjectBase::* )(  ) )( &::PyPhysicsObjectBase::Wake ) )    
        .def( 
            "WorldToLocal"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::Vector const & ) )( &::PyPhysicsObjectBase::WorldToLocal )
            , ( bp::arg("localPosition"), bp::arg("worldPosition") ) )    
        .def( 
            "WorldToLocalVector"
            , (void ( ::PyPhysicsObjectBase::* )( ::Vector *,::Vector const & ) )( &::PyPhysicsObjectBase::WorldToLocalVector )
            , ( bp::arg("localVector"), bp::arg("worldVector") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self );

    { //::PyPhysicsObject
        typedef bp::class_< PyPhysicsObject_wrapper, bp::bases< PyPhysicsObjectBase > > PhysicsObject_exposer_t;
        PhysicsObject_exposer_t PhysicsObject_exposer = PhysicsObject_exposer_t( "PhysicsObject", bp::init< >() );
        bp::scope PhysicsObject_scope( PhysicsObject_exposer );
        PhysicsObject_exposer.def( bp::init< CBaseEntity * >(( bp::arg("pEnt") )) );
        bp::implicitly_convertible< CBaseEntity *, PyPhysicsObject >();
        { //::PyPhysicsObject::CheckValid
        
            typedef void ( ::PyPhysicsObject::*CheckValid_function_type )(  ) ;
            
            PhysicsObject_exposer.def( 
                "CheckValid"
                , CheckValid_function_type( &::PyPhysicsObject::CheckValid ) );
        
        }
        { //::PyPhysicsObject::Destroy
        
            typedef void ( ::PyPhysicsObject::*Destroy_function_type )(  ) ;
            
            PhysicsObject_exposer.def( 
                "Destroy"
                , Destroy_function_type( &::PyPhysicsObject::Destroy ) );
        
        }
        { //::PyPhysicsObject::HasEntity
        
            typedef bool ( ::PyPhysicsObject::*HasEntity_function_type )(  ) ;
            
            PhysicsObject_exposer.def( 
                "HasEntity"
                , HasEntity_function_type( &::PyPhysicsObject::HasEntity ) );
        
        }
    }

    { //::PyPhysicsShadowController
        typedef bp::class_< PyPhysicsShadowController > PhysicsShadowController_exposer_t;
        PhysicsShadowController_exposer_t PhysicsShadowController_exposer = PhysicsShadowController_exposer_t( "PhysicsShadowController", bp::init< bp::object >(( bp::arg("refPyPhysObj") )) );
        bp::scope PhysicsShadowController_scope( PhysicsShadowController_exposer );
        bp::implicitly_convertible< bp::object, PyPhysicsShadowController >();
        { //::PyPhysicsShadowController::AllowsRotation
        
            typedef bool ( ::PyPhysicsShadowController::*AllowsRotation_function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "AllowsRotation"
                , AllowsRotation_function_type( &::PyPhysicsShadowController::AllowsRotation ) );
        
        }
        { //::PyPhysicsShadowController::AllowsTranslation
        
            typedef bool ( ::PyPhysicsShadowController::*AllowsTranslation_function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "AllowsTranslation"
                , AllowsTranslation_function_type( &::PyPhysicsShadowController::AllowsTranslation ) );
        
        }
        { //::PyPhysicsShadowController::Cmp
        
            typedef bool ( ::PyPhysicsShadowController::*__cmp___function_type )( ::boost::python::object ) ;
            
            PhysicsShadowController_exposer.def( 
                "__cmp__"
                , __cmp___function_type( &::PyPhysicsShadowController::Cmp )
                , ( bp::arg("other") ) );
        
        }
        { //::PyPhysicsShadowController::GetLastImpulse
        
            typedef void ( ::PyPhysicsShadowController::*GetLastImpulse_function_type )( ::Vector * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetLastImpulse"
                , GetLastImpulse_function_type( &::PyPhysicsShadowController::GetLastImpulse )
                , ( bp::arg("pOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetMaxSpeed
        
            typedef void ( ::PyPhysicsShadowController::*GetMaxSpeed_function_type )( float *,float * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetMaxSpeed"
                , GetMaxSpeed_function_type( &::PyPhysicsShadowController::GetMaxSpeed )
                , ( bp::arg("pMaxSpeedOut"), bp::arg("pMaxAngularSpeedOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetTargetPosition
        
            typedef float ( ::PyPhysicsShadowController::*GetTargetPosition_function_type )( ::Vector *,::QAngle * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetTargetPosition"
                , GetTargetPosition_function_type( &::PyPhysicsShadowController::GetTargetPosition )
                , ( bp::arg("pPositionOut"), bp::arg("pAnglesOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetTeleportDistance
        
            typedef float ( ::PyPhysicsShadowController::*GetTeleportDistance_function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetTeleportDistance"
                , GetTeleportDistance_function_type( &::PyPhysicsShadowController::GetTeleportDistance ) );
        
        }
        { //::PyPhysicsShadowController::IsPhysicallyControlled
        
            typedef bool ( ::PyPhysicsShadowController::*IsPhysicallyControlled_function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "IsPhysicallyControlled"
                , IsPhysicallyControlled_function_type( &::PyPhysicsShadowController::IsPhysicallyControlled ) );
        
        }
        { //::PyPhysicsShadowController::MaxSpeed
        
            typedef void ( ::PyPhysicsShadowController::*MaxSpeed_function_type )( float,float ) ;
            
            PhysicsShadowController_exposer.def( 
                "MaxSpeed"
                , MaxSpeed_function_type( &::PyPhysicsShadowController::MaxSpeed )
                , ( bp::arg("maxSpeed"), bp::arg("maxAngularSpeed") ) );
        
        }
        { //::PyPhysicsShadowController::NonZero
        
            typedef bool ( ::PyPhysicsShadowController::*__nonzero___function_type )(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "__nonzero__"
                , __nonzero___function_type( &::PyPhysicsShadowController::NonZero ) );
        
        }
        { //::PyPhysicsShadowController::ObjectMaterialChanged
        
            typedef void ( ::PyPhysicsShadowController::*ObjectMaterialChanged_function_type )( int ) ;
            
            PhysicsShadowController_exposer.def( 
                "ObjectMaterialChanged"
                , ObjectMaterialChanged_function_type( &::PyPhysicsShadowController::ObjectMaterialChanged )
                , ( bp::arg("materialIndex") ) );
        
        }
        { //::PyPhysicsShadowController::SetPhysicallyControlled
        
            typedef void ( ::PyPhysicsShadowController::*SetPhysicallyControlled_function_type )( bool ) ;
            
            PhysicsShadowController_exposer.def( 
                "SetPhysicallyControlled"
                , SetPhysicallyControlled_function_type( &::PyPhysicsShadowController::SetPhysicallyControlled )
                , ( bp::arg("isPhysicallyControlled") ) );
        
        }
        { //::PyPhysicsShadowController::SetTeleportDistance
        
            typedef void ( ::PyPhysicsShadowController::*SetTeleportDistance_function_type )( float ) ;
            
            PhysicsShadowController_exposer.def( 
                "SetTeleportDistance"
                , SetTeleportDistance_function_type( &::PyPhysicsShadowController::SetTeleportDistance )
                , ( bp::arg("teleportDistance") ) );
        
        }
        { //::PyPhysicsShadowController::StepUp
        
            typedef void ( ::PyPhysicsShadowController::*StepUp_function_type )( float ) ;
            
            PhysicsShadowController_exposer.def( 
                "StepUp"
                , StepUp_function_type( &::PyPhysicsShadowController::StepUp )
                , ( bp::arg("height") ) );
        
        }
        { //::PyPhysicsShadowController::Update
        
            typedef void ( ::PyPhysicsShadowController::*Update_function_type )( ::Vector const &,::QAngle const &,float ) ;
            
            PhysicsShadowController_exposer.def( 
                "Update"
                , Update_function_type( &::PyPhysicsShadowController::Update )
                , ( bp::arg("position"), bp::arg("angles"), bp::arg("timeOffset") ) );
        
        }
        { //::PyPhysicsShadowController::UseShadowMaterial
        
            typedef void ( ::PyPhysicsShadowController::*UseShadowMaterial_function_type )( bool ) ;
            
            PhysicsShadowController_exposer.def( 
                "UseShadowMaterial"
                , UseShadowMaterial_function_type( &::PyPhysicsShadowController::UseShadowMaterial )
                , ( bp::arg("bUseShadowMaterial") ) );
        
        }
        PhysicsShadowController_exposer.def( bp::self != bp::self );
        PhysicsShadowController_exposer.def( bp::self == bp::self );
    }

    bp::class_< PyPhysicsSurfaceProps >( "PhysicsSurfaceProps", bp::no_init )    
        .def( 
            "GetPhysicsParameters"
            , (void ( ::PyPhysicsSurfaceProps::* )( int,::surfacephysicsparams_t & ) const)( &::PyPhysicsSurfaceProps::GetPhysicsParameters )
            , ( bp::arg("surfaceDataIndex"), bp::arg("paramsout") ) )    
        .def( 
            "GetPropName"
            , (char const * ( ::PyPhysicsSurfaceProps::* )( int ) const)( &::PyPhysicsSurfaceProps::GetPropName )
            , ( bp::arg("surfaceDataIndex") ) )    
        .def( 
            "GetString"
            , (char const * ( ::PyPhysicsSurfaceProps::* )( short unsigned int ) const)( &::PyPhysicsSurfaceProps::GetString )
            , ( bp::arg("stringTableIndex") ) )    
        .def( 
            "GetSurfaceData"
            , (::surfacedata_t ( ::PyPhysicsSurfaceProps::* )( int ) )( &::PyPhysicsSurfaceProps::GetSurfaceData )
            , ( bp::arg("surfaceDataIndex") ) )    
        .def( 
            "GetSurfaceIndex"
            , (int ( ::PyPhysicsSurfaceProps::* )( char const * ) const)( &::PyPhysicsSurfaceProps::GetSurfaceIndex )
            , ( bp::arg("pSurfacePropName") ) )    
        .def( 
            "ParseSurfaceData"
            , (int ( ::PyPhysicsSurfaceProps::* )( char const *,char const * ) )( &::PyPhysicsSurfaceProps::ParseSurfaceData )
            , ( bp::arg("pFilename"), bp::arg("pTextfile") ) )    
        .def( 
            "SurfacePropCount"
            , (int ( ::PyPhysicsSurfaceProps::* )(  ) const)( &::PyPhysicsSurfaceProps::SurfacePropCount ) );

    bp::class_< surfaceaudioparams_t >( "surfaceaudioparams_t" )    
        .def_readwrite( "hardThreshold", &surfaceaudioparams_t::hardThreshold )    
        .def_readwrite( "hardVelocityThreshold", &surfaceaudioparams_t::hardVelocityThreshold )    
        .def_readwrite( "hardnessFactor", &surfaceaudioparams_t::hardnessFactor )    
        .def_readwrite( "reflectivity", &surfaceaudioparams_t::reflectivity )    
        .def_readwrite( "roughThreshold", &surfaceaudioparams_t::roughThreshold )    
        .def_readwrite( "roughnessFactor", &surfaceaudioparams_t::roughnessFactor );

    bp::class_< surfacedata_t >( "surfacedata_t" )    
        .def_readwrite( "audio", &surfacedata_t::audio )    
        .def_readwrite( "game", &surfacedata_t::game )    
        .def_readwrite( "physics", &surfacedata_t::physics )    
        .def_readwrite( "soundhandles", &surfacedata_t::soundhandles )    
        .def_readwrite( "sounds", &surfacedata_t::sounds );

    bp::class_< surfacegameprops_t >( "surfacegameprops_t" )    
        .def_readwrite( "climbable", &surfacegameprops_t::climbable )    
        .def_readwrite( "jumpFactor", &surfacegameprops_t::jumpFactor )    
        .def_readwrite( "material", &surfacegameprops_t::material )    
        .def_readwrite( "maxSpeedFactor", &surfacegameprops_t::maxSpeedFactor )    
        .def_readwrite( "pad", &surfacegameprops_t::pad );

    bp::class_< surfacephysicsparams_t >( "surfacephysicsparams_t" )    
        .def_readwrite( "dampening", &surfacephysicsparams_t::dampening )    
        .def_readwrite( "density", &surfacephysicsparams_t::density )    
        .def_readwrite( "elasticity", &surfacephysicsparams_t::elasticity )    
        .def_readwrite( "friction", &surfacephysicsparams_t::friction )    
        .def_readwrite( "thickness", &surfacephysicsparams_t::thickness );

    bp::class_< surfacesoundhandles_t >( "surfacesoundhandles_t" )    
        .def_readwrite( "breakSound", &surfacesoundhandles_t::breakSound )    
        .def_readwrite( "bulletImpact", &surfacesoundhandles_t::bulletImpact )    
        .def_readwrite( "impactHard", &surfacesoundhandles_t::impactHard )    
        .def_readwrite( "impactSoft", &surfacesoundhandles_t::impactSoft )    
        .def_readwrite( "rolling", &surfacesoundhandles_t::rolling )    
        .def_readwrite( "scrapeRough", &surfacesoundhandles_t::scrapeRough )    
        .def_readwrite( "scrapeSmooth", &surfacesoundhandles_t::scrapeSmooth )    
        .def_readwrite( "stepleft", &surfacesoundhandles_t::stepleft )    
        .def_readwrite( "stepright", &surfacesoundhandles_t::stepright )    
        .def_readwrite( "strainSound", &surfacesoundhandles_t::strainSound );

    bp::class_< surfacesoundnames_t >( "surfacesoundnames_t" )    
        .def_readwrite( "breakSound", &surfacesoundnames_t::breakSound )    
        .def_readwrite( "bulletImpact", &surfacesoundnames_t::bulletImpact )    
        .def_readwrite( "impactHard", &surfacesoundnames_t::impactHard )    
        .def_readwrite( "impactSoft", &surfacesoundnames_t::impactSoft )    
        .def_readwrite( "rolling", &surfacesoundnames_t::rolling )    
        .def_readwrite( "scrapeRough", &surfacesoundnames_t::scrapeRough )    
        .def_readwrite( "scrapeSmooth", &surfacesoundnames_t::scrapeSmooth )    
        .def_readwrite( "stepleft", &surfacesoundnames_t::stepleft )    
        .def_readwrite( "stepright", &surfacesoundnames_t::stepright )    
        .def_readwrite( "strainSound", &surfacesoundnames_t::strainSound );

    { //::PhysIsInCallback
    
        typedef bool ( *PhysIsInCallback_function_type )(  );
        
        bp::def( 
            "PhysIsInCallback"
            , PhysIsInCallback_function_type( &::PhysIsInCallback ) );
    
    }

    { //::Physics_RunThinkFunctions
    
        typedef void ( *Physics_RunThinkFunctions_function_type )( bool );
        
        bp::def( 
            "Physics_RunThinkFunctions"
            , Physics_RunThinkFunctions_function_type( &::Physics_RunThinkFunctions )
            , ( bp::arg("simulating") ) );
    
    }

    { //::PyCalculateDefaultPhysicsDamage
    
        typedef float ( *CalculateDefaultPhysicsDamage_function_type )( int,::gamevcollisionevent_t *,float,bool,int &,char const *,bool );
        
        bp::def( 
            "CalculateDefaultPhysicsDamage"
            , CalculateDefaultPhysicsDamage_function_type( &::PyCalculateDefaultPhysicsDamage )
            , ( bp::arg("index"), bp::arg("pEvent"), bp::arg("energyScale"), bp::arg("allowStaticDamage"), bp::arg("damageTypeOut"), bp::arg("iszDamageTableName")=bp::object(), bp::arg("bDamageFromHeldObjects")=(bool)(false) ) );
    
    }

    { //::PyForcePhysicsSimulate
    
        typedef void ( *ForcePhysicsSimulate_function_type )(  );
        
        bp::def( 
            "ForcePhysicsSimulate"
            , ForcePhysicsSimulate_function_type( &::PyForcePhysicsSimulate ) );
    
    }

    { //::PyPhysCallbackDamage
    
        typedef void ( *PhysCallbackDamage_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & );
        
        bp::def( 
            "PhysCallbackDamage"
            , PhysCallbackDamage_function_type( &::PyPhysCallbackDamage )
            , ( bp::arg("pEntity"), bp::arg("info") ) );
    
    }

    { //::PyPhysCallbackDamage
    
        typedef void ( *PhysCallbackDamage_function_type )( ::CBaseEntity *,::CTakeDamageInfo const &,::gamevcollisionevent_t &,int );
        
        bp::def( 
            "PhysCallbackDamage"
            , PhysCallbackDamage_function_type( &::PyPhysCallbackDamage )
            , ( bp::arg("pEntity"), bp::arg("info"), bp::arg("event"), bp::arg("hurtIndex") ) );
    
    }

    { //::PyPhysCallbackImpulse
    
        typedef void ( *PhysCallbackImpulse_function_type )( ::PyPhysicsObject &,::Vector const &,::AngularImpulse const & );
        
        bp::def( 
            "PhysCallbackImpulse"
            , PhysCallbackImpulse_function_type( &::PyPhysCallbackImpulse )
            , ( bp::arg("pyPhysicsObject"), bp::arg("vecCenterForce"), bp::arg("vecCenterTorque") ) );
    
    }

    { //::PyPhysCallbackRemove
    
        typedef void ( *PhysCallbackRemove_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "PhysCallbackRemove"
            , PhysCallbackRemove_function_type( &::PyPhysCallbackRemove )
            , ( bp::arg("pRemove") ) );
    
    }

    { //::PyPhysCallbackSetVelocity
    
        typedef void ( *PhysCallbackSetVelocity_function_type )( ::PyPhysicsObject &,::Vector const & );
        
        bp::def( 
            "PhysCallbackSetVelocity"
            , PhysCallbackSetVelocity_function_type( &::PyPhysCallbackSetVelocity )
            , ( bp::arg("pyPhysicsObject"), bp::arg("vecVelocity") ) );
    
    }

    { //::PyPhysDestroyObject
    
        typedef void ( *PhysDestroyObject_function_type )( ::PyPhysicsObject *,::CBaseEntity * );
        
        bp::def( 
            "PhysDestroyObject"
            , PhysDestroyObject_function_type( &::PyPhysDestroyObject )
            , ( bp::arg("pPyPhysObj"), bp::arg("pEntity")=bp::object() ) );
    
    }

    { //::PyPhysModelCreateBox
    
        typedef ::boost::python::object ( *PhysModelCreateBox_function_type )( ::CBaseEntity *,::Vector const &,::Vector const &,::Vector const &,bool );
        
        bp::def( 
            "PhysModelCreateBox"
            , PhysModelCreateBox_function_type( &::PyPhysModelCreateBox )
            , ( bp::arg("pEntity"), bp::arg("mins"), bp::arg("maxs"), bp::arg("origin"), bp::arg("isStatic") ) );
    
    }

    bp::scope().attr( "physcollision" ) = boost::ref(pyphyscollision);

    bp::scope().attr( "physprops" ) = boost::ref(pyphysprops);

    { //::PyPhysModelCreateOBB
    
        typedef ::boost::python::object ( *PhysModelCreateOBB_function_type )( ::CBaseEntity *,::Vector const &,::Vector const &,::Vector const &,::QAngle const &,bool );
        
        bp::def( 
            "PhysModelCreateOBB"
            , PhysModelCreateOBB_function_type( &::PyPhysModelCreateOBB )
            , ( bp::arg("pEntity"), bp::arg("mins"), bp::arg("maxs"), bp::arg("origin"), bp::arg("angle"), bp::arg("isStatic") ) );
    
    }
}
#endif

