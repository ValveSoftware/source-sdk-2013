// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CBaseCombatWeapon_pypp.hpp"

namespace bp = boost::python;

struct CBaseCombatWeapon_wrapper : CBaseCombatWeapon, bp::wrapper< CBaseCombatWeapon > {

    CBaseCombatWeapon_wrapper( )
    : CBaseCombatWeapon( )
      , bp::wrapper< CBaseCombatWeapon >(){
        // null constructor
    
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::Activate(  );
            }
        else
            this->CBaseCombatWeapon::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseCombatWeapon::Activate( );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->CBaseCombatWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseCombatWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::Precache(  );
            }
        else
            this->CBaseCombatWeapon::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseCombatWeapon::Precache( );
    }

    virtual void PrimaryAttack(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PrimaryAttack: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PrimaryAttack(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PrimaryAttack = this->get_override( "PrimaryAttack" );
        if( func_PrimaryAttack.ptr() != Py_None )
            try {
                func_PrimaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::PrimaryAttack(  );
            }
        else
            this->CBaseCombatWeapon::PrimaryAttack(  );
    }
    
    void default_PrimaryAttack(  ) {
        CBaseCombatWeapon::PrimaryAttack( );
    }

    virtual void SecondaryAttack(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SecondaryAttack: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SecondaryAttack(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SecondaryAttack = this->get_override( "SecondaryAttack" );
        if( func_SecondaryAttack.ptr() != Py_None )
            try {
                func_SecondaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::SecondaryAttack(  );
            }
        else
            this->CBaseCombatWeapon::SecondaryAttack(  );
    }
    
    void default_SecondaryAttack(  ) {
        CBaseCombatWeapon::SecondaryAttack( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::Spawn(  );
            }
        else
            this->CBaseCombatWeapon::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBaseCombatWeapon::Spawn( );
    }

    virtual bool CanBecomeRagdoll(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanBecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanBecomeRagdoll(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugGeometryOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugGeometryOverlays(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugTextOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugTextOverlays(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Killed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Killed( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_Killed( boost::ref(info) );
            }
        else
            this->CBaseEntity::Event_Killed( boost::ref(info) );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_Killed( boost::ref(info) );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
            }
        else
            return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::OnTakeDamage( boost::ref(info) );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PassesDamageFilter: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PassesDamageFilter( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }

    virtual void PostClientActive(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostClientActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostClientActive(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostConstructor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostConstructor( szClassname ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void StopLoopingSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoopingSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoopingSounds(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::UpdateOnRemove(  );
            }
        else
            this->CBaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseEntity::UpdateOnRemove( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VPhysicsCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VPhysicsCollision( index, boost::python::ptr(pEvent) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
    #if defined(_WIN32)
    #if defined(_DEBUG)
    Assert( GetCurrentThreadId() == g_hPythonThreadID );
    #elif defined(PY_CHECKTHREADID)
    if( GetCurrentThreadId() != g_hPythonThreadID )
        Error( "GetServerClass: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
    #endif // _DEBUG/PY_CHECKTHREADID
    #endif // _WIN32
    #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
    if( py_log_overrides.GetBool() )
        Msg("Calling GetServerClass(  ) of Class: CBaseCombatWeapon\n");
    #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
    ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>( "pyServerClass", GetPyInstance(), NULL, true );
    if( pServerClass )
        return pServerClass;
    return CBaseCombatWeapon::GetServerClass();
}

};

void register_CBaseCombatWeapon_class(){

    bp::class_< CBaseCombatWeapon_wrapper, bp::bases< CBaseAnimating >, boost::noncopyable >( "CBaseCombatWeapon", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AbortReload"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::AbortReload ) )    
        .def( 
            "Activate"
            , (void ( ::CBaseCombatWeapon::* )(  ) )(&::CBaseCombatWeapon::Activate)
            , (void ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_Activate) )    
        .def( 
            "ActivityListCount"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ActivityListCount ) )    
        .def( 
            "ActivityOverride"
            , (::Activity ( ::CBaseCombatWeapon::* )( ::Activity,bool * ) )( &::CBaseCombatWeapon::ActivityOverride )
            , ( bp::arg("baseAct"), bp::arg("pRequired") ) )    
        .def( 
            "AddViewKick"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::AddViewKick ) )    
        .def( 
            "AddViewmodelBob"
            , (void ( ::CBaseCombatWeapon::* )( ::CBaseViewModel *,::Vector &,::QAngle & ) )( &::CBaseCombatWeapon::AddViewmodelBob )
            , ( bp::arg("viewmodel"), bp::arg("origin"), bp::arg("angles") ) )    
        .def( 
            "AllowsAutoSwitchFrom"
            , (bool ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::AllowsAutoSwitchFrom ) )    
        .def( 
            "AllowsAutoSwitchTo"
            , (bool ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::AllowsAutoSwitchTo ) )    
        .def( 
            "AttemptToMaterialize"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::AttemptToMaterialize ) )    
        .def( 
            "AutoFiresFullClip"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::AutoFiresFullClip ) )    
        .def( 
            "CalcViewmodelBob"
            , (float ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CalcViewmodelBob ) )    
        .def( 
            "CanBePickedUpByNPCs"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CanBePickedUpByNPCs ) )    
        .def( 
            "CanBeSelected"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CanBeSelected ) )    
        .def( 
            "CanDeploy"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CanDeploy ) )    
        .def( 
            "CanHolster"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CanHolster ) )    
        .def( 
            "CanLower"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CanLower ) )    
        .def( 
            "CanOverload"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CanOverload ) )    
        .def( 
            "CanReload"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CanReload ) )    
        .def( 
            "CapabilitiesGet"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CapabilitiesGet ) )    
        .def( 
            "CheckReload"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CheckReload ) )    
        .def( 
            "CheckRespawn"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::CheckRespawn ) )    
        .def( 
            "Clip1"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Clip1 ) )    
        .def( 
            "Clip2"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Clip2 ) )    
        .def( 
            "DefaultDeploy"
            , (bool ( ::CBaseCombatWeapon::* )( char *,char *,int,char * ) )( &::CBaseCombatWeapon::DefaultDeploy )
            , ( bp::arg("szViewModel"), bp::arg("szWeaponModel"), bp::arg("iActivity"), bp::arg("szAnimExt") ) )    
        .def( 
            "DefaultReload"
            , (bool ( ::CBaseCombatWeapon::* )( int,int,int ) )( &::CBaseCombatWeapon::DefaultReload )
            , ( bp::arg("iClipSize1"), bp::arg("iClipSize2"), bp::arg("iActivity") ) )    
        .def( 
            "DefaultTouch"
            , (void ( ::CBaseCombatWeapon::* )( ::CBaseEntity * ) )( &::CBaseCombatWeapon::DefaultTouch )
            , ( bp::arg("pOther") ) )    
        .def( 
            "Delete"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Delete ) )    
        .def( 
            "Deploy"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Deploy ) )    
        .def( 
            "DestroyItem"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::DestroyItem ) )    
        .def( 
            "Detach"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Detach ) )    
        .def( 
            "DisplayAltFireHudHint"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::DisplayAltFireHudHint ) )    
        .def( 
            "DisplayReloadHudHint"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::DisplayReloadHudHint ) )    
        .def( 
            "Drop"
            , (void ( ::CBaseCombatWeapon::* )( ::Vector const & ) )( &::CBaseCombatWeapon::Drop )
            , ( bp::arg("vecVelocity") ) )    
        .def( 
            "Equip"
            , (void ( ::CBaseCombatWeapon::* )( ::CBaseCombatCharacter * ) )( &::CBaseCombatWeapon::Equip )
            , ( bp::arg("pOwner") ) )    
        .def( 
            "FallInit"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::FallInit ) )    
        .def( 
            "FallThink"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::FallThink ) )    
        .def( 
            "FinishReload"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::FinishReload ) )    
        .def( 
            "GetActivity"
            , (::Activity ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetActivity ) )    
        .def( 
            "GetAnimPrefix"
            , (char const * ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetAnimPrefix ) )    
        .def( 
            "GetAvailableWeaponsInBox"
            , (int (*)( ::CBaseCombatWeapon * *,int,::Vector const &,::Vector const & ))( &::CBaseCombatWeapon::GetAvailableWeaponsInBox )
            , ( bp::arg("pList"), bp::arg("listMax"), bp::arg("mins"), bp::arg("maxs") ) )    
        .def( 
            "GetBulletSpread"
            , (::Vector const & ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetBulletSpread )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetBulletSpread"
            , (::Vector ( ::CBaseCombatWeapon::* )( ::WeaponProficiency_t ) )( &::CBaseCombatWeapon::GetBulletSpread )
            , ( bp::arg("proficiency") ) )    
        .def( 
            "GetBulletType"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetBulletType ) )    
        .def( 
            "GetControlPanelClassName"
            , (void ( ::CBaseCombatWeapon::* )( int,char const * & ) )( &::CBaseCombatWeapon::GetControlPanelClassName )
            , ( bp::arg("nPanelIndex"), bp::arg("pPanelName") ) )    
        .def( 
            "GetControlPanelInfo"
            , (void ( ::CBaseCombatWeapon::* )( int,char const * & ) )( &::CBaseCombatWeapon::GetControlPanelInfo )
            , ( bp::arg("nPanelIndex"), bp::arg("pPanelName") ) )    
        .def( 
            "GetDamage"
            , (float ( ::CBaseCombatWeapon::* )( float,int ) )( &::CBaseCombatWeapon::GetDamage )
            , ( bp::arg("flDistance"), bp::arg("iLocation") ) )    
        .def( 
            "GetDefaultAnimSpeed"
            , (float ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetDefaultAnimSpeed ) )    
        .def( 
            "GetDefaultClip1"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetDefaultClip1 ) )    
        .def( 
            "GetDefaultClip2"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetDefaultClip2 ) )    
        .def( 
            "GetDrawActivity"
            , (::Activity ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetDrawActivity ) )    
        .def( 
            "GetFireRate"
            , (float ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetFireRate ) )    
        .def( 
            "GetIdealActivity"
            , (::Activity ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetIdealActivity ) )    
        .def( 
            "GetIdealSequence"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetIdealSequence ) )    
        .def( 
            "GetLastWeapon"
            , (::CBaseCombatWeapon * ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetLastWeapon )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetMaxAutoAimDeflection"
            , (float ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetMaxAutoAimDeflection ) )    
        .def( 
            "GetMaxBurst"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetMaxBurst ) )    
        .def( 
            "GetMaxClip1"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetMaxClip1 ) )    
        .def( 
            "GetMaxClip2"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetMaxClip2 ) )    
        .def( 
            "GetMaxRestTime"
            , (float ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetMaxRestTime ) )    
        .def( 
            "GetMinBurst"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetMinBurst ) )    
        .def( 
            "GetMinRestTime"
            , (float ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetMinRestTime ) )    
        .def( 
            "GetName"
            , (char const * ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetName ) )    
        .def( 
            "GetOwner"
            , (::CBaseCombatCharacter * ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetOwner )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetPosition"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetPosition ) )    
        .def( 
            "GetPrimaryAmmoCount"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetPrimaryAmmoCount ) )    
        .def( 
            "GetPrimaryAmmoType"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetPrimaryAmmoType ) )    
        .def( 
            "GetPrimaryAttackActivity"
            , (::Activity ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetPrimaryAttackActivity ) )    
        .def( 
            "GetPrintName"
            , (char const * ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetPrintName ) )    
        .def( 
            "GetPyNetworkType"
            , (int (*)(  ))( &::CBaseCombatWeapon::GetPyNetworkType ) )    
        .def( 
            "GetRandomBurst"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetRandomBurst ) )    
        .def( 
            "GetRumbleEffect"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetRumbleEffect ) )    
        .def( 
            "GetSecondaryAmmoCount"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetSecondaryAmmoCount ) )    
        .def( 
            "GetSecondaryAmmoType"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetSecondaryAmmoType ) )    
        .def( 
            "GetSecondaryAttackActivity"
            , (::Activity ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetSecondaryAttackActivity ) )    
        .def( 
            "GetShootSound"
            , (char const * ( ::CBaseCombatWeapon::* )( int ) const)( &::CBaseCombatWeapon::GetShootSound )
            , ( bp::arg("iIndex") ) )    
        .def( 
            "GetSkinOverride"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetSkinOverride ) )    
        .def( 
            "GetSlot"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetSlot ) )    
        .def( 
            "GetSpreadBias"
            , (float ( ::CBaseCombatWeapon::* )( ::WeaponProficiency_t ) )( &::CBaseCombatWeapon::GetSpreadBias )
            , ( bp::arg("proficiency") ) )    
        .def( 
            "GetSubType"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetSubType ) )    
        .def( 
            "GetViewModel"
            , (char const * ( ::CBaseCombatWeapon::* )( int ) const)( &::CBaseCombatWeapon::GetViewModel )
            , ( bp::arg("viewmodelindex")=(int)(0) ) )    
        .def( 
            "GetViewModelSequenceDuration"
            , (float ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetViewModelSequenceDuration ) )    
        .def( 
            "GetWeaponFlags"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetWeaponFlags ) )    
        .def( 
            "GetWeaponIdleTime"
            , (float ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GetWeaponIdleTime ) )    
        .def( 
            "GetWeight"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetWeight ) )    
        .def( 
            "GetWorldModel"
            , (char const * ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetWorldModel ) )    
        .def( 
            "GetWpnData"
            , (::FileWeaponInfo_t const & ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::GetWpnData )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GiveDefaultAmmo"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::GiveDefaultAmmo ) )    
        .def( 
            "GiveTo"
            , (void ( ::CBaseCombatWeapon::* )( ::CBaseEntity * ) )( &::CBaseCombatWeapon::GiveTo )
            , ( bp::arg("pOther") ) )    
        .def( 
            "HandleAnimEvent"
            , (void ( ::CBaseCombatWeapon::* )( ::animevent_t * ) )( &::CBaseCombatWeapon::HandleAnimEvent )
            , ( bp::arg("pEvent") ) )    
        .def( 
            "HandleFireOnEmpty"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::HandleFireOnEmpty ) )    
        .def( 
            "HasAmmo"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::HasAmmo ) )    
        .def( 
            "HasAnyAmmo"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::HasAnyAmmo ) )    
        .def( 
            "HasPrimaryAmmo"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::HasPrimaryAmmo ) )    
        .def( 
            "HasSecondaryAmmo"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::HasSecondaryAmmo ) )    
        .def( 
            "HasWeaponIdleTimeElapsed"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::HasWeaponIdleTimeElapsed ) )    
        .def( 
            "HideThink"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::HideThink ) )    
        .def( 
            "Holster"
            , (bool ( ::CBaseCombatWeapon::* )( ::CBaseCombatWeapon * ) )( &::CBaseCombatWeapon::Holster )
            , ( bp::arg("pSwitchingTo")=bp::object() ) )    
        .def( 
            "HolsterOnDetach"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::HolsterOnDetach ) )    
        .def( 
            "InputHideWeapon"
            , (void ( ::CBaseCombatWeapon::* )( ::inputdata_t & ) )( &::CBaseCombatWeapon::InputHideWeapon )
            , ( bp::arg("inputdata") ) )    
        .def( 
            "IsAllowedToSwitch"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::IsAllowedToSwitch ) )    
        .def( 
            "IsBaseCombatWeapon"
            , (bool ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::IsBaseCombatWeapon ) )    
        .def( 
            "IsConstrained"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::IsConstrained ) )    
        .def( 
            "IsHolstered"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::IsHolstered ) )    
        .def( 
            "IsLocked"
            , (bool ( ::CBaseCombatWeapon::* )( ::CBaseEntity * ) )( &::CBaseCombatWeapon::IsLocked )
            , ( bp::arg("pAsker") ) )    
        .def( 
            "IsMeleeWeapon"
            , (bool ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::IsMeleeWeapon ) )    
        .def( 
            "IsPredicted"
            , (bool ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::IsPredicted ) )    
        .def( 
            "IsRemoveable"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::IsRemoveable ) )    
        .def( 
            "IsViewModelSequenceFinished"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::IsViewModelSequenceFinished ) )    
        .def( 
            "IsWeaponVisible"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::IsWeaponVisible ) )    
        .def( 
            "IsWeaponZoomed"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::IsWeaponZoomed ) )    
        .def( 
            "ItemBusyFrame"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ItemBusyFrame ) )    
        .def( 
            "ItemHolsterFrame"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ItemHolsterFrame ) )    
        .def( 
            "ItemPostFrame"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ItemPostFrame ) )    
        .def( 
            "ItemPreFrame"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ItemPreFrame ) )    
        .def( 
            "Kill"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Kill ) )    
        .def( 
            "Lock"
            , (void ( ::CBaseCombatWeapon::* )( float,::CBaseEntity * ) )( &::CBaseCombatWeapon::Lock )
            , ( bp::arg("lockTime"), bp::arg("pLocker") ) )    
        .def( 
            "Lower"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Lower ) )    
        .def( 
            "MaintainIdealActivity"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::MaintainIdealActivity ) )    
        .def( 
            "MakeTracer"
            , (void ( ::CBaseCombatWeapon::* )( ::Vector const &,::trace_t const &,int ) )(&::CBaseCombatWeapon::MakeTracer)
            , (void ( CBaseCombatWeapon_wrapper::* )( ::Vector const &,::trace_t const &,int ) )(&CBaseCombatWeapon_wrapper::default_MakeTracer)
            , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) )    
        .def( 
            "Materialize"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Materialize ) )    
        .def( 
            "MyCombatWeaponPointer"
            , (::CBaseCombatWeapon * ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::MyCombatWeaponPointer )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "NetworkStateChanged_m_nNextThinkTick"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick ) )    
        .def( 
            "NetworkStateChanged_m_nNextThinkTick"
            , (void ( ::CBaseCombatWeapon::* )( void * ) )( &::CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick )
            , ( bp::arg("pVar") ) )    
        .def( 
            "ObjectCaps"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ObjectCaps ) )    
        .def( 
            "OnActiveStateChanged"
            , (void ( ::CBaseCombatWeapon::* )( int ) )( &::CBaseCombatWeapon::OnActiveStateChanged )
            , ( bp::arg("iOldState") ) )    
        .def( 
            "OnPickedUp"
            , (void ( ::CBaseCombatWeapon::* )( ::CBaseCombatCharacter * ) )( &::CBaseCombatWeapon::OnPickedUp )
            , ( bp::arg("pNewOwner") ) )    
        .def( 
            "Operator_ForceNPCFire"
            , (void ( ::CBaseCombatWeapon::* )( ::CBaseCombatCharacter *,bool ) )( &::CBaseCombatWeapon::Operator_ForceNPCFire )
            , ( bp::arg("pOperator"), bp::arg("bSecondary") ) )    
        .def( 
            "Operator_FrameUpdate"
            , (void ( ::CBaseCombatWeapon::* )( ::CBaseCombatCharacter * ) )( &::CBaseCombatWeapon::Operator_FrameUpdate )
            , ( bp::arg("pOperator") ) )    
        .def( 
            "Operator_HandleAnimEvent"
            , (void ( ::CBaseCombatWeapon::* )( ::animevent_t *,::CBaseCombatCharacter * ) )( &::CBaseCombatWeapon::Operator_HandleAnimEvent )
            , ( bp::arg("pEvent"), bp::arg("pOperator") ) )    
        .def( 
            "Precache"
            , (void ( ::CBaseCombatWeapon::* )(  ) )(&::CBaseCombatWeapon::Precache)
            , (void ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_Precache) )    
        .def( 
            "PrimaryAttack"
            , (void ( ::CBaseCombatWeapon::* )(  ) )(&::CBaseCombatWeapon::PrimaryAttack)
            , (void ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_PrimaryAttack) )    
        .def( 
            "Ready"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Ready ) )    
        .def( 
            "Reload"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Reload ) )    
        .def( 
            "ReloadOrSwitchWeapons"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ReloadOrSwitchWeapons ) )    
        .def( 
            "ReloadsSingly"
            , (bool ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::ReloadsSingly ) )    
        .def( 
            "RescindAltFireHudHint"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::RescindAltFireHudHint ) )    
        .def( 
            "RescindReloadHudHint"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::RescindReloadHudHint ) )    
        .def( 
            "Respawn"
            , (::CBaseEntity * ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::Respawn )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "SecondaryAttack"
            , (void ( ::CBaseCombatWeapon::* )(  ) )(&::CBaseCombatWeapon::SecondaryAttack)
            , (void ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_SecondaryAttack) )    
        .def( 
            "SendViewModelAnim"
            , (void ( ::CBaseCombatWeapon::* )( int ) )( &::CBaseCombatWeapon::SendViewModelAnim )
            , ( bp::arg("nSequence") ) )    
        .def( 
            "SendWeaponAnim"
            , (bool ( ::CBaseCombatWeapon::* )( int ) )( &::CBaseCombatWeapon::SendWeaponAnim )
            , ( bp::arg("iActivity") ) )    
        .def( 
            "SetActivity"
            , (void ( ::CBaseCombatWeapon::* )( ::Activity,float ) )( &::CBaseCombatWeapon::SetActivity )
            , ( bp::arg("act"), bp::arg("duration") ) )    
        .def( 
            "SetActivity"
            , (void ( ::CBaseCombatWeapon::* )( ::Activity ) )( &::CBaseCombatWeapon::SetActivity )
            , ( bp::arg("eActivity") ) )    
        .def( 
            "SetIdealActivity"
            , (bool ( ::CBaseCombatWeapon::* )( ::Activity ) )( &::CBaseCombatWeapon::SetIdealActivity )
            , ( bp::arg("ideal") ) )    
        .def( 
            "SetOwner"
            , (void ( ::CBaseCombatWeapon::* )( ::CBaseCombatCharacter * ) )( &::CBaseCombatWeapon::SetOwner )
            , ( bp::arg("owner") ) )    
        .def( 
            "SetPickupTouch"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::SetPickupTouch ) )    
        .def( 
            "SetPrimaryAmmoCount"
            , (void ( ::CBaseCombatWeapon::* )( int ) )( &::CBaseCombatWeapon::SetPrimaryAmmoCount )
            , ( bp::arg("count") ) )    
        .def( 
            "SetRemoveable"
            , (void ( ::CBaseCombatWeapon::* )( bool ) )( &::CBaseCombatWeapon::SetRemoveable )
            , ( bp::arg("bRemoveable") ) )    
        .def( 
            "SetSecondaryAmmoCount"
            , (void ( ::CBaseCombatWeapon::* )( int ) )( &::CBaseCombatWeapon::SetSecondaryAmmoCount )
            , ( bp::arg("count") ) )    
        .def( 
            "SetSubType"
            , (void ( ::CBaseCombatWeapon::* )( int ) )( &::CBaseCombatWeapon::SetSubType )
            , ( bp::arg("iType") ) )    
        .def( 
            "SetViewModel"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::SetViewModel ) )    
        .def( 
            "SetViewModelIndex"
            , (void ( ::CBaseCombatWeapon::* )( int ) )( &::CBaseCombatWeapon::SetViewModelIndex )
            , ( bp::arg("index")=(int)(0) ) )    
        .def( 
            "SetWeaponIdleTime"
            , (void ( ::CBaseCombatWeapon::* )( float ) )( &::CBaseCombatWeapon::SetWeaponIdleTime )
            , ( bp::arg("time") ) )    
        .def( 
            "SetWeaponVisible"
            , (void ( ::CBaseCombatWeapon::* )( bool ) )( &::CBaseCombatWeapon::SetWeaponVisible )
            , ( bp::arg("visible") ) )    
        .def( 
            "ShouldBlockPrimaryFire"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ShouldBlockPrimaryFire ) )    
        .def( 
            "ShouldDisplayAltFireHUDHint"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ShouldDisplayAltFireHUDHint ) )    
        .def( 
            "ShouldDisplayReloadHUDHint"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ShouldDisplayReloadHUDHint ) )    
        .def( 
            "ShouldShowControlPanels"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ShouldShowControlPanels ) )    
        .def( 
            "ShouldUseLargeViewModelVROverride"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::ShouldUseLargeViewModelVROverride ) )    
        .def( 
            "Spawn"
            , (void ( ::CBaseCombatWeapon::* )(  ) )(&::CBaseCombatWeapon::Spawn)
            , (void ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_Spawn) )    
        .def( 
            "StartSprinting"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::StartSprinting ) )    
        .def( 
            "StopSprinting"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::StopSprinting ) )    
        .def( 
            "StopWeaponSound"
            , (void ( ::CBaseCombatWeapon::* )( ::WeaponSound_t ) )( &::CBaseCombatWeapon::StopWeaponSound )
            , ( bp::arg("sound_type") ) )    
        .def( 
            "UpdateAutoFire"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::UpdateAutoFire ) )    
        .def( 
            "UpdateClientData"
            , (int ( ::CBaseCombatWeapon::* )( ::CBasePlayer * ) )( &::CBaseCombatWeapon::UpdateClientData )
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "UpdateTransmitState"
            , (int ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::UpdateTransmitState ) )    
        .def( 
            "Use"
            , (void ( ::CBaseCombatWeapon::* )( ::CBaseEntity *,::CBaseEntity *,::USE_TYPE,float ) )( &::CBaseCombatWeapon::Use )
            , ( bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("useType"), bp::arg("value") ) )    
        .def( 
            "UsesClipsForAmmo1"
            , (bool ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::UsesClipsForAmmo1 ) )    
        .def( 
            "UsesClipsForAmmo2"
            , (bool ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::UsesClipsForAmmo2 ) )    
        .def( 
            "UsesPrimaryAmmo"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::UsesPrimaryAmmo ) )    
        .def( 
            "UsesSecondaryAmmo"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::UsesSecondaryAmmo ) )    
        .def( 
            "VisibleInWeaponSelection"
            , (bool ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::VisibleInWeaponSelection ) )    
        .def( 
            "WeaponAutoAimScale"
            , (float ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::WeaponAutoAimScale ) )    
        .def( 
            "WeaponIdle"
            , (void ( ::CBaseCombatWeapon::* )(  ) )( &::CBaseCombatWeapon::WeaponIdle ) )    
        .def( 
            "WeaponLOSCondition"
            , (bool ( ::CBaseCombatWeapon::* )( ::Vector const &,::Vector const &,bool ) )( &::CBaseCombatWeapon::WeaponLOSCondition )
            , ( bp::arg("ownerPos"), bp::arg("targetPos"), bp::arg("bSetConditions") ) )    
        .def( 
            "WeaponMeleeAttack1Condition"
            , (int ( ::CBaseCombatWeapon::* )( float,float ) )( &::CBaseCombatWeapon::WeaponMeleeAttack1Condition )
            , ( bp::arg("flDot"), bp::arg("flDist") ) )    
        .def( 
            "WeaponMeleeAttack2Condition"
            , (int ( ::CBaseCombatWeapon::* )( float,float ) )( &::CBaseCombatWeapon::WeaponMeleeAttack2Condition )
            , ( bp::arg("flDot"), bp::arg("flDist") ) )    
        .def( 
            "WeaponRangeAttack1Condition"
            , (int ( ::CBaseCombatWeapon::* )( float,float ) )( &::CBaseCombatWeapon::WeaponRangeAttack1Condition )
            , ( bp::arg("flDot"), bp::arg("flDist") ) )    
        .def( 
            "WeaponRangeAttack2Condition"
            , (int ( ::CBaseCombatWeapon::* )( float,float ) )( &::CBaseCombatWeapon::WeaponRangeAttack2Condition )
            , ( bp::arg("flDot"), bp::arg("flDist") ) )    
        .def( 
            "WeaponSound"
            , (void ( ::CBaseCombatWeapon::* )( ::WeaponSound_t,float ) )( &::CBaseCombatWeapon::WeaponSound )
            , ( bp::arg("sound_type"), bp::arg("soundtime")=0.0f ) )    
        .def( 
            "WeaponState"
            , (int ( ::CBaseCombatWeapon::* )(  ) const)( &::CBaseCombatWeapon::WeaponState ) )    
        .def( 
            "CanBecomeRagdoll"
            , (bool ( ::CBaseAnimating::* )(  ) )(&::CBaseAnimating::CanBecomeRagdoll)
            , (bool ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_CanBecomeRagdoll) )    
        .def( 
            "CreateVPhysics"
            , (bool ( ::CBaseEntity::* )(  ) )(&::CBaseEntity::CreateVPhysics)
            , (bool ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_CreateVPhysics) )    
        .def( 
            "DoImpactEffect"
            , (void ( ::CBaseEntity::* )( ::trace_t &,int ) )(&::CBaseEntity::DoImpactEffect)
            , (void ( CBaseCombatWeapon_wrapper::* )( ::trace_t &,int ) )(&CBaseCombatWeapon_wrapper::default_DoImpactEffect)
            , ( bp::arg("tr"), bp::arg("nDamageType") ) )    
        .def( 
            "DrawDebugGeometryOverlays"
            , (void ( ::CBaseEntity::* )(  ) )(&::CBaseEntity::DrawDebugGeometryOverlays)
            , (void ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_DrawDebugGeometryOverlays) )    
        .def( 
            "DrawDebugTextOverlays"
            , (int ( ::CBaseAnimating::* )(  ) )(&::CBaseAnimating::DrawDebugTextOverlays)
            , (int ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_DrawDebugTextOverlays) )    
        .def( 
            "Event_Killed"
            , (void ( ::CBaseEntity::* )( ::CTakeDamageInfo const & ) )(&::CBaseEntity::Event_Killed)
            , (void ( CBaseCombatWeapon_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBaseCombatWeapon_wrapper::default_Event_Killed)
            , ( bp::arg("info") ) )    
        .def( 
            "GetTracerType"
            , (char const * ( ::CBaseEntity::* )(  ) )(&::CBaseEntity::GetTracerType)
            , (char const * ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_GetTracerType) )    
        .def( 
            "KeyValue"
            , (bool ( ::CBaseEntity::* )( char const *,char const * ) )(&::CBaseEntity::KeyValue)
            , (bool ( CBaseCombatWeapon_wrapper::* )( char const *,char const * ) )(&CBaseCombatWeapon_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("szValue") ) )    
        .def( 
            "KeyValue"
            , (bool ( ::CBaseEntity::* )( char const *,float ) )(&::CBaseEntity::KeyValue)
            , (bool ( CBaseCombatWeapon_wrapper::* )( char const *,float ) )(&CBaseCombatWeapon_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("flValue") ) )    
        .def( 
            "KeyValue"
            , (bool ( ::CBaseEntity::* )( char const *,::Vector const & ) )(&::CBaseEntity::KeyValue)
            , (bool ( CBaseCombatWeapon_wrapper::* )( char const *,::Vector const & ) )(&CBaseCombatWeapon_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("vecValue") ) )    
        .def( 
            "OnTakeDamage"
            , (int ( ::CBaseEntity::* )( ::CTakeDamageInfo const & ) )(&::CBaseEntity::OnTakeDamage)
            , (int ( CBaseCombatWeapon_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBaseCombatWeapon_wrapper::default_OnTakeDamage)
            , ( bp::arg("info") ) )    
        .def( 
            "PassesDamageFilter"
            , (bool ( ::CBaseEntity::* )( ::CTakeDamageInfo const & ) )(&::CBaseEntity::PassesDamageFilter)
            , (bool ( CBaseCombatWeapon_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBaseCombatWeapon_wrapper::default_PassesDamageFilter)
            , ( bp::arg("info") ) )    
        .def( 
            "PostClientActive"
            , (void ( ::CBaseEntity::* )(  ) )(&::CBaseEntity::PostClientActive)
            , (void ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_PostClientActive) )    
        .def( 
            "PostConstructor"
            , (void ( ::CBaseEntity::* )( char const * ) )(&::CBaseEntity::PostConstructor)
            , (void ( CBaseCombatWeapon_wrapper::* )( char const * ) )(&CBaseCombatWeapon_wrapper::default_PostConstructor)
            , ( bp::arg("szClassname") ) )    
        .def( 
            "StopLoopingSounds"
            , (void ( ::CBaseEntity::* )(  ) )(&::CBaseEntity::StopLoopingSounds)
            , (void ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_StopLoopingSounds) )    
        .def( 
            "UpdateOnRemove"
            , (void ( ::CBaseEntity::* )(  ) )(&::CBaseEntity::UpdateOnRemove)
            , (void ( CBaseCombatWeapon_wrapper::* )(  ) )(&CBaseCombatWeapon_wrapper::default_UpdateOnRemove) )    
        .def( 
            "VPhysicsCollision"
            , (void ( ::CBaseEntity::* )( int,::gamevcollisionevent_t * ) )(&::CBaseEntity::VPhysicsCollision)
            , (void ( CBaseCombatWeapon_wrapper::* )( int,::gamevcollisionevent_t * ) )(&CBaseCombatWeapon_wrapper::default_VPhysicsCollision)
            , ( bp::arg("index"), bp::arg("pEvent") ) )    
        .staticmethod( "GetAvailableWeaponsInBox" )    
        .staticmethod( "GetPyNetworkType" );

}

