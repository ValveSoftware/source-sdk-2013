// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CBaseCombatCharacter_pypp.hpp"

namespace bp = boost::python;

struct CBaseCombatCharacter_wrapper : CBaseCombatCharacter, bp::wrapper< CBaseCombatCharacter > {

    CBaseCombatCharacter_wrapper( )
    : CBaseCombatCharacter( )
      , bp::wrapper< CBaseCombatCharacter >(){
        // null constructor
    
    }

    virtual bool BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "BecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling BecomeRagdoll( boost::ref(info), boost::ref(forceVector) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_BecomeRagdoll = this->get_override( "BecomeRagdoll" );
        if( func_BecomeRagdoll.ptr() != Py_None )
            try {
                return func_BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
            }
        else
            return this->CBaseCombatCharacter::BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
    }
    
    bool default_BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        return CBaseCombatCharacter::BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
    }

    virtual bool CorpseGib( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CorpseGib: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CorpseGib( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CorpseGib = this->get_override( "CorpseGib" );
        if( func_CorpseGib.ptr() != Py_None )
            try {
                return func_CorpseGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::CorpseGib( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::CorpseGib( boost::ref(info) );
    }
    
    bool default_CorpseGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::CorpseGib( boost::ref(info) );
    }

    virtual bool Event_Gibbed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Gibbed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Gibbed( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Gibbed = this->get_override( "Event_Gibbed" );
        if( func_Event_Gibbed.ptr() != Py_None )
            try {
                return func_Event_Gibbed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
    }
    
    bool default_Event_Gibbed( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Killed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Killed( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Event_Killed( boost::ref(info) );
            }
        else
            this->CBaseCombatCharacter::Event_Killed( boost::ref(info) );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseCombatCharacter::Event_Killed( boost::ref(info) );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::OnTakeDamage( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::OnTakeDamage( boost::ref(info) );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::OnTakeDamage( boost::ref(info) );
    }

    virtual int OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage_Alive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage_Alive( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage_Alive = this->get_override( "OnTakeDamage_Alive" );
        if( func_OnTakeDamage_Alive.ptr() != Py_None )
            try {
                return func_OnTakeDamage_Alive( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::OnTakeDamage_Alive( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::OnTakeDamage_Alive( boost::ref(info) );
    }
    
    int default_OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::OnTakeDamage_Alive( boost::ref(info) );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Precache(  );
            }
        else
            this->CBaseCombatCharacter::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseCombatCharacter::Precache( );
    }

    virtual bool ShouldGib( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldGib: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldGib( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldGib = this->get_override( "ShouldGib" );
        if( func_ShouldGib.ptr() != Py_None )
            try {
                return func_ShouldGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::ShouldGib( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::ShouldGib( boost::ref(info) );
    }
    
    bool default_ShouldGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::ShouldGib( boost::ref(info) );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Spawn(  );
            }
        else
            this->CBaseCombatCharacter::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBaseCombatCharacter::Spawn( );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::UpdateOnRemove(  );
            }
        else
            this->CBaseCombatCharacter::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseCombatCharacter::UpdateOnRemove( );
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Activate(  );
            }
        else
            this->CBaseAnimating::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseAnimating::Activate( );
    }

    virtual bool CanBecomeRagdoll(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanBecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanBecomeRagdoll(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugGeometryOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugGeometryOverlays(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugTextOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugTextOverlays(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PassesDamageFilter: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PassesDamageFilter( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }

    virtual void PostClientActive(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostClientActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostClientActive(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostConstructor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostConstructor( szClassname ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void StopLoopingSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoopingSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoopingSounds(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VPhysicsCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VPhysicsCollision( index, boost::python::ptr(pEvent) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
    #if defined(_WIN32)
    #if defined(_DEBUG)
    Assert( GetCurrentThreadId() == g_hPythonThreadID );
    #elif defined(PY_CHECKTHREADID)
    if( GetCurrentThreadId() != g_hPythonThreadID )
        Error( "GetServerClass: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
    #endif // _DEBUG/PY_CHECKTHREADID
    #endif // _WIN32
    #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
    if( py_log_overrides.GetBool() )
        Msg("Calling GetServerClass(  ) of Class: CBaseCombatCharacter\n");
    #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
    ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>( "pyServerClass", GetPyInstance(), NULL, true );
    if( pServerClass )
        return pServerClass;
    return CBaseCombatCharacter::GetServerClass();
}

};

void register_CBaseCombatCharacter_class(){

    { //::CBaseCombatCharacter
        typedef bp::class_< CBaseCombatCharacter_wrapper, bp::bases< CBaseFlex >, boost::noncopyable > CBaseCombatCharacter_exposer_t;
        CBaseCombatCharacter_exposer_t CBaseCombatCharacter_exposer = CBaseCombatCharacter_exposer_t( "CBaseCombatCharacter", bp::no_init );
        bp::scope CBaseCombatCharacter_scope( CBaseCombatCharacter_exposer );
        bp::enum_< CBaseCombatCharacter::FieldOfViewCheckType>("FieldOfViewCheckType")
            .value("USE_FOV", CBaseCombatCharacter::USE_FOV)
            .value("DISREGARD_FOV", CBaseCombatCharacter::DISREGARD_FOV)
            .export_values()
            ;
        bp::enum_< CBaseCombatCharacter::LineOfSightCheckType>("LineOfSightCheckType")
            .value("IGNORE_NOTHING", CBaseCombatCharacter::IGNORE_NOTHING)
            .value("IGNORE_ACTORS", CBaseCombatCharacter::IGNORE_ACTORS)
            .export_values()
            ;
        CBaseCombatCharacter_exposer.def( bp::init< >() );
        { //::CBaseCombatCharacter::AddClassRelationship
        
            typedef void ( ::CBaseCombatCharacter::*AddClassRelationship_function_type )( ::Class_T,::Disposition_t,int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "AddClassRelationship"
                , AddClassRelationship_function_type( &::CBaseCombatCharacter::AddClassRelationship )
                , ( bp::arg("nClass"), bp::arg("nDisposition"), bp::arg("nPriority") ) );
        
        }
        { //::CBaseCombatCharacter::AddEntityRelationship
        
            typedef void ( ::CBaseCombatCharacter::*AddEntityRelationship_function_type )( ::CBaseEntity *,::Disposition_t,int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "AddEntityRelationship"
                , AddEntityRelationship_function_type( &::CBaseCombatCharacter::AddEntityRelationship )
                , ( bp::arg("pEntity"), bp::arg("nDisposition"), bp::arg("nPriority") ) );
        
        }
        { //::CBaseCombatCharacter::AddPlayerItem
        
            typedef bool ( ::CBaseCombatCharacter::*AddPlayerItem_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "AddPlayerItem"
                , AddPlayerItem_function_type( &::CBaseCombatCharacter::AddPlayerItem )
                , ( bp::arg("pItem") ) );
        
        }
        { //::CBaseCombatCharacter::AllocateDefaultRelationships
        
            typedef void ( *AllocateDefaultRelationships_function_type )(  );
            
            CBaseCombatCharacter_exposer.def( 
                "AllocateDefaultRelationships"
                , AllocateDefaultRelationships_function_type( &::CBaseCombatCharacter::AllocateDefaultRelationships ) );
        
        }
        { //::CBaseCombatCharacter::ApplyStressDamage
        
            typedef void ( ::CBaseCombatCharacter::*ApplyStressDamage_function_type )( ::IPhysicsObject *,bool ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "ApplyStressDamage"
                , ApplyStressDamage_function_type( &::CBaseCombatCharacter::ApplyStressDamage )
                , ( bp::arg("pPhysics"), bp::arg("bRequireLargeObject") ) );
        
        }
        { //::CBaseCombatCharacter::BecomeRagdoll
        
            typedef bool ( ::CBaseCombatCharacter::*BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "BecomeRagdoll"
                , BecomeRagdoll_function_type(&::CBaseCombatCharacter::BecomeRagdoll)
                , default_BecomeRagdoll_function_type(&CBaseCombatCharacter_wrapper::default_BecomeRagdoll)
                , ( bp::arg("info"), bp::arg("forceVector") ) );
        
        }
        { //::CBaseCombatCharacter::BecomeRagdollBoogie
        
            typedef bool ( ::CBaseCombatCharacter::*BecomeRagdollBoogie_function_type )( ::CBaseEntity *,::Vector const &,float,int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "BecomeRagdollBoogie"
                , BecomeRagdollBoogie_function_type( &::CBaseCombatCharacter::BecomeRagdollBoogie )
                , ( bp::arg("pKiller"), bp::arg("forceVector"), bp::arg("duration"), bp::arg("flags") ) );
        
        }
        { //::CBaseCombatCharacter::BloodColor
        
            typedef int ( ::CBaseCombatCharacter::*BloodColor_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "BloodColor"
                , BloodColor_function_type( &::CBaseCombatCharacter::BloodColor ) );
        
        }
        { //::CBaseCombatCharacter::BodyAngles
        
            typedef ::QAngle ( ::CBaseCombatCharacter::*BodyAngles_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "BodyAngles"
                , BodyAngles_function_type( &::CBaseCombatCharacter::BodyAngles ) );
        
        }
        { //::CBaseCombatCharacter::BodyDirection2D
        
            typedef ::Vector ( ::CBaseCombatCharacter::*BodyDirection2D_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "BodyDirection2D"
                , BodyDirection2D_function_type( &::CBaseCombatCharacter::BodyDirection2D ) );
        
        }
        { //::CBaseCombatCharacter::BodyDirection3D
        
            typedef ::Vector ( ::CBaseCombatCharacter::*BodyDirection3D_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "BodyDirection3D"
                , BodyDirection3D_function_type( &::CBaseCombatCharacter::BodyDirection3D ) );
        
        }
        { //::CBaseCombatCharacter::CalcDamageForceVector
        
            typedef ::Vector ( ::CBaseCombatCharacter::*CalcDamageForceVector_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CalcDamageForceVector"
                , CalcDamageForceVector_function_type( &::CBaseCombatCharacter::CalcDamageForceVector )
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::CalcWeaponProficiency
        
            typedef ::WeaponProficiency_t ( ::CBaseCombatCharacter::*CalcWeaponProficiency_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CalcWeaponProficiency"
                , CalcWeaponProficiency_function_type( &::CBaseCombatCharacter::CalcWeaponProficiency )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::CalculatePhysicsStressDamage
        
            typedef float ( ::CBaseCombatCharacter::*CalculatePhysicsStressDamage_function_type )( ::vphysics_objectstress_t *,::IPhysicsObject * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CalculatePhysicsStressDamage"
                , CalculatePhysicsStressDamage_function_type( &::CBaseCombatCharacter::CalculatePhysicsStressDamage )
                , ( bp::arg("pStressOut"), bp::arg("pPhysics") ) );
        
        }
        { //::CBaseCombatCharacter::CanBecomeServerRagdoll
        
            typedef bool ( ::CBaseCombatCharacter::*CanBecomeServerRagdoll_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CanBecomeServerRagdoll"
                , CanBecomeServerRagdoll_function_type( &::CBaseCombatCharacter::CanBecomeServerRagdoll ) );
        
        }
        { //::CBaseCombatCharacter::ChangeTeam
        
            typedef void ( ::CBaseCombatCharacter::*ChangeTeam_function_type )( int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "ChangeTeam"
                , ChangeTeam_function_type( &::CBaseCombatCharacter::ChangeTeam )
                , ( bp::arg("iTeamNum") ) );
        
        }
        { //::CBaseCombatCharacter::CheckTraceHullAttack
        
            typedef ::CBaseEntity * ( ::CBaseCombatCharacter::*CheckTraceHullAttack_function_type )( float,::Vector const &,::Vector const &,int,int,float,bool ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CheckTraceHullAttack"
                , CheckTraceHullAttack_function_type( &::CBaseCombatCharacter::CheckTraceHullAttack )
                , ( bp::arg("flDist"), bp::arg("mins"), bp::arg("maxs"), bp::arg("iDamage"), bp::arg("iDmgType"), bp::arg("forceScale")=1.0e+0f, bp::arg("bDamageAnyNPC")=(bool)(false) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::CheckTraceHullAttack
        
            typedef ::CBaseEntity * ( ::CBaseCombatCharacter::*CheckTraceHullAttack_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector const &,int,int,float,bool ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CheckTraceHullAttack"
                , CheckTraceHullAttack_function_type( &::CBaseCombatCharacter::CheckTraceHullAttack )
                , ( bp::arg("vStart"), bp::arg("vEnd"), bp::arg("mins"), bp::arg("maxs"), bp::arg("iDamage"), bp::arg("iDmgType"), bp::arg("flForceScale")=1.0e+0f, bp::arg("bDamageAnyNPC")=(bool)(false) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::ClearActiveWeapon
        
            typedef void ( ::CBaseCombatCharacter::*ClearActiveWeapon_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "ClearActiveWeapon"
                , ClearActiveWeapon_function_type( &::CBaseCombatCharacter::ClearActiveWeapon ) );
        
        }
        { //::CBaseCombatCharacter::ClearLastKnownArea
        
            typedef void ( ::CBaseCombatCharacter::*ClearLastKnownArea_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "ClearLastKnownArea"
                , ClearLastKnownArea_function_type( &::CBaseCombatCharacter::ClearLastKnownArea ) );
        
        }
        { //::CBaseCombatCharacter::CorpseFade
        
            typedef void ( ::CBaseCombatCharacter::*CorpseFade_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CorpseFade"
                , CorpseFade_function_type( &::CBaseCombatCharacter::CorpseFade ) );
        
        }
        { //::CBaseCombatCharacter::CorpseGib
        
            typedef bool ( ::CBaseCombatCharacter::*CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CorpseGib"
                , CorpseGib_function_type(&::CBaseCombatCharacter::CorpseGib)
                , default_CorpseGib_function_type(&CBaseCombatCharacter_wrapper::default_CorpseGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::DispatchInteraction
        
            typedef bool ( ::CBaseCombatCharacter::*DispatchInteraction_function_type )( int,void *,::CBaseCombatCharacter * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "DispatchInteraction"
                , DispatchInteraction_function_type( &::CBaseCombatCharacter::DispatchInteraction )
                , ( bp::arg("interactionType"), bp::arg("data"), bp::arg("sourceEnt") ) );
        
        }
        { //::CBaseCombatCharacter::DoMuzzleFlash
        
            typedef void ( ::CBaseCombatCharacter::*DoMuzzleFlash_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "DoMuzzleFlash"
                , DoMuzzleFlash_function_type( &::CBaseCombatCharacter::DoMuzzleFlash ) );
        
        }
        { //::CBaseCombatCharacter::Event_Dying
        
            typedef void ( ::CBaseCombatCharacter::*Event_Dying_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Event_Dying"
                , Event_Dying_function_type( &::CBaseCombatCharacter::Event_Dying )
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::Event_Dying
        
            typedef void ( ::CBaseCombatCharacter::*Event_Dying_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Event_Dying"
                , Event_Dying_function_type( &::CBaseCombatCharacter::Event_Dying ) );
        
        }
        { //::CBaseCombatCharacter::Event_Gibbed
        
            typedef bool ( ::CBaseCombatCharacter::*Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Event_Gibbed"
                , Event_Gibbed_function_type(&::CBaseCombatCharacter::Event_Gibbed)
                , default_Event_Gibbed_function_type(&CBaseCombatCharacter_wrapper::default_Event_Gibbed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::Event_Killed
        
            typedef void ( ::CBaseCombatCharacter::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseCombatCharacter::Event_Killed)
                , default_Event_Killed_function_type(&CBaseCombatCharacter_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::ExitVehicle
        
            typedef bool ( ::CBaseCombatCharacter::*ExitVehicle_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "ExitVehicle"
                , ExitVehicle_function_type( &::CBaseCombatCharacter::ExitVehicle ) );
        
        }
        { //::CBaseCombatCharacter::EyeDirection2D
        
            typedef ::Vector ( ::CBaseCombatCharacter::*EyeDirection2D_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "EyeDirection2D"
                , EyeDirection2D_function_type( &::CBaseCombatCharacter::EyeDirection2D ) );
        
        }
        { //::CBaseCombatCharacter::EyeDirection3D
        
            typedef ::Vector ( ::CBaseCombatCharacter::*EyeDirection3D_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "EyeDirection3D"
                , EyeDirection3D_function_type( &::CBaseCombatCharacter::EyeDirection3D ) );
        
        }
        { //::CBaseCombatCharacter::FInAimCone
        
            typedef bool ( ::CBaseCombatCharacter::*FInAimCone_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "FInAimCone"
                , FInAimCone_function_type( &::CBaseCombatCharacter::FInAimCone )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CBaseCombatCharacter::FInAimCone
        
            typedef bool ( ::CBaseCombatCharacter::*FInAimCone_function_type )( ::Vector const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "FInAimCone"
                , FInAimCone_function_type( &::CBaseCombatCharacter::FInAimCone )
                , ( bp::arg("vecSpot") ) );
        
        }
        { //::CBaseCombatCharacter::FInViewCone
        
            typedef bool ( ::CBaseCombatCharacter::*FInViewCone_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "FInViewCone"
                , FInViewCone_function_type( &::CBaseCombatCharacter::FInViewCone )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CBaseCombatCharacter::FInViewCone
        
            typedef bool ( ::CBaseCombatCharacter::*FInViewCone_function_type )( ::Vector const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "FInViewCone"
                , FInViewCone_function_type( &::CBaseCombatCharacter::FInViewCone )
                , ( bp::arg("vecSpot") ) );
        
        }
        { //::CBaseCombatCharacter::FVisible
        
            typedef bool ( ::CBaseCombatCharacter::*FVisible_function_type )( ::CBaseEntity *,int,::CBaseEntity * * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "FVisible"
                , FVisible_function_type( &::CBaseCombatCharacter::FVisible )
                , ( bp::arg("pEntity"), bp::arg("traceMask")=(int)(16449), bp::arg("ppBlocker")=bp::object() ) );
        
        }
        { //::CBaseCombatCharacter::FVisible
        
            typedef bool ( ::CBaseCombatCharacter::*FVisible_function_type )( ::Vector const &,int,::CBaseEntity * * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "FVisible"
                , FVisible_function_type( &::CBaseCombatCharacter::FVisible )
                , ( bp::arg("vecTarget"), bp::arg("traceMask")=(int)(16449), bp::arg("ppBlocker")=bp::object() ) );
        
        }
        { //::CBaseCombatCharacter::FindHealthItem
        
            typedef ::CBaseEntity * ( ::CBaseCombatCharacter::*FindHealthItem_function_type )( ::Vector const &,::Vector const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "FindHealthItem"
                , FindHealthItem_function_type( &::CBaseCombatCharacter::FindHealthItem )
                , ( bp::arg("vecPosition"), bp::arg("range") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::FindMissTarget
        
            typedef ::CBaseEntity * ( ::CBaseCombatCharacter::*FindMissTarget_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "FindMissTarget"
                , FindMissTarget_function_type( &::CBaseCombatCharacter::FindMissTarget )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::FixupBurningServerRagdoll
        
            typedef void ( ::CBaseCombatCharacter::*FixupBurningServerRagdoll_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "FixupBurningServerRagdoll"
                , FixupBurningServerRagdoll_function_type( &::CBaseCombatCharacter::FixupBurningServerRagdoll )
                , ( bp::arg("pRagdoll") ) );
        
        }
        { //::CBaseCombatCharacter::GetActiveWeapon
        
            typedef ::CBaseCombatWeapon * ( ::CBaseCombatCharacter::*GetActiveWeapon_function_type )(  ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetActiveWeapon"
                , GetActiveWeapon_function_type( &::CBaseCombatCharacter::GetActiveWeapon )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::GetAliveDuration
        
            typedef float ( ::CBaseCombatCharacter::*GetAliveDuration_function_type )(  ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetAliveDuration"
                , GetAliveDuration_function_type( &::CBaseCombatCharacter::GetAliveDuration ) );
        
        }
        { //::CBaseCombatCharacter::GetAmmoCount
        
            typedef int ( ::CBaseCombatCharacter::*GetAmmoCount_function_type )( int ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetAmmoCount"
                , GetAmmoCount_function_type( &::CBaseCombatCharacter::GetAmmoCount )
                , ( bp::arg("iAmmoIndex") ) );
        
        }
        { //::CBaseCombatCharacter::GetAmmoCount
        
            typedef int ( ::CBaseCombatCharacter::*GetAmmoCount_function_type )( char * ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetAmmoCount"
                , GetAmmoCount_function_type( &::CBaseCombatCharacter::GetAmmoCount )
                , ( bp::arg("szName") ) );
        
        }
        { //::CBaseCombatCharacter::GetAttackSpread
        
            typedef ::Vector ( ::CBaseCombatCharacter::*GetAttackSpread_function_type )( ::CBaseCombatWeapon *,::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetAttackSpread"
                , GetAttackSpread_function_type( &::CBaseCombatCharacter::GetAttackSpread )
                , ( bp::arg("pWeapon"), bp::arg("pTarget")=bp::object() ) );
        
        }
        { //::CBaseCombatCharacter::GetCurrentWeaponProficiency
        
            typedef ::WeaponProficiency_t ( ::CBaseCombatCharacter::*GetCurrentWeaponProficiency_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetCurrentWeaponProficiency"
                , GetCurrentWeaponProficiency_function_type( &::CBaseCombatCharacter::GetCurrentWeaponProficiency ) );
        
        }
        { //::CBaseCombatCharacter::GetDamageAccumulator
        
            typedef float ( ::CBaseCombatCharacter::*GetDamageAccumulator_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetDamageAccumulator"
                , GetDamageAccumulator_function_type( &::CBaseCombatCharacter::GetDamageAccumulator ) );
        
        }
        { //::CBaseCombatCharacter::GetDamageCount
        
            typedef int ( ::CBaseCombatCharacter::*GetDamageCount_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetDamageCount"
                , GetDamageCount_function_type( &::CBaseCombatCharacter::GetDamageCount ) );
        
        }
        { //::CBaseCombatCharacter::GetDeathActivity
        
            typedef ::Activity ( ::CBaseCombatCharacter::*GetDeathActivity_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetDeathActivity"
                , GetDeathActivity_function_type( &::CBaseCombatCharacter::GetDeathActivity ) );
        
        }
        { //::CBaseCombatCharacter::GetDefaultRelationshipDisposition
        
            typedef ::Disposition_t ( ::CBaseCombatCharacter::*GetDefaultRelationshipDisposition_function_type )( ::Class_T ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetDefaultRelationshipDisposition"
                , GetDefaultRelationshipDisposition_function_type( &::CBaseCombatCharacter::GetDefaultRelationshipDisposition )
                , ( bp::arg("nClassTarget") ) );
        
        }
        { //::CBaseCombatCharacter::GetFogObscuredRatio
        
            typedef float ( ::CBaseCombatCharacter::*GetFogObscuredRatio_function_type )( ::Vector const & ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetFogObscuredRatio"
                , GetFogObscuredRatio_function_type( &::CBaseCombatCharacter::GetFogObscuredRatio )
                , ( bp::arg("target") ) );
        
        }
        { //::CBaseCombatCharacter::GetFogObscuredRatio
        
            typedef float ( ::CBaseCombatCharacter::*GetFogObscuredRatio_function_type )( ::CBaseEntity * ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetFogObscuredRatio"
                , GetFogObscuredRatio_function_type( &::CBaseCombatCharacter::GetFogObscuredRatio )
                , ( bp::arg("target") ) );
        
        }
        { //::CBaseCombatCharacter::GetFogObscuredRatio
        
            typedef float ( ::CBaseCombatCharacter::*GetFogObscuredRatio_function_type )( float ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetFogObscuredRatio"
                , GetFogObscuredRatio_function_type( &::CBaseCombatCharacter::GetFogObscuredRatio )
                , ( bp::arg("range") ) );
        
        }
        { //::CBaseCombatCharacter::GetHullType
        
            typedef ::Hull_t ( ::CBaseCombatCharacter::*GetHullType_function_type )(  ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetHullType"
                , GetHullType_function_type( &::CBaseCombatCharacter::GetHullType ) );
        
        }
        { //::CBaseCombatCharacter::GetInteractionID
        
            typedef int ( *GetInteractionID_function_type )(  );
            
            CBaseCombatCharacter_exposer.def( 
                "GetInteractionID"
                , GetInteractionID_function_type( &::CBaseCombatCharacter::GetInteractionID ) );
        
        }
        { //::CBaseCombatCharacter::GetNextAttack
        
            typedef float ( ::CBaseCombatCharacter::*GetNextAttack_function_type )(  ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetNextAttack"
                , GetNextAttack_function_type( &::CBaseCombatCharacter::GetNextAttack ) );
        
        }
        { //::CBaseCombatCharacter::GetPhysicsImpactDamageTable
        
            typedef ::impactdamagetable_t const & ( ::CBaseCombatCharacter::*GetPhysicsImpactDamageTable_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetPhysicsImpactDamageTable"
                , GetPhysicsImpactDamageTable_function_type( &::CBaseCombatCharacter::GetPhysicsImpactDamageTable )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseCombatCharacter::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CBaseCombatCharacter_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CBaseCombatCharacter::GetPyNetworkType ) );
        
        }
        { //::CBaseCombatCharacter::GetSpreadBias
        
            typedef float ( ::CBaseCombatCharacter::*GetSpreadBias_function_type )( ::CBaseCombatWeapon *,::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetSpreadBias"
                , GetSpreadBias_function_type( &::CBaseCombatCharacter::GetSpreadBias )
                , ( bp::arg("pWeapon"), bp::arg("pTarget") ) );
        
        }
        { //::CBaseCombatCharacter::GetTimeSinceLastInjury
        
            typedef float ( ::CBaseCombatCharacter::*GetTimeSinceLastInjury_function_type )( int ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetTimeSinceLastInjury"
                , GetTimeSinceLastInjury_function_type( &::CBaseCombatCharacter::GetTimeSinceLastInjury )
                , ( bp::arg("team")=(int)(-0x000000002) ) );
        
        }
        { //::CBaseCombatCharacter::GetVehicleEntity
        
            typedef ::CBaseEntity * ( ::CBaseCombatCharacter::*GetVehicleEntity_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetVehicleEntity"
                , GetVehicleEntity_function_type( &::CBaseCombatCharacter::GetVehicleEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::GetWeapon
        
            typedef ::CBaseCombatWeapon * ( ::CBaseCombatCharacter::*GetWeapon_function_type )( int ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "GetWeapon"
                , GetWeapon_function_type( &::CBaseCombatCharacter::GetWeapon )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::GiveAmmo
        
            typedef int ( ::CBaseCombatCharacter::*GiveAmmo_function_type )( int,int,bool ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GiveAmmo"
                , GiveAmmo_function_type( &::CBaseCombatCharacter::GiveAmmo )
                , ( bp::arg("iCount"), bp::arg("iAmmoIndex"), bp::arg("bSuppressSound")=(bool)(false) ) );
        
        }
        { //::CBaseCombatCharacter::GiveAmmo
        
            typedef int ( ::CBaseCombatCharacter::*GiveAmmo_function_type )( int,char const *,bool ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GiveAmmo"
                , GiveAmmo_function_type( &::CBaseCombatCharacter::GiveAmmo )
                , ( bp::arg("iCount"), bp::arg("szName"), bp::arg("bSuppressSound")=(bool)(false) ) );
        
        }
        { //::CBaseCombatCharacter::HandleInteraction
        
            typedef bool ( ::CBaseCombatCharacter::*HandleInteraction_function_type )( int,void *,::CBaseCombatCharacter * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "HandleInteraction"
                , HandleInteraction_function_type( &::CBaseCombatCharacter::HandleInteraction )
                , ( bp::arg("interactionType"), bp::arg("data"), bp::arg("sourceEnt") ) );
        
        }
        { //::CBaseCombatCharacter::HasAlienGibs
        
            typedef bool ( ::CBaseCombatCharacter::*HasAlienGibs_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "HasAlienGibs"
                , HasAlienGibs_function_type( &::CBaseCombatCharacter::HasAlienGibs ) );
        
        }
        { //::CBaseCombatCharacter::HasEverBeenInjured
        
            typedef bool ( ::CBaseCombatCharacter::*HasEverBeenInjured_function_type )( int ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "HasEverBeenInjured"
                , HasEverBeenInjured_function_type( &::CBaseCombatCharacter::HasEverBeenInjured )
                , ( bp::arg("team")=(int)(-0x000000002) ) );
        
        }
        { //::CBaseCombatCharacter::HasHumanGibs
        
            typedef bool ( ::CBaseCombatCharacter::*HasHumanGibs_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "HasHumanGibs"
                , HasHumanGibs_function_type( &::CBaseCombatCharacter::HasHumanGibs ) );
        
        }
        { //::CBaseCombatCharacter::HeadDirection2D
        
            typedef ::Vector ( ::CBaseCombatCharacter::*HeadDirection2D_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "HeadDirection2D"
                , HeadDirection2D_function_type( &::CBaseCombatCharacter::HeadDirection2D ) );
        
        }
        { //::CBaseCombatCharacter::HeadDirection3D
        
            typedef ::Vector ( ::CBaseCombatCharacter::*HeadDirection3D_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "HeadDirection3D"
                , HeadDirection3D_function_type( &::CBaseCombatCharacter::HeadDirection3D ) );
        
        }
        { //::CBaseCombatCharacter::IRelationPriority
        
            typedef int ( ::CBaseCombatCharacter::*IRelationPriority_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "IRelationPriority"
                , IRelationPriority_function_type( &::CBaseCombatCharacter::IRelationPriority )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::CBaseCombatCharacter::IRelationType
        
            typedef ::Disposition_t ( ::CBaseCombatCharacter::*IRelationType_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "IRelationType"
                , IRelationType_function_type( &::CBaseCombatCharacter::IRelationType )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::CBaseCombatCharacter::InitInteractionSystem
        
            typedef void ( *InitInteractionSystem_function_type )(  );
            
            CBaseCombatCharacter_exposer.def( 
                "InitInteractionSystem"
                , InitInteractionSystem_function_type( &::CBaseCombatCharacter::InitInteractionSystem ) );
        
        }
        { //::CBaseCombatCharacter::InputKilledNPC
        
            typedef void ( ::CBaseCombatCharacter::*InputKilledNPC_function_type )( ::inputdata_t & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "InputKilledNPC"
                , InputKilledNPC_function_type( &::CBaseCombatCharacter::InputKilledNPC )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseCombatCharacter::IsAbleToSee
        
            typedef bool ( ::CBaseCombatCharacter::*IsAbleToSee_function_type )( ::CBaseEntity const *,::CBaseCombatCharacter::FieldOfViewCheckType ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "IsAbleToSee"
                , IsAbleToSee_function_type( &::CBaseCombatCharacter::IsAbleToSee )
                , ( bp::arg("entity"), bp::arg("checkFOV") ) );
        
        }
        { //::CBaseCombatCharacter::IsAbleToSee
        
            typedef bool ( ::CBaseCombatCharacter::*IsAbleToSee_function_type )( ::CBaseCombatCharacter *,::CBaseCombatCharacter::FieldOfViewCheckType ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "IsAbleToSee"
                , IsAbleToSee_function_type( &::CBaseCombatCharacter::IsAbleToSee )
                , ( bp::arg("pBCC"), bp::arg("checkFOV") ) );
        
        }
        { //::CBaseCombatCharacter::IsAllowedToPickupWeapons
        
            typedef bool ( ::CBaseCombatCharacter::*IsAllowedToPickupWeapons_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "IsAllowedToPickupWeapons"
                , IsAllowedToPickupWeapons_function_type( &::CBaseCombatCharacter::IsAllowedToPickupWeapons ) );
        
        }
        { //::CBaseCombatCharacter::IsAreaTraversable
        
            typedef bool ( ::CBaseCombatCharacter::*IsAreaTraversable_function_type )( ::CNavArea const * ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsAreaTraversable"
                , IsAreaTraversable_function_type( &::CBaseCombatCharacter::IsAreaTraversable )
                , ( bp::arg("area") ) );
        
        }
        { //::CBaseCombatCharacter::IsHiddenByFog
        
            typedef bool ( ::CBaseCombatCharacter::*IsHiddenByFog_function_type )( ::Vector const & ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsHiddenByFog"
                , IsHiddenByFog_function_type( &::CBaseCombatCharacter::IsHiddenByFog )
                , ( bp::arg("target") ) );
        
        }
        { //::CBaseCombatCharacter::IsHiddenByFog
        
            typedef bool ( ::CBaseCombatCharacter::*IsHiddenByFog_function_type )( ::CBaseEntity * ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsHiddenByFog"
                , IsHiddenByFog_function_type( &::CBaseCombatCharacter::IsHiddenByFog )
                , ( bp::arg("target") ) );
        
        }
        { //::CBaseCombatCharacter::IsHiddenByFog
        
            typedef bool ( ::CBaseCombatCharacter::*IsHiddenByFog_function_type )( float ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsHiddenByFog"
                , IsHiddenByFog_function_type( &::CBaseCombatCharacter::IsHiddenByFog )
                , ( bp::arg("range") ) );
        
        }
        { //::CBaseCombatCharacter::IsInAVehicle
        
            typedef bool ( ::CBaseCombatCharacter::*IsInAVehicle_function_type )(  ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsInAVehicle"
                , IsInAVehicle_function_type( &::CBaseCombatCharacter::IsInAVehicle ) );
        
        }
        { //::CBaseCombatCharacter::IsInFieldOfView
        
            typedef bool ( ::CBaseCombatCharacter::*IsInFieldOfView_function_type )( ::CBaseEntity * ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsInFieldOfView"
                , IsInFieldOfView_function_type( &::CBaseCombatCharacter::IsInFieldOfView )
                , ( bp::arg("entity") ) );
        
        }
        { //::CBaseCombatCharacter::IsInFieldOfView
        
            typedef bool ( ::CBaseCombatCharacter::*IsInFieldOfView_function_type )( ::Vector const & ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsInFieldOfView"
                , IsInFieldOfView_function_type( &::CBaseCombatCharacter::IsInFieldOfView )
                , ( bp::arg("pos") ) );
        
        }
        { //::CBaseCombatCharacter::IsLineOfSightClear
        
            typedef bool ( ::CBaseCombatCharacter::*IsLineOfSightClear_function_type )( ::CBaseEntity *,::CBaseCombatCharacter::LineOfSightCheckType ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsLineOfSightClear"
                , IsLineOfSightClear_function_type( &::CBaseCombatCharacter::IsLineOfSightClear )
                , ( bp::arg("entity"), bp::arg("checkType")=::CBaseCombatCharacter::IGNORE_NOTHING ) );
        
        }
        { //::CBaseCombatCharacter::IsLineOfSightClear
        
            typedef bool ( ::CBaseCombatCharacter::*IsLineOfSightClear_function_type )( ::Vector const &,::CBaseCombatCharacter::LineOfSightCheckType,::CBaseEntity * ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsLineOfSightClear"
                , IsLineOfSightClear_function_type( &::CBaseCombatCharacter::IsLineOfSightClear )
                , ( bp::arg("pos"), bp::arg("checkType")=::CBaseCombatCharacter::IGNORE_NOTHING, bp::arg("entityToIgnore")=bp::object() ) );
        
        }
        { //::CBaseCombatCharacter::IsLookingTowards
        
            typedef bool ( ::CBaseCombatCharacter::*IsLookingTowards_function_type )( ::CBaseEntity const *,float ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsLookingTowards"
                , IsLookingTowards_function_type( &::CBaseCombatCharacter::IsLookingTowards )
                , ( bp::arg("target"), bp::arg("cosTolerance")=8.9999997615814208984375e-1f ) );
        
        }
        { //::CBaseCombatCharacter::IsLookingTowards
        
            typedef bool ( ::CBaseCombatCharacter::*IsLookingTowards_function_type )( ::Vector const &,float ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "IsLookingTowards"
                , IsLookingTowards_function_type( &::CBaseCombatCharacter::IsLookingTowards )
                , ( bp::arg("target"), bp::arg("cosTolerance")=8.9999997615814208984375e-1f ) );
        
        }
        { //::CBaseCombatCharacter::LastHitGroup
        
            typedef int ( ::CBaseCombatCharacter::*LastHitGroup_function_type )(  ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "LastHitGroup"
                , LastHitGroup_function_type( &::CBaseCombatCharacter::LastHitGroup ) );
        
        }
        { //::CBaseCombatCharacter::MyCombatCharacterPointer
        
            typedef ::CBaseCombatCharacter * ( ::CBaseCombatCharacter::*MyCombatCharacterPointer_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "MyCombatCharacterPointer"
                , MyCombatCharacterPointer_function_type( &::CBaseCombatCharacter::MyCombatCharacterPointer )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::NPC_TranslateActivity
        
            typedef ::Activity ( ::CBaseCombatCharacter::*NPC_TranslateActivity_function_type )( ::Activity ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "NPC_TranslateActivity"
                , NPC_TranslateActivity_function_type( &::CBaseCombatCharacter::NPC_TranslateActivity )
                , ( bp::arg("baseAct") ) );
        
        }
        { //::CBaseCombatCharacter::NotifyFriendsOfDamage
        
            typedef void ( ::CBaseCombatCharacter::*NotifyFriendsOfDamage_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "NotifyFriendsOfDamage"
                , NotifyFriendsOfDamage_function_type( &::CBaseCombatCharacter::NotifyFriendsOfDamage )
                , ( bp::arg("pAttackerEntity") ) );
        
        }
        { //::CBaseCombatCharacter::OnChangeActiveWeapon
        
            typedef void ( ::CBaseCombatCharacter::*OnChangeActiveWeapon_function_type )( ::CBaseCombatWeapon *,::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnChangeActiveWeapon"
                , OnChangeActiveWeapon_function_type( &::CBaseCombatCharacter::OnChangeActiveWeapon )
                , ( bp::arg("pOldWeapon"), bp::arg("pNewWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::OnFriendDamaged
        
            typedef void ( ::CBaseCombatCharacter::*OnFriendDamaged_function_type )( ::CBaseCombatCharacter *,::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnFriendDamaged"
                , OnFriendDamaged_function_type( &::CBaseCombatCharacter::OnFriendDamaged )
                , ( bp::arg("pSquadmate"), bp::arg("pAttacker") ) );
        
        }
        { //::CBaseCombatCharacter::OnKilledNPC
        
            typedef void ( ::CBaseCombatCharacter::*OnKilledNPC_function_type )( ::CBaseCombatCharacter * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnKilledNPC"
                , OnKilledNPC_function_type( &::CBaseCombatCharacter::OnKilledNPC )
                , ( bp::arg("pKilled") ) );
        
        }
        { //::CBaseCombatCharacter::OnNavAreaChanged
        
            typedef void ( ::CBaseCombatCharacter::*OnNavAreaChanged_function_type )( ::CNavArea *,::CNavArea * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnNavAreaChanged"
                , OnNavAreaChanged_function_type( &::CBaseCombatCharacter::OnNavAreaChanged )
                , ( bp::arg("enteredArea"), bp::arg("leftArea") ) );
        
        }
        { //::CBaseCombatCharacter::OnNavAreaRemoved
        
            typedef void ( ::CBaseCombatCharacter::*OnNavAreaRemoved_function_type )( ::CNavArea * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnNavAreaRemoved"
                , OnNavAreaRemoved_function_type( &::CBaseCombatCharacter::OnNavAreaRemoved )
                , ( bp::arg("removedArea") ) );
        
        }
        { //::CBaseCombatCharacter::OnPlayerKilledOther
        
            typedef void ( ::CBaseCombatCharacter::*OnPlayerKilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnPlayerKilledOther"
                , OnPlayerKilledOther_function_type( &::CBaseCombatCharacter::OnPlayerKilledOther )
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::OnPursuedBy
        
            typedef void ( ::CBaseCombatCharacter::*OnPursuedBy_function_type )( ::INextBot * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnPursuedBy"
                , OnPursuedBy_function_type( &::CBaseCombatCharacter::OnPursuedBy )
                , ( bp::arg("pPursuer") ) );
        
        }
        { //::CBaseCombatCharacter::OnTakeDamage
        
            typedef int ( ::CBaseCombatCharacter::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CBaseCombatCharacter_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseCombatCharacter::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CBaseCombatCharacter_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::OnTakeDamage_Alive
        
            typedef int ( ::CBaseCombatCharacter::*OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CBaseCombatCharacter_wrapper::*default_OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnTakeDamage_Alive"
                , OnTakeDamage_Alive_function_type(&::CBaseCombatCharacter::OnTakeDamage_Alive)
                , default_OnTakeDamage_Alive_function_type(&CBaseCombatCharacter_wrapper::default_OnTakeDamage_Alive)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::OnTakeDamage_Dead
        
            typedef int ( ::CBaseCombatCharacter::*OnTakeDamage_Dead_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnTakeDamage_Dead"
                , OnTakeDamage_Dead_function_type( &::CBaseCombatCharacter::OnTakeDamage_Dead )
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::OnTakeDamage_Dying
        
            typedef int ( ::CBaseCombatCharacter::*OnTakeDamage_Dying_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "OnTakeDamage_Dying"
                , OnTakeDamage_Dying_function_type( &::CBaseCombatCharacter::OnTakeDamage_Dying )
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::Precache
        
            typedef void ( ::CBaseCombatCharacter::*Precache_function_type )(  ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_Precache_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseCombatCharacter::Precache)
                , default_Precache_function_type(&CBaseCombatCharacter_wrapper::default_Precache) );
        
        }
        { //::CBaseCombatCharacter::PushawayTouch
        
            typedef void ( ::CBaseCombatCharacter::*PushawayTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "PushawayTouch"
                , PushawayTouch_function_type( &::CBaseCombatCharacter::PushawayTouch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseCombatCharacter::RemoveAllAmmo
        
            typedef void ( ::CBaseCombatCharacter::*RemoveAllAmmo_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "RemoveAllAmmo"
                , RemoveAllAmmo_function_type( &::CBaseCombatCharacter::RemoveAllAmmo ) );
        
        }
        { //::CBaseCombatCharacter::RemoveAllWeapons
        
            typedef void ( ::CBaseCombatCharacter::*RemoveAllWeapons_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "RemoveAllWeapons"
                , RemoveAllWeapons_function_type( &::CBaseCombatCharacter::RemoveAllWeapons ) );
        
        }
        { //::CBaseCombatCharacter::RemoveAmmo
        
            typedef void ( ::CBaseCombatCharacter::*RemoveAmmo_function_type )( int,int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "RemoveAmmo"
                , RemoveAmmo_function_type( &::CBaseCombatCharacter::RemoveAmmo )
                , ( bp::arg("iCount"), bp::arg("iAmmoIndex") ) );
        
        }
        { //::CBaseCombatCharacter::RemoveAmmo
        
            typedef void ( ::CBaseCombatCharacter::*RemoveAmmo_function_type )( int,char const * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "RemoveAmmo"
                , RemoveAmmo_function_type( &::CBaseCombatCharacter::RemoveAmmo )
                , ( bp::arg("iCount"), bp::arg("szName") ) );
        
        }
        { //::CBaseCombatCharacter::RemoveEntityRelationship
        
            typedef bool ( ::CBaseCombatCharacter::*RemoveEntityRelationship_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "RemoveEntityRelationship"
                , RemoveEntityRelationship_function_type( &::CBaseCombatCharacter::RemoveEntityRelationship )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CBaseCombatCharacter::RemovePlayerItem
        
            typedef bool ( ::CBaseCombatCharacter::*RemovePlayerItem_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "RemovePlayerItem"
                , RemovePlayerItem_function_type( &::CBaseCombatCharacter::RemovePlayerItem )
                , ( bp::arg("pItem") ) );
        
        }
        { //::CBaseCombatCharacter::ResetVisibilityCache
        
            typedef void ( *ResetVisibilityCache_function_type )( ::CBaseCombatCharacter * );
            
            CBaseCombatCharacter_exposer.def( 
                "ResetVisibilityCache"
                , ResetVisibilityCache_function_type( &::CBaseCombatCharacter::ResetVisibilityCache )
                , ( bp::arg("pBCC")=bp::object() ) );
        
        }
        { //::CBaseCombatCharacter::Restore
        
            typedef int ( ::CBaseCombatCharacter::*Restore_function_type )( ::IRestore & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Restore"
                , Restore_function_type( &::CBaseCombatCharacter::Restore )
                , ( bp::arg("restore") ) );
        
        }
        { //::CBaseCombatCharacter::SetActiveWeapon
        
            typedef void ( ::CBaseCombatCharacter::*SetActiveWeapon_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetActiveWeapon"
                , SetActiveWeapon_function_type( &::CBaseCombatCharacter::SetActiveWeapon )
                , ( bp::arg("pNewWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::SetAmmoCount
        
            typedef void ( ::CBaseCombatCharacter::*SetAmmoCount_function_type )( int,int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetAmmoCount"
                , SetAmmoCount_function_type( &::CBaseCombatCharacter::SetAmmoCount )
                , ( bp::arg("iCount"), bp::arg("iAmmoIndex") ) );
        
        }
        { //::CBaseCombatCharacter::SetBloodColor
        
            typedef void ( ::CBaseCombatCharacter::*SetBloodColor_function_type )( int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetBloodColor"
                , SetBloodColor_function_type( &::CBaseCombatCharacter::SetBloodColor )
                , ( bp::arg("nBloodColor") ) );
        
        }
        { //::CBaseCombatCharacter::SetCurrentWeaponProficiency
        
            typedef void ( ::CBaseCombatCharacter::*SetCurrentWeaponProficiency_function_type )( ::WeaponProficiency_t ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetCurrentWeaponProficiency"
                , SetCurrentWeaponProficiency_function_type( &::CBaseCombatCharacter::SetCurrentWeaponProficiency )
                , ( bp::arg("iProficiency") ) );
        
        }
        { //::CBaseCombatCharacter::SetDefaultRelationship
        
            typedef void ( *SetDefaultRelationship_function_type )( ::Class_T,::Class_T,::Disposition_t,int );
            
            CBaseCombatCharacter_exposer.def( 
                "SetDefaultRelationship"
                , SetDefaultRelationship_function_type( &::CBaseCombatCharacter::SetDefaultRelationship )
                , ( bp::arg("nClass"), bp::arg("nClassTarget"), bp::arg("nDisposition"), bp::arg("nPriority") ) );
        
        }
        { //::CBaseCombatCharacter::SetHullType
        
            typedef void ( ::CBaseCombatCharacter::*SetHullType_function_type )( ::Hull_t ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetHullType"
                , SetHullType_function_type( &::CBaseCombatCharacter::SetHullType )
                , ( bp::arg("hullType") ) );
        
        }
        { //::CBaseCombatCharacter::SetImpactEnergyScale
        
            typedef void ( ::CBaseCombatCharacter::*SetImpactEnergyScale_function_type )( float ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetImpactEnergyScale"
                , SetImpactEnergyScale_function_type( &::CBaseCombatCharacter::SetImpactEnergyScale )
                , ( bp::arg("fScale") ) );
        
        }
        { //::CBaseCombatCharacter::SetLightingOriginRelative
        
            typedef void ( ::CBaseCombatCharacter::*SetLightingOriginRelative_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetLightingOriginRelative"
                , SetLightingOriginRelative_function_type( &::CBaseCombatCharacter::SetLightingOriginRelative )
                , ( bp::arg("pLightingOrigin") ) );
        
        }
        { //::CBaseCombatCharacter::SetNextAttack
        
            typedef void ( ::CBaseCombatCharacter::*SetNextAttack_function_type )( float ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetNextAttack"
                , SetNextAttack_function_type( &::CBaseCombatCharacter::SetNextAttack )
                , ( bp::arg("flWait") ) );
        
        }
        { //::CBaseCombatCharacter::SetPreventWeaponPickup
        
            typedef void ( ::CBaseCombatCharacter::*SetPreventWeaponPickup_function_type )( bool ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetPreventWeaponPickup"
                , SetPreventWeaponPickup_function_type( &::CBaseCombatCharacter::SetPreventWeaponPickup )
                , ( bp::arg("bPrevent") ) );
        
        }
        { //::CBaseCombatCharacter::SetRelationshipString
        
            typedef void ( ::CBaseCombatCharacter::*SetRelationshipString_function_type )( ::string_t ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetRelationshipString"
                , SetRelationshipString_function_type( &::CBaseCombatCharacter::SetRelationshipString )
                , ( bp::arg("theString") ) );
        
        }
        { //::CBaseCombatCharacter::SetTransmit
        
            typedef void ( ::CBaseCombatCharacter::*SetTransmit_function_type )( ::CCheckTransmitInfo *,bool ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SetTransmit"
                , SetTransmit_function_type( &::CBaseCombatCharacter::SetTransmit )
                , ( bp::arg("pInfo"), bp::arg("bAlways") ) );
        
        }
        { //::CBaseCombatCharacter::ShouldGib
        
            typedef bool ( ::CBaseCombatCharacter::*ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "ShouldGib"
                , ShouldGib_function_type(&::CBaseCombatCharacter::ShouldGib)
                , default_ShouldGib_function_type(&CBaseCombatCharacter_wrapper::default_ShouldGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::ShouldShootMissTarget
        
            typedef bool ( ::CBaseCombatCharacter::*ShouldShootMissTarget_function_type )( ::CBaseCombatCharacter * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "ShouldShootMissTarget"
                , ShouldShootMissTarget_function_type( &::CBaseCombatCharacter::ShouldShootMissTarget )
                , ( bp::arg("pAttacker") ) );
        
        }
        { //::CBaseCombatCharacter::Spawn
        
            typedef void ( ::CBaseCombatCharacter::*Spawn_function_type )(  ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_Spawn_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CBaseCombatCharacter::Spawn)
                , default_Spawn_function_type(&CBaseCombatCharacter_wrapper::default_Spawn) );
        
        }
        { //::CBaseCombatCharacter::SwitchToNextBestWeapon
        
            typedef bool ( ::CBaseCombatCharacter::*SwitchToNextBestWeapon_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "SwitchToNextBestWeapon"
                , SwitchToNextBestWeapon_function_type( &::CBaseCombatCharacter::SwitchToNextBestWeapon )
                , ( bp::arg("pCurrent") ) );
        
        }
        { //::CBaseCombatCharacter::TakeHealth
        
            typedef int ( ::CBaseCombatCharacter::*TakeHealth_function_type )( float,int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "TakeHealth"
                , TakeHealth_function_type( &::CBaseCombatCharacter::TakeHealth )
                , ( bp::arg("flHealth"), bp::arg("bitsDamageType") ) );
        
        }
        { //::CBaseCombatCharacter::UpdateLastKnownArea
        
            typedef void ( ::CBaseCombatCharacter::*UpdateLastKnownArea_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "UpdateLastKnownArea"
                , UpdateLastKnownArea_function_type( &::CBaseCombatCharacter::UpdateLastKnownArea ) );
        
        }
        { //::CBaseCombatCharacter::UpdateOnRemove
        
            typedef void ( ::CBaseCombatCharacter::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CBaseCombatCharacter::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CBaseCombatCharacter_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CBaseCombatCharacter::VPhysicsShadowCollision
        
            typedef void ( ::CBaseCombatCharacter::*VPhysicsShadowCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "VPhysicsShadowCollision"
                , VPhysicsShadowCollision_function_type( &::CBaseCombatCharacter::VPhysicsShadowCollision )
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        { //::CBaseCombatCharacter::VPhysicsUpdate
        
            typedef void ( ::CBaseCombatCharacter::*VPhysicsUpdate_function_type )( ::IPhysicsObject * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "VPhysicsUpdate"
                , VPhysicsUpdate_function_type( &::CBaseCombatCharacter::VPhysicsUpdate )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CBaseCombatCharacter::WeaponCount
        
            typedef int ( ::CBaseCombatCharacter::*WeaponCount_function_type )(  ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "WeaponCount"
                , WeaponCount_function_type( &::CBaseCombatCharacter::WeaponCount ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_CanSwitchTo
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_CanSwitchTo_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_CanSwitchTo"
                , Weapon_CanSwitchTo_function_type( &::CBaseCombatCharacter::Weapon_CanSwitchTo )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_CanUse
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_CanUse_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_CanUse"
                , Weapon_CanUse_function_type( &::CBaseCombatCharacter::Weapon_CanUse )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Create
        
            typedef ::CBaseCombatWeapon * ( ::CBaseCombatCharacter::*Weapon_Create_function_type )( char const * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_Create"
                , Weapon_Create_function_type( &::CBaseCombatCharacter::Weapon_Create )
                , ( bp::arg("pWeaponName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::Weapon_Detach
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_Detach_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_Detach"
                , Weapon_Detach_function_type( &::CBaseCombatCharacter::Weapon_Detach )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Drop
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_Drop"
                , Weapon_Drop_function_type( &::CBaseCombatCharacter::Weapon_Drop )
                , ( bp::arg("pWeapon"), bp::arg("pvecTarget")=bp::object(), bp::arg("pVelocity")=bp::object() ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_DropAll
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_DropAll_function_type )( bool ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_DropAll"
                , Weapon_DropAll_function_type( &::CBaseCombatCharacter::Weapon_DropAll )
                , ( bp::arg("bDisallowWeaponPickup")=(bool)(false) ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Equip
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_Equip"
                , Weapon_Equip_function_type( &::CBaseCombatCharacter::Weapon_Equip )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_EquipAmmoOnly
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_EquipAmmoOnly_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_EquipAmmoOnly"
                , Weapon_EquipAmmoOnly_function_type( &::CBaseCombatCharacter::Weapon_EquipAmmoOnly )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_FindUsable
        
            typedef ::CBaseEntity * ( ::CBaseCombatCharacter::*Weapon_FindUsable_function_type )( ::Vector const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_FindUsable"
                , Weapon_FindUsable_function_type( &::CBaseCombatCharacter::Weapon_FindUsable )
                , ( bp::arg("range") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::Weapon_FrameUpdate
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_FrameUpdate_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_FrameUpdate"
                , Weapon_FrameUpdate_function_type( &::CBaseCombatCharacter::Weapon_FrameUpdate ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_GetSlot
        
            typedef ::CBaseCombatWeapon * ( ::CBaseCombatCharacter::*Weapon_GetSlot_function_type )( int ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_GetSlot"
                , Weapon_GetSlot_function_type( &::CBaseCombatCharacter::Weapon_GetSlot )
                , ( bp::arg("slot") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::Weapon_GetWpnForAmmo
        
            typedef ::CBaseCombatWeapon * ( ::CBaseCombatCharacter::*Weapon_GetWpnForAmmo_function_type )( int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_GetWpnForAmmo"
                , Weapon_GetWpnForAmmo_function_type( &::CBaseCombatCharacter::Weapon_GetWpnForAmmo )
                , ( bp::arg("iAmmoIndex") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::Weapon_HandleAnimEvent
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_HandleAnimEvent_function_type )( ::animevent_t * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_HandleAnimEvent"
                , Weapon_HandleAnimEvent_function_type( &::CBaseCombatCharacter::Weapon_HandleAnimEvent )
                , ( bp::arg("pEvent") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_IsOnGround
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_IsOnGround_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_IsOnGround"
                , Weapon_IsOnGround_function_type( &::CBaseCombatCharacter::Weapon_IsOnGround )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_OwnsThisType
        
            typedef ::CBaseCombatWeapon * ( ::CBaseCombatCharacter::*Weapon_OwnsThisType_function_type )( char const *,int ) const;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_OwnsThisType"
                , Weapon_OwnsThisType_function_type( &::CBaseCombatCharacter::Weapon_OwnsThisType )
                , ( bp::arg("pszWeapon"), bp::arg("iSubType")=(int)(0) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatCharacter::Weapon_SetActivity
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_SetActivity_function_type )( ::Activity,float ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_SetActivity"
                , Weapon_SetActivity_function_type( &::CBaseCombatCharacter::Weapon_SetActivity )
                , ( bp::arg("newActivity"), bp::arg("duration") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_ShootPosition
        
            typedef ::Vector ( ::CBaseCombatCharacter::*Weapon_ShootPosition_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_ShootPosition"
                , Weapon_ShootPosition_function_type( &::CBaseCombatCharacter::Weapon_ShootPosition ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_SlotOccupied
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_SlotOccupied_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_SlotOccupied"
                , Weapon_SlotOccupied_function_type( &::CBaseCombatCharacter::Weapon_SlotOccupied )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Switch
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_Switch"
                , Weapon_Switch_function_type( &::CBaseCombatCharacter::Weapon_Switch )
                , ( bp::arg("pWeapon"), bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_TranslateActivity
        
            typedef ::Activity ( ::CBaseCombatCharacter::*Weapon_TranslateActivity_function_type )( ::Activity,bool * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Weapon_TranslateActivity"
                , Weapon_TranslateActivity_function_type( &::CBaseCombatCharacter::Weapon_TranslateActivity )
                , ( bp::arg("baseAct"), bp::arg("pRequired")=bp::object() ) );
        
        }
        { //::CBaseAnimating::Activate
        
            typedef void ( ::CBaseAnimating::*Activate_function_type )(  ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_Activate_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseAnimating::Activate)
                , default_Activate_function_type(&CBaseCombatCharacter_wrapper::default_Activate) );
        
        }
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CBaseCombatCharacter_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CBaseCombatCharacter_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CBaseCombatCharacter_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CBaseCombatCharacter_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CBaseCombatCharacter_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CBaseCombatCharacter_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CBaseCombatCharacter_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CBaseCombatCharacter_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseCombatCharacter_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseCombatCharacter_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseCombatCharacter_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseEntity::MakeTracer
        
            typedef void ( ::CBaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&CBaseCombatCharacter_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseCombatCharacter_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CBaseCombatCharacter_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CBaseCombatCharacter_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CBaseCombatCharacter_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CBaseCombatCharacter_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CBaseCombatCharacter_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CBaseCombatCharacter_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CBaseCombatCharacter_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        CBaseCombatCharacter_exposer.staticmethod( "AllocateDefaultRelationships" );
        CBaseCombatCharacter_exposer.staticmethod( "GetInteractionID" );
        CBaseCombatCharacter_exposer.staticmethod( "GetPyNetworkType" );
        CBaseCombatCharacter_exposer.staticmethod( "InitInteractionSystem" );
        CBaseCombatCharacter_exposer.staticmethod( "ResetVisibilityCache" );
        CBaseCombatCharacter_exposer.staticmethod( "SetDefaultRelationship" );
    }

}

