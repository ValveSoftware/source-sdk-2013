// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CBaseAnimatingOverlay_pypp.hpp"

namespace bp = boost::python;

struct CBaseAnimatingOverlay_wrapper : CBaseAnimatingOverlay, bp::wrapper< CBaseAnimatingOverlay > {

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Activate(  );
            }
        else
            this->CBaseAnimating::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseAnimating::Activate( );
    }

    virtual bool CanBecomeRagdoll(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanBecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanBecomeRagdoll(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugGeometryOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugGeometryOverlays(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugTextOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugTextOverlays(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Killed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Killed( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_Killed( boost::ref(info) );
            }
        else
            this->CBaseEntity::Event_Killed( boost::ref(info) );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_Killed( boost::ref(info) );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
            }
        else
            return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::OnTakeDamage( boost::ref(info) );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PassesDamageFilter: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PassesDamageFilter( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }

    virtual void PostClientActive(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostClientActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostClientActive(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostConstructor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostConstructor( szClassname ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Precache(  );
            }
        else
            this->CBaseAnimating::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseAnimating::Precache( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Spawn(  );
            }
        else
            this->CBaseAnimating::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBaseAnimating::Spawn( );
    }

    virtual void StopLoopingSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoopingSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoopingSounds(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::UpdateOnRemove(  );
            }
        else
            this->CBaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseEntity::UpdateOnRemove( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VPhysicsCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VPhysicsCollision( index, boost::python::ptr(pEvent) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
    #if defined(_WIN32)
    #if defined(_DEBUG)
    Assert( GetCurrentThreadId() == g_hPythonThreadID );
    #elif defined(PY_CHECKTHREADID)
    if( GetCurrentThreadId() != g_hPythonThreadID )
        Error( "GetServerClass: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
    #endif // _DEBUG/PY_CHECKTHREADID
    #endif // _WIN32
    #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
    if( py_log_overrides.GetBool() )
        Msg("Calling GetServerClass(  ) of Class: CBaseAnimatingOverlay\n");
    #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
    ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>( "pyServerClass", GetPyInstance(), NULL, true );
    if( pServerClass )
        return pServerClass;
    return CBaseAnimatingOverlay::GetServerClass();
}

};

void register_CBaseAnimatingOverlay_class(){

    { //::CBaseAnimatingOverlay
        typedef bp::class_< CBaseAnimatingOverlay_wrapper, bp::bases< CBaseAnimating >, boost::noncopyable > CBaseAnimatingOverlay_exposer_t;
        CBaseAnimatingOverlay_exposer_t CBaseAnimatingOverlay_exposer = CBaseAnimatingOverlay_exposer_t( "CBaseAnimatingOverlay", bp::no_init );
        bp::scope CBaseAnimatingOverlay_scope( CBaseAnimatingOverlay_exposer );
        bp::scope().attr("MAX_OVERLAYS") = (int)CBaseAnimatingOverlay::MAX_OVERLAYS;
        { //::CBaseAnimatingOverlay::AddGesture
        
            typedef int ( ::CBaseAnimatingOverlay::*AddGesture_function_type )( ::Activity,bool ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "AddGesture"
                , AddGesture_function_type( &::CBaseAnimatingOverlay::AddGesture )
                , ( bp::arg("activity"), bp::arg("autokill")=(bool)(true) ) );
        
        }
        { //::CBaseAnimatingOverlay::AddGesture
        
            typedef int ( ::CBaseAnimatingOverlay::*AddGesture_function_type )( ::Activity,float,bool ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "AddGesture"
                , AddGesture_function_type( &::CBaseAnimatingOverlay::AddGesture )
                , ( bp::arg("activity"), bp::arg("flDuration"), bp::arg("autokill")=(bool)(true) ) );
        
        }
        { //::CBaseAnimatingOverlay::AddGestureSequence
        
            typedef int ( ::CBaseAnimatingOverlay::*AddGestureSequence_function_type )( int,bool ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "AddGestureSequence"
                , AddGestureSequence_function_type( &::CBaseAnimatingOverlay::AddGestureSequence )
                , ( bp::arg("sequence"), bp::arg("autokill")=(bool)(true) ) );
        
        }
        { //::CBaseAnimatingOverlay::AddGestureSequence
        
            typedef int ( ::CBaseAnimatingOverlay::*AddGestureSequence_function_type )( int,float,bool ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "AddGestureSequence"
                , AddGestureSequence_function_type( &::CBaseAnimatingOverlay::AddGestureSequence )
                , ( bp::arg("sequence"), bp::arg("flDuration"), bp::arg("autokill")=(bool)(true) ) );
        
        }
        { //::CBaseAnimatingOverlay::AddLayeredSequence
        
            typedef int ( ::CBaseAnimatingOverlay::*AddLayeredSequence_function_type )( int,int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "AddLayeredSequence"
                , AddLayeredSequence_function_type( &::CBaseAnimatingOverlay::AddLayeredSequence )
                , ( bp::arg("sequence"), bp::arg("iPriority") ) );
        
        }
        { //::CBaseAnimatingOverlay::DispatchAnimEvents
        
            typedef void ( ::CBaseAnimatingOverlay::*DispatchAnimEvents_function_type )( ::CBaseAnimating * ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "DispatchAnimEvents"
                , DispatchAnimEvents_function_type( &::CBaseAnimatingOverlay::DispatchAnimEvents )
                , ( bp::arg("eventHandler") ) );
        
        }
        { //::CBaseAnimatingOverlay::FastRemoveLayer
        
            typedef void ( ::CBaseAnimatingOverlay::*FastRemoveLayer_function_type )( int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "FastRemoveLayer"
                , FastRemoveLayer_function_type( &::CBaseAnimatingOverlay::FastRemoveLayer )
                , ( bp::arg("iLayer") ) );
        
        }
        { //::CBaseAnimatingOverlay::FindGestureLayer
        
            typedef int ( ::CBaseAnimatingOverlay::*FindGestureLayer_function_type )( ::Activity ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "FindGestureLayer"
                , FindGestureLayer_function_type( &::CBaseAnimatingOverlay::FindGestureLayer )
                , ( bp::arg("activity") ) );
        
        }
        { //::CBaseAnimatingOverlay::GetLayerActivity
        
            typedef ::Activity ( ::CBaseAnimatingOverlay::*GetLayerActivity_function_type )( int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "GetLayerActivity"
                , GetLayerActivity_function_type( &::CBaseAnimatingOverlay::GetLayerActivity )
                , ( bp::arg("iLayer") ) );
        
        }
        { //::CBaseAnimatingOverlay::GetLayerCycle
        
            typedef float ( ::CBaseAnimatingOverlay::*GetLayerCycle_function_type )( int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "GetLayerCycle"
                , GetLayerCycle_function_type( &::CBaseAnimatingOverlay::GetLayerCycle )
                , ( bp::arg("iLayer") ) );
        
        }
        { //::CBaseAnimatingOverlay::GetLayerDuration
        
            typedef float ( ::CBaseAnimatingOverlay::*GetLayerDuration_function_type )( int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "GetLayerDuration"
                , GetLayerDuration_function_type( &::CBaseAnimatingOverlay::GetLayerDuration )
                , ( bp::arg("iLayer") ) );
        
        }
        { //::CBaseAnimatingOverlay::GetLayerSequence
        
            typedef int ( ::CBaseAnimatingOverlay::*GetLayerSequence_function_type )( int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "GetLayerSequence"
                , GetLayerSequence_function_type( &::CBaseAnimatingOverlay::GetLayerSequence )
                , ( bp::arg("iLayer") ) );
        
        }
        { //::CBaseAnimatingOverlay::GetLayerWeight
        
            typedef float ( ::CBaseAnimatingOverlay::*GetLayerWeight_function_type )( int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "GetLayerWeight"
                , GetLayerWeight_function_type( &::CBaseAnimatingOverlay::GetLayerWeight )
                , ( bp::arg("iLayer") ) );
        
        }
        { //::CBaseAnimatingOverlay::GetNumAnimOverlays
        
            typedef int ( ::CBaseAnimatingOverlay::*GetNumAnimOverlays_function_type )(  ) const;
            
            CBaseAnimatingOverlay_exposer.def( 
                "GetNumAnimOverlays"
                , GetNumAnimOverlays_function_type( &::CBaseAnimatingOverlay::GetNumAnimOverlays ) );
        
        }
        { //::CBaseAnimatingOverlay::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CBaseAnimatingOverlay_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CBaseAnimatingOverlay::GetPyNetworkType ) );
        
        }
        { //::CBaseAnimatingOverlay::GetSkeleton
        
            typedef void ( ::CBaseAnimatingOverlay::*GetSkeleton_function_type )( ::CStudioHdr *,::Vector *,::Quaternion *,int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "GetSkeleton"
                , GetSkeleton_function_type( &::CBaseAnimatingOverlay::GetSkeleton )
                , ( bp::arg("pStudioHdr"), bp::arg("pos"), bp::arg("q"), bp::arg("boneMask") ) );
        
        }
        { //::CBaseAnimatingOverlay::HasActiveLayer
        
            typedef bool ( ::CBaseAnimatingOverlay::*HasActiveLayer_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "HasActiveLayer"
                , HasActiveLayer_function_type( &::CBaseAnimatingOverlay::HasActiveLayer ) );
        
        }
        { //::CBaseAnimatingOverlay::IsPlayingGesture
        
            typedef bool ( ::CBaseAnimatingOverlay::*IsPlayingGesture_function_type )( ::Activity ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "IsPlayingGesture"
                , IsPlayingGesture_function_type( &::CBaseAnimatingOverlay::IsPlayingGesture )
                , ( bp::arg("activity") ) );
        
        }
        { //::CBaseAnimatingOverlay::IsValidLayer
        
            typedef bool ( ::CBaseAnimatingOverlay::*IsValidLayer_function_type )( int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "IsValidLayer"
                , IsValidLayer_function_type( &::CBaseAnimatingOverlay::IsValidLayer )
                , ( bp::arg("iLayer") ) );
        
        }
        { //::CBaseAnimatingOverlay::OnRestore
        
            typedef void ( ::CBaseAnimatingOverlay::*OnRestore_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "OnRestore"
                , OnRestore_function_type( &::CBaseAnimatingOverlay::OnRestore ) );
        
        }
        { //::CBaseAnimatingOverlay::RemoveAllGestures
        
            typedef void ( ::CBaseAnimatingOverlay::*RemoveAllGestures_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "RemoveAllGestures"
                , RemoveAllGestures_function_type( &::CBaseAnimatingOverlay::RemoveAllGestures ) );
        
        }
        { //::CBaseAnimatingOverlay::RemoveGesture
        
            typedef void ( ::CBaseAnimatingOverlay::*RemoveGesture_function_type )( ::Activity ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "RemoveGesture"
                , RemoveGesture_function_type( &::CBaseAnimatingOverlay::RemoveGesture )
                , ( bp::arg("activity") ) );
        
        }
        { //::CBaseAnimatingOverlay::RemoveLayer
        
            typedef void ( ::CBaseAnimatingOverlay::*RemoveLayer_function_type )( int,float,float ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "RemoveLayer"
                , RemoveLayer_function_type( &::CBaseAnimatingOverlay::RemoveLayer )
                , ( bp::arg("iLayer"), bp::arg("flKillRate")=2.00000000000000011102230246251565404236316680908e-1, bp::arg("flKillDelay")=0.0 ) );
        
        }
        { //::CBaseAnimatingOverlay::RestartGesture
        
            typedef void ( ::CBaseAnimatingOverlay::*RestartGesture_function_type )( ::Activity,bool,bool ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "RestartGesture"
                , RestartGesture_function_type( &::CBaseAnimatingOverlay::RestartGesture )
                , ( bp::arg("activity"), bp::arg("addifmissing")=(bool)(true), bp::arg("autokill")=(bool)(true) ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerAutokill
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerAutokill_function_type )( int,bool ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerAutokill"
                , SetLayerAutokill_function_type( &::CBaseAnimatingOverlay::SetLayerAutokill )
                , ( bp::arg("iLayer"), bp::arg("bAutokill") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerBlendIn
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerBlendIn_function_type )( int,float ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerBlendIn"
                , SetLayerBlendIn_function_type( &::CBaseAnimatingOverlay::SetLayerBlendIn )
                , ( bp::arg("iLayer"), bp::arg("flBlendIn") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerBlendOut
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerBlendOut_function_type )( int,float ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerBlendOut"
                , SetLayerBlendOut_function_type( &::CBaseAnimatingOverlay::SetLayerBlendOut )
                , ( bp::arg("iLayer"), bp::arg("flBlendOut") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerCycle
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerCycle_function_type )( int,float ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerCycle"
                , SetLayerCycle_function_type( &::CBaseAnimatingOverlay::SetLayerCycle )
                , ( bp::arg("iLayer"), bp::arg("flCycle") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerCycle
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerCycle_function_type )( int,float,float ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerCycle"
                , SetLayerCycle_function_type( &::CBaseAnimatingOverlay::SetLayerCycle )
                , ( bp::arg("iLayer"), bp::arg("flCycle"), bp::arg("flPrevCycle") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerDuration
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerDuration_function_type )( int,float ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerDuration"
                , SetLayerDuration_function_type( &::CBaseAnimatingOverlay::SetLayerDuration )
                , ( bp::arg("iLayer"), bp::arg("flDuration") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerLooping
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerLooping_function_type )( int,bool ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerLooping"
                , SetLayerLooping_function_type( &::CBaseAnimatingOverlay::SetLayerLooping )
                , ( bp::arg("iLayer"), bp::arg("bLooping") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerNoRestore
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerNoRestore_function_type )( int,bool ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerNoRestore"
                , SetLayerNoRestore_function_type( &::CBaseAnimatingOverlay::SetLayerNoRestore )
                , ( bp::arg("iLayer"), bp::arg("bNoRestore") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerPlaybackRate
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerPlaybackRate_function_type )( int,float ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerPlaybackRate"
                , SetLayerPlaybackRate_function_type( &::CBaseAnimatingOverlay::SetLayerPlaybackRate )
                , ( bp::arg("iLayer"), bp::arg("flPlaybackRate") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerPriority
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerPriority_function_type )( int,int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerPriority"
                , SetLayerPriority_function_type( &::CBaseAnimatingOverlay::SetLayerPriority )
                , ( bp::arg("iLayer"), bp::arg("iPriority") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetLayerWeight
        
            typedef void ( ::CBaseAnimatingOverlay::*SetLayerWeight_function_type )( int,float ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetLayerWeight"
                , SetLayerWeight_function_type( &::CBaseAnimatingOverlay::SetLayerWeight )
                , ( bp::arg("iLayer"), bp::arg("flWeight") ) );
        
        }
        { //::CBaseAnimatingOverlay::SetNumAnimOverlays
        
            typedef void ( ::CBaseAnimatingOverlay::*SetNumAnimOverlays_function_type )( int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "SetNumAnimOverlays"
                , SetNumAnimOverlays_function_type( &::CBaseAnimatingOverlay::SetNumAnimOverlays )
                , ( bp::arg("num") ) );
        
        }
        { //::CBaseAnimatingOverlay::StudioFrameAdvance
        
            typedef void ( ::CBaseAnimatingOverlay::*StudioFrameAdvance_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "StudioFrameAdvance"
                , StudioFrameAdvance_function_type( &::CBaseAnimatingOverlay::StudioFrameAdvance ) );
        
        }
        { //::CBaseAnimatingOverlay::VerifyOrder
        
            typedef void ( ::CBaseAnimatingOverlay::*VerifyOrder_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "VerifyOrder"
                , VerifyOrder_function_type( &::CBaseAnimatingOverlay::VerifyOrder ) );
        
        }
        { //::CBaseAnimating::Activate
        
            typedef void ( ::CBaseAnimating::*Activate_function_type )(  ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_Activate_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseAnimating::Activate)
                , default_Activate_function_type(&CBaseAnimatingOverlay_wrapper::default_Activate) );
        
        }
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CBaseAnimatingOverlay_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CBaseAnimatingOverlay_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CBaseAnimatingOverlay_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CBaseAnimatingOverlay_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CBaseAnimatingOverlay_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CBaseAnimatingOverlay_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CBaseAnimatingOverlay_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CBaseAnimatingOverlay_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::Event_Killed
        
            typedef void ( ::CBaseEntity::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseEntity::Event_Killed)
                , default_Event_Killed_function_type(&CBaseAnimatingOverlay_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CBaseAnimatingOverlay_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CBaseAnimatingOverlay_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CBaseAnimatingOverlay_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseAnimatingOverlay_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CBaseAnimatingOverlay_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseAnimatingOverlay_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CBaseAnimatingOverlay_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseAnimatingOverlay_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseEntity::MakeTracer
        
            typedef void ( ::CBaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&CBaseAnimatingOverlay_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseEntity::OnTakeDamage
        
            typedef int ( ::CBaseEntity::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CBaseAnimatingOverlay_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseEntity::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CBaseAnimatingOverlay_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseAnimatingOverlay_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CBaseAnimatingOverlay_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CBaseAnimatingOverlay_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CBaseAnimatingOverlay_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseAnimating::Precache
        
            typedef void ( ::CBaseAnimating::*Precache_function_type )(  ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_Precache_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseAnimating::Precache)
                , default_Precache_function_type(&CBaseAnimatingOverlay_wrapper::default_Precache) );
        
        }
        { //::CBaseAnimating::Spawn
        
            typedef void ( ::CBaseAnimating::*Spawn_function_type )(  ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_Spawn_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CBaseAnimating::Spawn)
                , default_Spawn_function_type(&CBaseAnimatingOverlay_wrapper::default_Spawn) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CBaseAnimatingOverlay_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::UpdateOnRemove
        
            typedef void ( ::CBaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CBaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CBaseAnimatingOverlay_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CBaseAnimatingOverlay_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CBaseAnimatingOverlay_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CBaseAnimatingOverlay_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        CBaseAnimatingOverlay_exposer.staticmethod( "GetPyNetworkType" );
    }

}

