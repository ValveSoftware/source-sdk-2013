// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CBasePlayer_pypp.hpp"

namespace bp = boost::python;

struct CBasePlayer_wrapper : CBasePlayer, bp::wrapper< CBasePlayer > {

    CBasePlayer_wrapper( )
    : CBasePlayer( )
      , bp::wrapper< CBasePlayer >(){
        // null constructor
    
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::Activate(  );
            }
        else
            this->CBasePlayer::Activate(  );
    }
    
    void default_Activate(  ) {
        CBasePlayer::Activate( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->CBasePlayer::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBasePlayer::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugGeometryOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugGeometryOverlays(  ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBasePlayer::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBasePlayer::DrawDebugGeometryOverlays( );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Killed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Killed( boost::ref(info) ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::Event_Killed( boost::ref(info) );
            }
        else
            this->CBasePlayer::Event_Killed( boost::ref(info) );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBasePlayer::Event_Killed( boost::ref(info) );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBasePlayer::GetTracerType(  );
            }
        else
            return this->CBasePlayer::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBasePlayer::GetTracerType( );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->CBasePlayer::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBasePlayer::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage( boost::ref(info) ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBasePlayer::OnTakeDamage( boost::ref(info) );
            }
        else
            return this->CBasePlayer::OnTakeDamage( boost::ref(info) );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBasePlayer::OnTakeDamage( boost::ref(info) );
    }

    virtual int OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage_Alive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage_Alive( boost::ref(info) ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage_Alive = this->get_override( "OnTakeDamage_Alive" );
        if( func_OnTakeDamage_Alive.ptr() != Py_None )
            try {
                return func_OnTakeDamage_Alive( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBasePlayer::OnTakeDamage_Alive( boost::ref(info) );
            }
        else
            return this->CBasePlayer::OnTakeDamage_Alive( boost::ref(info) );
    }
    
    int default_OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        return CBasePlayer::OnTakeDamage_Alive( boost::ref(info) );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::Precache(  );
            }
        else
            this->CBasePlayer::Precache(  );
    }
    
    void default_Precache(  ) {
        CBasePlayer::Precache( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::Spawn(  );
            }
        else
            this->CBasePlayer::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBasePlayer::Spawn( );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::UpdateOnRemove(  );
            }
        else
            this->CBasePlayer::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBasePlayer::UpdateOnRemove( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VPhysicsCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VPhysicsCollision( index, boost::python::ptr(pEvent) ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::VPhysicsCollision( index, boost::python::ptr(pEvent) );
            }
        else
            this->CBasePlayer::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBasePlayer::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }

    virtual bool BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "BecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling BecomeRagdoll( boost::ref(info), boost::ref(forceVector) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_BecomeRagdoll = this->get_override( "BecomeRagdoll" );
        if( func_BecomeRagdoll.ptr() != Py_None )
            try {
                return func_BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
            }
        else
            return this->CBaseCombatCharacter::BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
    }
    
    bool default_BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        return CBaseCombatCharacter::BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
    }

    virtual bool CanBecomeRagdoll(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanBecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanBecomeRagdoll(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual bool CorpseGib( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CorpseGib: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CorpseGib( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CorpseGib = this->get_override( "CorpseGib" );
        if( func_CorpseGib.ptr() != Py_None )
            try {
                return func_CorpseGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::CorpseGib( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::CorpseGib( boost::ref(info) );
    }
    
    bool default_CorpseGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::CorpseGib( boost::ref(info) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugTextOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugTextOverlays(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual bool Event_Gibbed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Gibbed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Gibbed( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Gibbed = this->get_override( "Event_Gibbed" );
        if( func_Event_Gibbed.ptr() != Py_None )
            try {
                return func_Event_Gibbed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
    }
    
    bool default_Event_Gibbed( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PassesDamageFilter: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PassesDamageFilter( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }

    virtual void PostClientActive(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostClientActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostClientActive(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostConstructor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostConstructor( szClassname ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual bool ShouldGib( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldGib: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldGib( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldGib = this->get_override( "ShouldGib" );
        if( func_ShouldGib.ptr() != Py_None )
            try {
                return func_ShouldGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::ShouldGib( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::ShouldGib( boost::ref(info) );
    }
    
    bool default_ShouldGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::ShouldGib( boost::ref(info) );
    }

    virtual void StopLoopingSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoopingSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoopingSounds(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
    #if defined(_WIN32)
    #if defined(_DEBUG)
    Assert( GetCurrentThreadId() == g_hPythonThreadID );
    #elif defined(PY_CHECKTHREADID)
    if( GetCurrentThreadId() != g_hPythonThreadID )
        Error( "GetServerClass: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
    #endif // _DEBUG/PY_CHECKTHREADID
    #endif // _WIN32
    #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
    if( py_log_overrides.GetBool() )
        Msg("Calling GetServerClass(  ) of Class: CBasePlayer\n");
    #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
    ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>( "pyServerClass", GetPyInstance(), NULL, true );
    if( pServerClass )
        return pServerClass;
    return CBasePlayer::GetServerClass();
}

};

void register_CBasePlayer_class(){

    bp::class_< CBasePlayer_wrapper, bp::bases< CBaseCombatCharacter >, boost::noncopyable >( "CBasePlayer", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AbortReload"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::AbortReload ) )    
        .def( 
            "Activate"
            , (void ( ::CBasePlayer::* )(  ) )(&::CBasePlayer::Activate)
            , (void ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_Activate) )    
        .def( 
            "ActivateMovementConstraint"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity *,::Vector const &,float,float,float ) )( &::CBasePlayer::ActivateMovementConstraint )
            , ( bp::arg("pEntity"), bp::arg("vecCenter"), bp::arg("flRadius"), bp::arg("flConstraintWidth"), bp::arg("flSpeedFactor") ) )    
        .def( 
            "AddPoints"
            , (void ( ::CBasePlayer::* )( int,bool ) )( &::CBasePlayer::AddPoints )
            , ( bp::arg("score"), bp::arg("bAllowNegativeScore") ) )    
        .def( 
            "AddPointsToTeam"
            , (void ( ::CBasePlayer::* )( int,bool ) )( &::CBasePlayer::AddPointsToTeam )
            , ( bp::arg("score"), bp::arg("bAllowNegativeScore") ) )    
        .def( 
            "AddToPlayerSimulationList"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity * ) )( &::CBasePlayer::AddToPlayerSimulationList )
            , ( bp::arg("other") ) )    
        .def( 
            "AdjustDrownDmg"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::AdjustDrownDmg )
            , ( bp::arg("nAmount") ) )    
        .def( 
            "AllowImmediateDecalPainting"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::AllowImmediateDecalPainting ) )    
        .def( 
            "AllowInstantSpawn"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::AllowInstantSpawn ) )    
        .def( 
            "ArmorValue"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::ArmorValue ) )    
        .def( 
            "AttemptToExitFreezeCam"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::AttemptToExitFreezeCam ) )    
        .def( 
            "AutoaimDeflection"
            , (::QAngle ( ::CBasePlayer::* )( ::Vector &,::autoaim_params_t & ) )( &::CBasePlayer::AutoaimDeflection )
            , ( bp::arg("vecSrc"), bp::arg("params") ) )    
        .def( 
            "AvoidPhysicsProps"
            , (void ( ::CBasePlayer::* )( ::CUserCmd * ) )( &::CBasePlayer::AvoidPhysicsProps )
            , ( bp::arg("pCmd") ) )    
        .def( 
            "BodyAngles"
            , (::QAngle ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::BodyAngles ) )    
        .def( 
            "BodyTarget"
            , (::Vector ( ::CBasePlayer::* )( ::Vector const &,bool ) )( &::CBasePlayer::BodyTarget )
            , ( bp::arg("posSrc"), bp::arg("bNoisy") ) )    
        .def( 
            "BumpWeapon"
            , (bool ( ::CBasePlayer::* )( ::CBaseCombatWeapon * ) )( &::CBasePlayer::BumpWeapon )
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "CacheVehicleView"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::CacheVehicleView ) )    
        .def( 
            "CalcRoll"
            , (float ( ::CBasePlayer::* )( ::QAngle const &,::Vector const &,float,float ) )( &::CBasePlayer::CalcRoll )
            , ( bp::arg("angles"), bp::arg("velocity"), bp::arg("rollangle"), bp::arg("rollspeed") ) )    
        .def( 
            "CalcView"
            , (void ( ::CBasePlayer::* )( ::Vector &,::QAngle &,float &,float &,float & ) )( &::CBasePlayer::CalcView )
            , ( bp::arg("eyeOrigin"), bp::arg("eyeAngles"), bp::arg("zNear"), bp::arg("zFar"), bp::arg("fov") ) )    
        .def( 
            "CalcViewRoll"
            , (void ( ::CBasePlayer::* )( ::QAngle & ) )( &::CBasePlayer::CalcViewRoll )
            , ( bp::arg("eyeAngles") ) )    
        .def( 
            "CanBreatheUnderwater"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::CanBreatheUnderwater ) )    
        .def( 
            "CanEnterVehicle"
            , (bool ( ::CBasePlayer::* )( ::IServerVehicle *,int ) )( &::CBasePlayer::CanEnterVehicle )
            , ( bp::arg("pVehicle"), bp::arg("nRole") ) )    
        .def( 
            "CanHearAndReadChatFrom"
            , (bool ( ::CBasePlayer::* )( ::CBasePlayer * ) )( &::CBasePlayer::CanHearAndReadChatFrom )
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "CanPickupObject"
            , (bool (*)( ::CBaseEntity *,float,float ))( &::CBasePlayer::CanPickupObject )
            , ( bp::arg("pObject"), bp::arg("massLimit"), bp::arg("sizeLimit") ) )    
        .def( 
            "CanSpeak"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::CanSpeak ) )    
        .def( 
            "ChangeTeam"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::ChangeTeam )
            , ( bp::arg("iTeamNum") ) )    
        .def( 
            "ChangeTeam"
            , (void ( ::CBasePlayer::* )( int,bool,bool ) )( &::CBasePlayer::ChangeTeam )
            , ( bp::arg("iTeamNum"), bp::arg("bAutoTeam"), bp::arg("bSilent") ) )    
        .def( 
            "CheatImpulseCommands"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::CheatImpulseCommands )
            , ( bp::arg("iImpulse") ) )    
        .def( 
            "CheckChatText"
            , (void ( ::CBasePlayer::* )( char *,int ) )( &::CBasePlayer::CheckChatText )
            , ( bp::arg("p"), bp::arg("bufsize") ) )    
        .def( 
            "CheckObserverSettings"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::CheckObserverSettings ) )    
        .def( 
            "CheckSuitUpdate"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::CheckSuitUpdate ) )    
        .def( 
            "CheckTimeBasedDamage"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::CheckTimeBasedDamage ) )    
        .def( 
            "CheckTrainUpdate"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::CheckTrainUpdate ) )    
        .def( 
            "Classify"
            , (::Class_T ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::Classify ) )    
        .def( 
            "ClearPlayerSimulationList"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ClearPlayerSimulationList ) )    
        .def( 
            "ClearUseEntity"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ClearUseEntity ) )    
        .def( 
            "ClearZoomOwner"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ClearZoomOwner ) )    
        .def( 
            "ClientCommand"
            , (bool ( ::CBasePlayer::* )( ::CCommand const & ) )( &::CBasePlayer::ClientCommand )
            , ( bp::arg("args") ) )    
        .def( 
            "CommitSuicide"
            , (void ( ::CBasePlayer::* )( bool,bool ) )( &::CBasePlayer::CommitSuicide )
            , ( bp::arg("bExplode")=(bool)(false), bp::arg("bForce")=(bool)(false) ) )    
        .def( 
            "CommitSuicide"
            , (void ( ::CBasePlayer::* )( ::Vector const &,bool,bool ) )( &::CBasePlayer::CommitSuicide )
            , ( bp::arg("vecForce"), bp::arg("bExplode")=(bool)(false), bp::arg("bForce")=(bool)(false) ) )    
        .def( 
            "ConsumeMovementTimeForUserCmdProcessing"
            , (float ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::ConsumeMovementTimeForUserCmdProcessing )
            , ( bp::arg("flTimeNeeded") ) )    
        .def( 
            "CreateCorpse"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::CreateCorpse ) )    
        .def( 
            "CreatePlayer"
            , (::CBasePlayer * (*)( char const *,::edict_t * ))( &::CBasePlayer::CreatePlayer )
            , ( bp::arg("className"), bp::arg("ed") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "CreateRagdollEntity"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::CreateRagdollEntity ) )    
        .def( 
            "CreateViewModel"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::CreateViewModel )
            , ( bp::arg("viewmodelindex")=(int)(0) ) )    
        .def( 
            "CurrentCommandNumber"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::CurrentCommandNumber ) )    
        .def( 
            "DamageEffect"
            , (void ( ::CBasePlayer::* )( float,int ) )( &::CBasePlayer::DamageEffect )
            , ( bp::arg("flDamage"), bp::arg("fDamageType") ) )    
        .def( 
            "DeactivateMovementConstraint"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::DeactivateMovementConstraint ) )    
        .def( 
            "DeathCount"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::DeathCount ) )    
        .def( 
            "DeathSound"
            , (void ( ::CBasePlayer::* )( ::CTakeDamageInfo const & ) )( &::CBasePlayer::DeathSound )
            , ( bp::arg("info") ) )    
        .def( 
            "DestroyViewModels"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::DestroyViewModels ) )    
        .def( 
            "DisableAutoKick"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::DisableAutoKick )
            , ( bp::arg("disabled") ) )    
        .def( 
            "DisableButtons"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::DisableButtons )
            , ( bp::arg("nButtons") ) )    
        .def( 
            "DoImpactEffect"
            , (void ( ::CBasePlayer::* )( ::trace_t &,int ) )(&::CBasePlayer::DoImpactEffect)
            , (void ( CBasePlayer_wrapper::* )( ::trace_t &,int ) )(&CBasePlayer_wrapper::default_DoImpactEffect)
            , ( bp::arg("tr"), bp::arg("nDamageType") ) )    
        .def( 
            "DoMuzzleFlash"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::DoMuzzleFlash ) )    
        .def( 
            "DoubleCheckUseNPC"
            , (::CBaseEntity * ( ::CBasePlayer::* )( ::CBaseEntity *,::Vector const &,::Vector const & ) )( &::CBasePlayer::DoubleCheckUseNPC )
            , ( bp::arg("pNPC"), bp::arg("vecSrc"), bp::arg("vecDir") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "DrawDebugGeometryOverlays"
            , (void ( ::CBasePlayer::* )(  ) )(&::CBasePlayer::DrawDebugGeometryOverlays)
            , (void ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_DrawDebugGeometryOverlays) )    
        .def( 
            "Duck"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::Duck ) )    
        .def( 
            "DumpPerfToRecipient"
            , (void ( ::CBasePlayer::* )( ::CBasePlayer *,int ) )( &::CBasePlayer::DumpPerfToRecipient )
            , ( bp::arg("pRecipient"), bp::arg("nMaxRecords") ) )    
        .def( 
            "EnableButtons"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::EnableButtons )
            , ( bp::arg("nButtons") ) )    
        .def( 
            "EnableControl"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::EnableControl )
            , ( bp::arg("fControl") ) )    
        .def( 
            "EntSelectSpawnPoint"
            , (::CBaseEntity * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::EntSelectSpawnPoint )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "EquipSuit"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::EquipSuit )
            , ( bp::arg("bPlayEffects")=(bool)(true) ) )    
        .def( 
            "Event_Dying"
            , (void ( ::CBasePlayer::* )( ::CTakeDamageInfo const & ) )( &::CBasePlayer::Event_Dying )
            , ( bp::arg("info") ) )    
        .def( 
            "Event_Killed"
            , (void ( ::CBasePlayer::* )( ::CTakeDamageInfo const & ) )(&::CBasePlayer::Event_Killed)
            , (void ( CBasePlayer_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBasePlayer_wrapper::default_Event_Killed)
            , ( bp::arg("info") ) )    
        .def( 
            "Event_KilledOther"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity *,::CTakeDamageInfo const & ) )( &::CBasePlayer::Event_KilledOther )
            , ( bp::arg("pVictim"), bp::arg("info") ) )    
        .def( 
            "ExitLadder"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ExitLadder ) )    
        .def( 
            "EyeAngles"
            , (::QAngle const & ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::EyeAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "EyePosition"
            , (::Vector ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::EyePosition ) )    
        .def( 
            "EyePositionAndVectors"
            , (void ( ::CBasePlayer::* )( ::Vector *,::Vector *,::Vector *,::Vector * ) )( &::CBasePlayer::EyePositionAndVectors )
            , ( bp::arg("pPosition"), bp::arg("pForward"), bp::arg("pRight"), bp::arg("pUp") ) )    
        .def( 
            "EyeVectors"
            , (void ( ::CBasePlayer::* )( ::Vector *,::Vector *,::Vector * ) )( &::CBasePlayer::EyeVectors )
            , ( bp::arg("pForward"), bp::arg("pRight")=bp::object(), bp::arg("pUp")=bp::object() ) )    
        .def( 
            "FindNextObserverTarget"
            , (::CBaseEntity * ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::FindNextObserverTarget )
            , ( bp::arg("bReverse") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindUseEntity"
            , (::CBaseEntity * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::FindUseEntity )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FlashlightIsOn"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::FlashlightIsOn ) )    
        .def( 
            "FlashlightTurnOff"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::FlashlightTurnOff ) )    
        .def( 
            "FlashlightTurnOn"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::FlashlightTurnOn ) )    
        .def( 
            "ForceButtons"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::ForceButtons )
            , ( bp::arg("nButtons") ) )    
        .def( 
            "ForceClientDllUpdate"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ForceClientDllUpdate ) )    
        .def( 
            "ForceDropOfCarriedPhysObjects"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity * ) )( &::CBasePlayer::ForceDropOfCarriedPhysObjects )
            , ( bp::arg("pOnlyIfHoldindThis")=bp::object() ) )    
        .def( 
            "ForceObserverMode"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::ForceObserverMode )
            , ( bp::arg("mode") ) )    
        .def( 
            "ForceOrigin"
            , (void ( ::CBasePlayer::* )( ::Vector const & ) )( &::CBasePlayer::ForceOrigin )
            , ( bp::arg("vecOrigin") ) )    
        .def( 
            "ForceRespawn"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ForceRespawn ) )    
        .def( 
            "ForceSimulation"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ForceSimulation ) )    
        .def( 
            "FragCount"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::FragCount ) )    
        .def( 
            "GetActivity"
            , (::Activity ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetActivity ) )    
        .def( 
            "GetAutoaimScore"
            , (float ( ::CBasePlayer::* )( ::Vector const &,::Vector const &,::Vector const &,::CBaseEntity *,float,::CBaseCombatWeapon * ) )( &::CBasePlayer::GetAutoaimScore )
            , ( bp::arg("eyePosition"), bp::arg("viewDir"), bp::arg("vecTarget"), bp::arg("pTarget"), bp::arg("fScale"), bp::arg("pActiveWeapon") ) )    
        .def( 
            "GetAutoaimVector"
            , (::Vector ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::GetAutoaimVector )
            , ( bp::arg("flScale") ) )    
        .def( 
            "GetAutoaimVector"
            , (::Vector ( ::CBasePlayer::* )( float,float ) )( &::CBasePlayer::GetAutoaimVector )
            , ( bp::arg("flScale"), bp::arg("flMaxDist") ) )    
        .def( 
            "GetAutoaimVector"
            , (void ( ::CBasePlayer::* )( ::autoaim_params_t & ) )( &::CBasePlayer::GetAutoaimVector )
            , ( bp::arg("params") ) )    
        .def( 
            "GetBonusChallenge"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetBonusChallenge ) )    
        .def( 
            "GetBonusProgress"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetBonusProgress ) )    
        .def( 
            "GetBotType"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetBotType ) )    
        .def( 
            "GetClientIndex"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetClientIndex ) )    
        .def( 
            "GetDeathTime"
            , (float ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetDeathTime ) )    
        .def( 
            "GetDefaultFOV"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetDefaultFOV ) )    
        .def( 
            "GetDelayTicks"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetDelayTicks ) )    
        .def( 
            "GetFOV"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetFOV ) )    
        .def( 
            "GetFOVDistanceAdjustFactor"
            , (float ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetFOVDistanceAdjustFactor ) )    
        .def( 
            "GetFOVDistanceAdjustFactorForNetworking"
            , (float ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetFOVDistanceAdjustFactorForNetworking ) )    
        .def( 
            "GetFOVForNetworking"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetFOVForNetworking ) )    
        .def( 
            "GetFOVOwner"
            , (::CBaseEntity * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetFOVOwner )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetFOVTime"
            , (float ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetFOVTime ) )    
        .def( 
            "GetGroundVPhysics"
            , (::IPhysicsObject * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetGroundVPhysics )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetHeldObjectMass"
            , (float ( ::CBasePlayer::* )( ::IPhysicsObject * ) )( &::CBasePlayer::GetHeldObjectMass )
            , ( bp::arg("pHeldObject") ) )    
        .def( 
            "GetImpulse"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetImpulse ) )    
        .def( 
            "GetInVehicle"
            , (bool ( ::CBasePlayer::* )( ::IServerVehicle *,int ) )( &::CBasePlayer::GetInVehicle )
            , ( bp::arg("pVehicle"), bp::arg("nRole") ) )    
        .def( 
            "GetLaggedMovementValue"
            , (float ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetLaggedMovementValue ) )    
        .def( 
            "GetLastKnownPlaceName"
            , (char const * ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetLastKnownPlaceName ) )    
        .def( 
            "GetNetworkIDString"
            , (char const * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetNetworkIDString ) )    
        .def( 
            "GetNextObserverSearchStartPoint"
            , (int ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::GetNextObserverSearchStartPoint )
            , ( bp::arg("bReverse") ) )    
        .def( 
            "GetObserverMode"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetObserverMode ) )    
        .def( 
            "GetObserverMode"
            , (int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetObserverMode ) )    
        .def( 
            "GetObserverTarget"
            , (::CBaseEntity * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetObserverTarget )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetObserverTarget"
            , (::CBaseEntity * ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetObserverTarget )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetOffset_m_Local"
            , (int (*)(  ))( &::CBasePlayer::GetOffset_m_Local ) )    
        .def( 
            "GetOffset_pl"
            , (int (*)(  ))( &::CBasePlayer::GetOffset_pl ) )    
        .def( 
            "GetOverrideStepSound"
            , (char const * ( ::CBasePlayer::* )( char const * ) )( &::CBasePlayer::GetOverrideStepSound )
            , ( bp::arg("pszBaseStepSoundName") ) )    
        .def( 
            "GetPhysicsImpactDamageTable"
            , (::impactdamagetable_t const & ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetPhysicsImpactDamageTable )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetPlayerMaxSpeed"
            , (float ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetPlayerMaxSpeed ) )    
        .def( 
            "GetPlayerMaxs"
            , (::Vector const ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetPlayerMaxs ) )    
        .def( 
            "GetPlayerMins"
            , (::Vector const ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetPlayerMins ) )    
        .def( 
            "GetPlayerName"
            , (char const * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetPlayerName ) )    
        .def( 
            "GetPreviouslyPredictedOrigin"
            , (::Vector const & ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetPreviouslyPredictedOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetPunchAngle"
            , (::QAngle const & ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetPunchAngle )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetPyNetworkType"
            , (int (*)(  ))( &::CBasePlayer::GetPyNetworkType ) )    
        .def( 
            "GetRemainingMovementTimeForUserCmdProcessing"
            , (float ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetRemainingMovementTimeForUserCmdProcessing ) )    
        .def( 
            "GetReplayEntity"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetReplayEntity ) )    
        .def( 
            "GetSceneSoundToken"
            , (char const * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetSceneSoundToken ) )    
        .def( 
            "GetSmoothedVelocity"
            , (::Vector ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetSmoothedVelocity ) )    
        .def( 
            "GetSteamID"
            , (bool ( ::CBasePlayer::* )( ::CSteamID * ) )( &::CBasePlayer::GetSteamID )
            , ( bp::arg("pID") ) )    
        .def( 
            "GetSteamIDAsUInt64"
            , (::uint64 ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetSteamIDAsUInt64 ) )    
        .def( 
            "GetStepSoundVelocities"
            , (void ( ::CBasePlayer::* )( float *,float * ) )( &::CBasePlayer::GetStepSoundVelocities )
            , ( bp::arg("velwalk"), bp::arg("velrun") ) )    
        .def( 
            "GetStickDist"
            , (float ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetStickDist ) )    
        .def( 
            "GetSwimSoundTime"
            , (float ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetSwimSoundTime ) )    
        .def( 
            "GetTimeBase"
            , (float ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetTimeBase ) )    
        .def( 
            "GetTimeSinceLastUserCommand"
            , (float ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetTimeSinceLastUserCommand ) )    
        .def( 
            "GetTimeSinceWeaponFired"
            , (float ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetTimeSinceWeaponFired ) )    
        .def( 
            "GetToggledDuckState"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetToggledDuckState ) )    
        .def( 
            "GetTracerType"
            , (char const * ( ::CBasePlayer::* )(  ) )(&::CBasePlayer::GetTracerType)
            , (char const * ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_GetTracerType) )    
        .def( 
            "GetUseEntity"
            , (::CBaseEntity * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetUseEntity )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetUserID"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetUserID ) )    
        .def( 
            "GetVehicleAnalogControlBias"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetVehicleAnalogControlBias ) )    
        .def( 
            "GetVehicleEntity"
            , (::CBaseEntity * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetVehicleEntity )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetViewEntity"
            , (::CBaseEntity * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::GetViewEntity )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetViewModel"
            , (::CBaseViewModel * ( ::CBasePlayer::* )( int,bool ) )( &::CBasePlayer::GetViewModel )
            , ( bp::arg("viewmodelindex")=(int)(0), bp::arg("bObserverOK")=(bool)(true) )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetWaterJumpTime"
            , (float ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::GetWaterJumpTime ) )    
        .def( 
            "GiveNamedItem"
            , (::CBaseEntity * ( ::CBasePlayer::* )( char const *,int ) )( &::CBasePlayer::GiveNamedItem )
            , ( bp::arg("szName"), bp::arg("iSubType")=(int)(0) )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "HUDNeedsRestart"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::HUDNeedsRestart ) )    
        .def( 
            "HandleAnimEvent"
            , (void ( ::CBasePlayer::* )( ::animevent_t * ) )( &::CBasePlayer::HandleAnimEvent )
            , ( bp::arg("pEvent") ) )    
        .def( 
            "HandleVoteCommands"
            , (bool ( ::CBasePlayer::* )( ::CCommand const & ) )( &::CBasePlayer::HandleVoteCommands )
            , ( bp::arg("args") ) )    
        .def( 
            "HasAnyAmmoOfType"
            , (bool ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::HasAnyAmmoOfType )
            , ( bp::arg("nAmmoIndex") ) )    
        .def( 
            "HasHaptics"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::HasHaptics ) )    
        .def( 
            "HasNamedPlayerItem"
            , (::CBaseEntity * ( ::CBasePlayer::* )( char const * ) )( &::CBasePlayer::HasNamedPlayerItem )
            , ( bp::arg("pszItemName") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "HasPhysicsFlag"
            , (bool ( ::CBasePlayer::* )( unsigned int ) )( &::CBasePlayer::HasPhysicsFlag )
            , ( bp::arg("flag") ) )    
        .def( 
            "HasWeapons"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::HasWeapons ) )    
        .def( 
            "HideViewModels"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::HideViewModels ) )    
        .def( 
            "HintMessage"
            , (bool ( ::CBasePlayer::* )( int,bool ) )( &::CBasePlayer::HintMessage )
            , ( bp::arg("hint"), bp::arg("bForce")=(bool)(false) ) )    
        .def( 
            "HintMessage"
            , (void ( ::CBasePlayer::* )( char const * ) )( &::CBasePlayer::HintMessage )
            , ( bp::arg("pMessage") ) )    
        .def( 
            "ImpulseCommands"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ImpulseCommands ) )    
        .def( 
            "IncrementArmorValue"
            , (void ( ::CBasePlayer::* )( int,int ) )( &::CBasePlayer::IncrementArmorValue )
            , ( bp::arg("nCount"), bp::arg("nMaxValue")=(int)(-0x000000001) ) )    
        .def( 
            "IncrementDeathCount"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::IncrementDeathCount )
            , ( bp::arg("nCount") ) )    
        .def( 
            "IncrementFragCount"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::IncrementFragCount )
            , ( bp::arg("nCount") ) )    
        .def( 
            "InitFogController"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::InitFogController ) )    
        .def( 
            "InitHUD"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::InitHUD ) )    
        .def( 
            "InitVCollision"
            , (void ( ::CBasePlayer::* )( ::Vector const &,::Vector const & ) )( &::CBasePlayer::InitVCollision )
            , ( bp::arg("vecAbsOrigin"), bp::arg("vecAbsVelocity") ) )    
        .def( 
            "InitialSpawn"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::InitialSpawn ) )    
        .def( 
            "InputSetFogController"
            , (void ( ::CBasePlayer::* )( ::inputdata_t & ) )( &::CBasePlayer::InputSetFogController )
            , ( bp::arg("inputdata") ) )    
        .def( 
            "InputSetHUDVisibility"
            , (void ( ::CBasePlayer::* )( ::inputdata_t & ) )( &::CBasePlayer::InputSetHUDVisibility )
            , ( bp::arg("inputdata") ) )    
        .def( 
            "InputSetHealth"
            , (void ( ::CBasePlayer::* )( ::inputdata_t & ) )( &::CBasePlayer::InputSetHealth )
            , ( bp::arg("inputdata") ) )    
        .def( 
            "IsAutoKickDisabled"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsAutoKickDisabled ) )    
        .def( 
            "IsBot"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsBot ) )    
        .def( 
            "IsBotOfType"
            , (bool ( ::CBasePlayer::* )( int ) const)( &::CBasePlayer::IsBotOfType )
            , ( bp::arg("botType") ) )    
        .def( 
            "IsConnected"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsConnected ) )    
        .def( 
            "IsDead"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsDead ) )    
        .def( 
            "IsDisconnecting"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsDisconnecting ) )    
        .def( 
            "IsFakeClient"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsFakeClient ) )    
        .def( 
            "IsFiringWeapon"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsFiringWeapon ) )    
        .def( 
            "IsFollowingPhysics"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::IsFollowingPhysics ) )    
        .def( 
            "IsHLTV"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsHLTV ) )    
        .def( 
            "IsIlluminatedByFlashlight"
            , (bool ( ::CBasePlayer::* )( ::CBaseEntity *,float * ) )( &::CBasePlayer::IsIlluminatedByFlashlight )
            , ( bp::arg("pEntity"), bp::arg("flReturnDot") ) )    
        .def( 
            "IsInAVehicle"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsInAVehicle ) )    
        .def( 
            "IsNetClient"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsNetClient ) )    
        .def( 
            "IsObserver"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsObserver ) )    
        .def( 
            "IsOnLadder"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::IsOnLadder ) )    
        .def( 
            "IsOnTarget"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsOnTarget ) )    
        .def( 
            "IsPlayer"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsPlayer ) )    
        .def( 
            "IsPlayerLockedInPlace"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsPlayerLockedInPlace ) )    
        .def( 
            "IsPlayerUnderwater"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::IsPlayerUnderwater ) )    
        .def( 
            "IsPredictingWeapons"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsPredictingWeapons ) )    
        .def( 
            "IsReadyToPlay"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::IsReadyToPlay ) )    
        .def( 
            "IsReadyToSpawn"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::IsReadyToSpawn ) )    
        .def( 
            "IsReplay"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsReplay ) )    
        .def( 
            "IsRideablePhysics"
            , (bool ( ::CBasePlayer::* )( ::IPhysicsObject * ) )( &::CBasePlayer::IsRideablePhysics )
            , ( bp::arg("pPhysics") ) )    
        .def( 
            "IsSinglePlayerGameEnding"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::IsSinglePlayerGameEnding ) )    
        .def( 
            "IsSuitEquipped"
            , (bool ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::IsSuitEquipped ) )    
        .def( 
            "IsUseableEntity"
            , (bool ( ::CBasePlayer::* )( ::CBaseEntity *,unsigned int ) )( &::CBasePlayer::IsUseableEntity )
            , ( bp::arg("pEntity"), bp::arg("requiredCaps") ) )    
        .def( 
            "IsUserCmdDataValid"
            , (bool ( ::CBasePlayer::* )( ::CUserCmd * ) )( &::CBasePlayer::IsUserCmdDataValid )
            , ( bp::arg("pCmd") ) )    
        .def( 
            "IsValidObserverTarget"
            , (bool ( ::CBasePlayer::* )( ::CBaseEntity * ) )( &::CBasePlayer::IsValidObserverTarget )
            , ( bp::arg("target") ) )    
        .def( 
            "ItemPostFrame"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ItemPostFrame ) )    
        .def( 
            "ItemPreFrame"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ItemPreFrame ) )    
        .def( 
            "Jump"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::Jump ) )    
        .def( 
            "JumptoPosition"
            , (void ( ::CBasePlayer::* )( ::Vector const &,::QAngle const & ) )( &::CBasePlayer::JumptoPosition )
            , ( bp::arg("origin"), bp::arg("angles") ) )    
        .def( 
            "LastTimePlayerTalked"
            , (float ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::LastTimePlayerTalked ) )    
        .def( 
            "LeaveVehicle"
            , (void ( ::CBasePlayer::* )( ::Vector const &,::QAngle const & ) )( &::CBasePlayer::LeaveVehicle )
            , ( bp::arg("vecExitPoint")=vec3_origin, bp::arg("vecExitAngles")=vec3_angle ) )    
        .def( 
            "LocalEyeAngles"
            , (::QAngle const & ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::LocalEyeAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "LockPlayerInPlace"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::LockPlayerInPlace ) )    
        .def( 
            "MakeTracer"
            , (void ( ::CBasePlayer::* )( ::Vector const &,::trace_t const &,int ) )(&::CBasePlayer::MakeTracer)
            , (void ( CBasePlayer_wrapper::* )( ::Vector const &,::trace_t const &,int ) )(&CBasePlayer_wrapper::default_MakeTracer)
            , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) )    
        .def( 
            "MaxSpeed"
            , (float ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::MaxSpeed ) )    
        .def( 
            "ModeWantsSpectatorGUI"
            , (bool ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::ModeWantsSpectatorGUI )
            , ( bp::arg("iMode") ) )    
        .def( 
            "ModifyOrAppendPlayerCriteria"
            , (void ( ::CBasePlayer::* )( ::AI_CriteriaSet & ) )( &::CBasePlayer::ModifyOrAppendPlayerCriteria )
            , ( bp::arg("set") ) )    
        .def( 
            "MuzzleFlashTime"
            , (float ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::MuzzleFlashTime ) )    
        .def( 
            "NetworkStateChanged_m_fFlags"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_fFlags ) )    
        .def( 
            "NetworkStateChanged_m_fFlags"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_fFlags )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_flFriction"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_flFriction ) )    
        .def( 
            "NetworkStateChanged_m_flFriction"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_flFriction )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_hGroundEntity"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_hGroundEntity ) )    
        .def( 
            "NetworkStateChanged_m_hGroundEntity"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_hGroundEntity )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_iAmmo"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_iAmmo ) )    
        .def( 
            "NetworkStateChanged_m_iAmmo"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_iAmmo )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_iHealth"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_iHealth ) )    
        .def( 
            "NetworkStateChanged_m_iHealth"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_iHealth )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_lifeState"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_lifeState ) )    
        .def( 
            "NetworkStateChanged_m_lifeState"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_lifeState )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_nNextThinkTick"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_nNextThinkTick ) )    
        .def( 
            "NetworkStateChanged_m_nNextThinkTick"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_nNextThinkTick )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_nWaterLevel"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_nWaterLevel ) )    
        .def( 
            "NetworkStateChanged_m_nWaterLevel"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_nWaterLevel )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_vecBaseVelocity"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_vecBaseVelocity ) )    
        .def( 
            "NetworkStateChanged_m_vecBaseVelocity"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_vecBaseVelocity )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_vecVelocity"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_vecVelocity ) )    
        .def( 
            "NetworkStateChanged_m_vecVelocity"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_vecVelocity )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NetworkStateChanged_m_vecViewOffset"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NetworkStateChanged_m_vecViewOffset ) )    
        .def( 
            "NetworkStateChanged_m_vecViewOffset"
            , (void ( ::CBasePlayer::* )( void * ) )( &::CBasePlayer::NetworkStateChanged_m_vecViewOffset )
            , ( bp::arg("pVar") ) )    
        .def( 
            "NotePlayerTalked"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NotePlayerTalked ) )    
        .def( 
            "NotifyNearbyRadiationSource"
            , (void ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::NotifyNearbyRadiationSource )
            , ( bp::arg("flRange") ) )    
        .def( 
            "NotifySinglePlayerGameEnding"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::NotifySinglePlayerGameEnding ) )    
        .def( 
            "ObjectCaps"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ObjectCaps ) )    
        .def( 
            "ObserverUse"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::ObserverUse )
            , ( bp::arg("bIsPressed") ) )    
        .def( 
            "OnDamagedByExplosion"
            , (void ( ::CBasePlayer::* )( ::CTakeDamageInfo const & ) )( &::CBasePlayer::OnDamagedByExplosion )
            , ( bp::arg("info") ) )    
        .def( 
            "OnEmitFootstepSound"
            , (void ( ::CBasePlayer::* )( ::CSoundParameters const &,::Vector const &,float ) )( &::CBasePlayer::OnEmitFootstepSound )
            , ( bp::arg("params"), bp::arg("vecOrigin"), bp::arg("fVolume") ) )    
        .def( 
            "OnMyWeaponFired"
            , (void ( ::CBasePlayer::* )( ::CBaseCombatWeapon * ) )( &::CBasePlayer::OnMyWeaponFired )
            , ( bp::arg("weapon") ) )    
        .def( 
            "OnRestore"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::OnRestore ) )    
        .def( 
            "OnTakeDamage"
            , (int ( ::CBasePlayer::* )( ::CTakeDamageInfo const & ) )(&::CBasePlayer::OnTakeDamage)
            , (int ( CBasePlayer_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBasePlayer_wrapper::default_OnTakeDamage)
            , ( bp::arg("info") ) )    
        .def( 
            "OnTakeDamage_Alive"
            , (int ( ::CBasePlayer::* )( ::CTakeDamageInfo const & ) )(&::CBasePlayer::OnTakeDamage_Alive)
            , (int ( CBasePlayer_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBasePlayer_wrapper::default_OnTakeDamage_Alive)
            , ( bp::arg("info") ) )    
        .def( 
            "OnVehicleEnd"
            , (void ( ::CBasePlayer::* )( ::Vector & ) )( &::CBasePlayer::OnVehicleEnd )
            , ( bp::arg("playerDestPosition") ) )    
        .def( 
            "OnVehicleStart"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::OnVehicleStart ) )    
        .def( 
            "PackDeadPlayerItems"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::PackDeadPlayerItems ) )    
        .def( 
            "PauseBonusProgress"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::PauseBonusProgress )
            , ( bp::arg("bPause")=(bool)(true) ) )    
        .def( 
            "PhysicsSimulate"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::PhysicsSimulate ) )    
        .def( 
            "PhysicsSolidMaskForEntity"
            , (unsigned int ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::PhysicsSolidMaskForEntity ) )    
        .def( 
            "PickupObject"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity *,bool ) )( &::CBasePlayer::PickupObject )
            , ( bp::arg("pObject"), bp::arg("bLimitMassAndSize")=(bool)(true) ) )    
        .def( 
            "PlayStepSound"
            , (void ( ::CBasePlayer::* )( ::Vector &,::surfacedata_t *,float,bool ) )( &::CBasePlayer::PlayStepSound )
            , ( bp::arg("vecOrigin"), bp::arg("psurface"), bp::arg("fvol"), bp::arg("force") ) )    
        .def( 
            "PlayUseDenySound"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::PlayUseDenySound ) )    
        .def( 
            "PlayerDeathThink"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::PlayerDeathThink ) )    
        .def( 
            "PlayerDrownTime"
            , (float ( ::CBasePlayer::* )(  ) const)( &::CBasePlayer::PlayerDrownTime ) )    
        .def( 
            "PlayerRunCommand"
            , (void ( ::CBasePlayer::* )( ::CUserCmd *,::IMoveHelper * ) )( &::CBasePlayer::PlayerRunCommand )
            , ( bp::arg("ucmd"), bp::arg("moveHelper") ) )    
        .def( 
            "PlayerSolidMask"
            , (unsigned int ( ::CBasePlayer::* )( bool ) const)( &::CBasePlayer::PlayerSolidMask )
            , ( bp::arg("brushOnly")=(bool)(false) ) )    
        .def( 
            "PlayerUse"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::PlayerUse ) )    
        .def( 
            "PostThink"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::PostThink ) )    
        .def( 
            "PostThinkVPhysics"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::PostThinkVPhysics ) )    
        .def( 
            "PreThink"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::PreThink ) )    
        .def( 
            "Precache"
            , (void ( ::CBasePlayer::* )(  ) )(&::CBasePlayer::Precache)
            , (void ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_Precache) )    
        .def( 
            "ProcessUsercmds"
            , (void ( ::CBasePlayer::* )( ::CUserCmd *,int,int,int,bool ) )( &::CBasePlayer::ProcessUsercmds )
            , ( bp::arg("cmds"), bp::arg("numcmds"), bp::arg("totalcmds"), bp::arg("dropped_packets"), bp::arg("paused") ) )    
        .def( 
            "RefreshCollisionBounds"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::RefreshCollisionBounds ) )    
        .def( 
            "RemoveAllItems"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::RemoveAllItems )
            , ( bp::arg("removeSuit") ) )    
        .def( 
            "RemoveFromPlayerSimulationList"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity * ) )( &::CBasePlayer::RemoveFromPlayerSimulationList )
            , ( bp::arg("other") ) )    
        .def( 
            "RemoveHintTimer"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::RemoveHintTimer )
            , ( bp::arg("iHintID") ) )    
        .def( 
            "RemovePlayerItem"
            , (bool ( ::CBasePlayer::* )( ::CBaseCombatWeapon * ) )( &::CBasePlayer::RemovePlayerItem )
            , ( bp::arg("pItem") ) )    
        .def( 
            "RemoveSuit"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::RemoveSuit ) )    
        .def( 
            "RequiredEdictIndex"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::RequiredEdictIndex ) )    
        .def( 
            "ResetAutoaim"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ResetAutoaim ) )    
        .def( 
            "ResetDeathCount"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ResetDeathCount ) )    
        .def( 
            "ResetFragCount"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ResetFragCount ) )    
        .def( 
            "ResetObserverMode"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ResetObserverMode ) )    
        .def( 
            "ResetPerRoundStats"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ResetPerRoundStats ) )    
        .def( 
            "ResetScores"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ResetScores ) )    
        .def( 
            "Restore"
            , (int ( ::CBasePlayer::* )( ::IRestore & ) )( &::CBasePlayer::Restore )
            , ( bp::arg("restore") ) )    
        .def( 
            "RumbleEffect"
            , (void ( ::CBasePlayer::* )( unsigned char,unsigned char,unsigned char ) )( &::CBasePlayer::RumbleEffect )
            , ( bp::arg("index"), bp::arg("rumbleData"), bp::arg("rumbleFlags") ) )    
        .def( 
            "RunNullCommand"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::RunNullCommand ) )    
        .def( 
            "Save"
            , (int ( ::CBasePlayer::* )( ::ISave & ) )( &::CBasePlayer::Save )
            , ( bp::arg("save") ) )    
        .def( 
            "SelectItem"
            , (void ( ::CBasePlayer::* )( char const *,int ) )( &::CBasePlayer::SelectItem )
            , ( bp::arg("pstr"), bp::arg("iSubType")=(int)(0) ) )    
        .def( 
            "SelectLastItem"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::SelectLastItem ) )    
        .def( 
            "SetActivity"
            , (void ( ::CBasePlayer::* )( ::Activity ) )( &::CBasePlayer::SetActivity )
            , ( bp::arg("eActivity") ) )    
        .def( 
            "SetAdditionalPVSOrigin"
            , (void ( ::CBasePlayer::* )( ::Vector const & ) )( &::CBasePlayer::SetAdditionalPVSOrigin )
            , ( bp::arg("vecOrigin") ) )    
        .def( 
            "SetAnimation"
            , (void ( ::CBasePlayer::* )( ::PLAYER_ANIM ) )( &::CBasePlayer::SetAnimation )
            , ( bp::arg("playerAnim") ) )    
        .def( 
            "SetAnimationExtension"
            , (void ( ::CBasePlayer::* )( char const * ) )( &::CBasePlayer::SetAnimationExtension )
            , ( bp::arg("pExtension") ) )    
        .def( 
            "SetArmorValue"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::SetArmorValue )
            , ( bp::arg("value") ) )    
        .def( 
            "SetBodyPitch"
            , (void ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::SetBodyPitch )
            , ( bp::arg("flPitch") ) )    
        .def( 
            "SetBonusChallenge"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::SetBonusChallenge )
            , ( bp::arg("iBonusChallenge") ) )    
        .def( 
            "SetBonusProgress"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::SetBonusProgress )
            , ( bp::arg("iBonusProgress") ) )    
        .def( 
            "SetCameraPVSOrigin"
            , (void ( ::CBasePlayer::* )( ::Vector const & ) )( &::CBasePlayer::SetCameraPVSOrigin )
            , ( bp::arg("vecOrigin") ) )    
        .def( 
            "SetConnected"
            , (void ( ::CBasePlayer::* )( ::PlayerConnectedState ) )( &::CBasePlayer::SetConnected )
            , ( bp::arg("iConnected") ) )    
        .def( 
            "SetDefaultFOV"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::SetDefaultFOV )
            , ( bp::arg("FOV") ) )    
        .def( 
            "SetFOV"
            , (bool ( ::CBasePlayer::* )( ::CBaseEntity *,int,float,int ) )( &::CBasePlayer::SetFOV )
            , ( bp::arg("pRequester"), bp::arg("FOV"), bp::arg("zoomRate")=0.0f, bp::arg("iZoomStart")=(int)(0) ) )    
        .def( 
            "SetFlashlightEnabled"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::SetFlashlightEnabled )
            , ( bp::arg("bState") ) )    
        .def( 
            "SetHaptics"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::SetHaptics )
            , ( bp::arg("has") ) )    
        .def( 
            "SetLadderNormal"
            , (void ( ::CBasePlayer::* )( ::Vector ) )( &::CBasePlayer::SetLadderNormal )
            , ( bp::arg("vecLadderNormal") ) )    
        .def( 
            "SetLaggedMovementValue"
            , (void ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::SetLaggedMovementValue )
            , ( bp::arg("flValue") ) )    
        .def( 
            "SetLastUserCommand"
            , (void ( ::CBasePlayer::* )( ::CUserCmd const & ) )( &::CBasePlayer::SetLastUserCommand )
            , ( bp::arg("cmd") ) )    
        .def( 
            "SetMaxSpeed"
            , (void ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::SetMaxSpeed )
            , ( bp::arg("flMaxSpeed") ) )    
        .def( 
            "SetModel"
            , (void ( ::CBasePlayer::* )( char const * ) )( &::CBasePlayer::SetModel )
            , ( bp::arg("szModelName") ) )    
        .def( 
            "SetMuzzleFlashTime"
            , (void ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::SetMuzzleFlashTime )
            , ( bp::arg("flTime") ) )    
        .def( 
            "SetObserverMode"
            , (bool ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::SetObserverMode )
            , ( bp::arg("mode") ) )    
        .def( 
            "SetObserverTarget"
            , (bool ( ::CBasePlayer::* )( ::CBaseEntity * ) )( &::CBasePlayer::SetObserverTarget )
            , ( bp::arg("target") ) )    
        .def( 
            "SetPhysicsFlag"
            , (void ( ::CBasePlayer::* )( int,bool ) )( &::CBasePlayer::SetPhysicsFlag )
            , ( bp::arg("nFlag"), bp::arg("bSet") ) )    
        .def( 
            "SetPlayerName"
            , (void ( ::CBasePlayer::* )( char const * ) )( &::CBasePlayer::SetPlayerName )
            , ( bp::arg("name") ) )    
        .def( 
            "SetPlayerUnderwater"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::SetPlayerUnderwater )
            , ( bp::arg("state") ) )    
        .def( 
            "SetPreviouslyPredictedOrigin"
            , (void ( ::CBasePlayer::* )( ::Vector const & ) )( &::CBasePlayer::SetPreviouslyPredictedOrigin )
            , ( bp::arg("vecAbsOrigin") ) )    
        .def( 
            "SetPunchAngle"
            , (void ( ::CBasePlayer::* )( ::QAngle const & ) )( &::CBasePlayer::SetPunchAngle )
            , ( bp::arg("punchAngle") ) )    
        .def( 
            "SetShowHints"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::SetShowHints )
            , ( bp::arg("bShowHints") ) )    
        .def( 
            "SetStepSoundTime"
            , (void ( ::CBasePlayer::* )( ::stepsoundtimes_t,bool ) )( &::CBasePlayer::SetStepSoundTime )
            , ( bp::arg("iStepSoundTime"), bp::arg("bWalking") ) )    
        .def( 
            "SetSuitUpdate"
            , (void ( ::CBasePlayer::* )( char const *,int,int ) )( &::CBasePlayer::SetSuitUpdate )
            , ( bp::arg("name"), bp::arg("fgroup"), bp::arg("iNoRepeat") ) )    
        .def( 
            "SetSwimSoundTime"
            , (void ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::SetSwimSoundTime )
            , ( bp::arg("flSwimSoundTime") ) )    
        .def( 
            "SetTimeBase"
            , (void ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::SetTimeBase )
            , ( bp::arg("flTimeBase") ) )    
        .def( 
            "SetTouchedPhysics"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::SetTouchedPhysics )
            , ( bp::arg("bTouch") ) )    
        .def( 
            "SetUseEntity"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity * ) )( &::CBasePlayer::SetUseEntity )
            , ( bp::arg("pUseEntity") ) )    
        .def( 
            "SetVCollisionState"
            , (void ( ::CBasePlayer::* )( ::Vector const &,::Vector const &,int ) )( &::CBasePlayer::SetVCollisionState )
            , ( bp::arg("vecAbsOrigin"), bp::arg("vecAbsVelocity"), bp::arg("collisionState") ) )    
        .def( 
            "SetVehicleAnalogControlBias"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::SetVehicleAnalogControlBias )
            , ( bp::arg("bias") ) )    
        .def( 
            "SetViewEntity"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity * ) )( &::CBasePlayer::SetViewEntity )
            , ( bp::arg("pEntity") ) )    
        .def( 
            "SetWaterJumpTime"
            , (void ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::SetWaterJumpTime )
            , ( bp::arg("flWaterJumpTime") ) )    
        .def( 
            "SetupVPhysicsShadow"
            , (void ( ::CBasePlayer::* )( ::Vector const &,::Vector const &,::CPhysCollide *,char const *,::CPhysCollide *,char const * ) )( &::CBasePlayer::SetupVPhysicsShadow )
            , ( bp::arg("vecAbsOrigin"), bp::arg("vecAbsVelocity"), bp::arg("pStandModel"), bp::arg("pStandHullName"), bp::arg("pCrouchModel"), bp::arg("pCrouchHullName") ) )    
        .def( 
            "SetupVisibility"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity *,unsigned char *,int ) )( &::CBasePlayer::SetupVisibility )
            , ( bp::arg("pViewEntity"), bp::arg("pvs"), bp::arg("pvssize") ) )    
        .def( 
            "SharedSpawn"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::SharedSpawn ) )    
        .def( 
            "ShouldAnnounceAchievement"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ShouldAnnounceAchievement ) )    
        .def( 
            "ShouldAutoaim"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ShouldAutoaim ) )    
        .def( 
            "ShouldFadeOnDeath"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ShouldFadeOnDeath ) )    
        .def( 
            "ShouldGainInstantSpawn"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ShouldGainInstantSpawn ) )    
        .def( 
            "ShouldSavePhysics"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ShouldSavePhysics ) )    
        .def( 
            "ShouldShowHints"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ShouldShowHints ) )    
        .def( 
            "ShouldTakeDamageInCommentaryMode"
            , (bool ( ::CBasePlayer::* )( ::CTakeDamageInfo const & ) )( &::CBasePlayer::ShouldTakeDamageInCommentaryMode )
            , ( bp::arg("inputInfo") ) )    
        .def( 
            "ShouldTransmit"
            , (int ( ::CBasePlayer::* )( ::CCheckTransmitInfo const * ) )( &::CBasePlayer::ShouldTransmit )
            , ( bp::arg("pInfo") ) )    
        .def( 
            "ShowCrosshair"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::ShowCrosshair )
            , ( bp::arg("bShow") ) )    
        .def( 
            "ShowViewModel"
            , (void ( ::CBasePlayer::* )( bool ) )( &::CBasePlayer::ShowViewModel )
            , ( bp::arg("bShow") ) )    
        .def( 
            "ShowViewPortPanel"
            , (void ( ::CBasePlayer::* )( char const *,bool,::KeyValues * ) )( &::CBasePlayer::ShowViewPortPanel )
            , ( bp::arg("name"), bp::arg("bShow")=(bool)(true), bp::arg("data")=bp::object() ) )    
        .def( 
            "SimulatePlayerSimulatedEntities"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::SimulatePlayerSimulatedEntities ) )    
        .def( 
            "SmoothViewOnStairs"
            , (void ( ::CBasePlayer::* )( ::Vector & ) )( &::CBasePlayer::SmoothViewOnStairs )
            , ( bp::arg("eyeOrigin") ) )    
        .def( 
            "SnapEyeAngles"
            , (void ( ::CBasePlayer::* )( ::QAngle const & ) )( &::CBasePlayer::SnapEyeAngles )
            , ( bp::arg("viewAngles") ) )    
        .def( 
            "Spawn"
            , (void ( ::CBasePlayer::* )(  ) )(&::CBasePlayer::Spawn)
            , (void ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_Spawn) )    
        .def( 
            "StartHintTimer"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::StartHintTimer )
            , ( bp::arg("iHintID") ) )    
        .def( 
            "StartObserverMode"
            , (bool ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::StartObserverMode )
            , ( bp::arg("mode") ) )    
        .def( 
            "StartReplayMode"
            , (bool ( ::CBasePlayer::* )( float,float,int ) )( &::CBasePlayer::StartReplayMode )
            , ( bp::arg("fDelay"), bp::arg("fDuration"), bp::arg("iEntity") ) )    
        .def( 
            "StopHintTimer"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::StopHintTimer )
            , ( bp::arg("iHintID") ) )    
        .def( 
            "StopObserverMode"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::StopObserverMode ) )    
        .def( 
            "StopReplayMode"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::StopReplayMode ) )    
        .def( 
            "TakeHealth"
            , (int ( ::CBasePlayer::* )( float,int ) )( &::CBasePlayer::TakeHealth )
            , ( bp::arg("flHealth"), bp::arg("bitsDamageType") ) )    
        .def( 
            "ToggleDuck"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ToggleDuck ) )    
        .def( 
            "Touch"
            , (void ( ::CBasePlayer::* )( ::CBaseEntity * ) )( &::CBasePlayer::Touch )
            , ( bp::arg("pOther") ) )    
        .def( 
            "TouchedPhysics"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::TouchedPhysics ) )    
        .def( 
            "TraceAttack"
            , (void ( ::CBasePlayer::* )( ::CTakeDamageInfo const &,::Vector const &,::trace_t *,::CDmgAccumulator * ) )( &::CBasePlayer::TraceAttack )
            , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr"), bp::arg("pAccumulator") ) )    
        .def( 
            "UnforceButtons"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::UnforceButtons )
            , ( bp::arg("nButtons") ) )    
        .def( 
            "UnlockPlayer"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::UnlockPlayer ) )    
        .def( 
            "UpdateClientData"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::UpdateClientData ) )    
        .def( 
            "UpdateGeigerCounter"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::UpdateGeigerCounter ) )    
        .def( 
            "UpdateOnRemove"
            , (void ( ::CBasePlayer::* )(  ) )(&::CBasePlayer::UpdateOnRemove)
            , (void ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_UpdateOnRemove) )    
        .def( 
            "UpdatePhysicsShadowToCurrentPosition"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::UpdatePhysicsShadowToCurrentPosition ) )    
        .def( 
            "UpdatePhysicsShadowToPosition"
            , (void ( ::CBasePlayer::* )( ::Vector const & ) )( &::CBasePlayer::UpdatePhysicsShadowToPosition )
            , ( bp::arg("vecAbsOrigin") ) )    
        .def( 
            "UpdatePlayerSound"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::UpdatePlayerSound ) )    
        .def( 
            "UpdateStepSound"
            , (void ( ::CBasePlayer::* )( ::surfacedata_t *,::Vector const &,::Vector const & ) )( &::CBasePlayer::UpdateStepSound )
            , ( bp::arg("psurface"), bp::arg("vecOrigin"), bp::arg("vecVelocity") ) )    
        .def( 
            "UpdateTransmitState"
            , (int ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::UpdateTransmitState ) )    
        .def( 
            "UpdateUnderwaterState"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::UpdateUnderwaterState ) )    
        .def( 
            "UpdateVPhysicsPosition"
            , (void ( ::CBasePlayer::* )( ::Vector const &,::Vector const &,float ) )( &::CBasePlayer::UpdateVPhysicsPosition )
            , ( bp::arg("position"), bp::arg("velocity"), bp::arg("secondsToArrival") ) )    
        .def( 
            "UsingStandardWeaponsInVehicle"
            , (bool ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::UsingStandardWeaponsInVehicle ) )    
        .def( 
            "VPhysicsCollision"
            , (void ( ::CBasePlayer::* )( int,::gamevcollisionevent_t * ) )(&::CBasePlayer::VPhysicsCollision)
            , (void ( CBasePlayer_wrapper::* )( int,::gamevcollisionevent_t * ) )(&CBasePlayer_wrapper::default_VPhysicsCollision)
            , ( bp::arg("index"), bp::arg("pEvent") ) )    
        .def( 
            "VPhysicsDestroyObject"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::VPhysicsDestroyObject ) )    
        .def( 
            "VPhysicsShadowUpdate"
            , (void ( ::CBasePlayer::* )( ::IPhysicsObject * ) )( &::CBasePlayer::VPhysicsShadowUpdate )
            , ( bp::arg("pPhysics") ) )    
        .def( 
            "VPhysicsUpdate"
            , (void ( ::CBasePlayer::* )( ::IPhysicsObject * ) )( &::CBasePlayer::VPhysicsUpdate )
            , ( bp::arg("pPhysics") ) )    
        .def( 
            "ValidateCurrentObserverTarget"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::ValidateCurrentObserverTarget ) )    
        .def( 
            "VelocityPunch"
            , (void ( ::CBasePlayer::* )( ::Vector const & ) )( &::CBasePlayer::VelocityPunch )
            , ( bp::arg("vecForce") ) )    
        .def( 
            "ViewPunch"
            , (void ( ::CBasePlayer::* )( ::QAngle const & ) )( &::CBasePlayer::ViewPunch )
            , ( bp::arg("angleOffset") ) )    
        .def( 
            "ViewPunchReset"
            , (void ( ::CBasePlayer::* )( float ) )( &::CBasePlayer::ViewPunchReset )
            , ( bp::arg("tolerance")=0 ) )    
        .def( 
            "WantsLagCompensationOnEntity"
            , (bool ( ::CBasePlayer::* )( ::CBasePlayer const *,::CUserCmd const *,::CBitVec< 2048 > const * ) const)( &::CBasePlayer::WantsLagCompensationOnEntity )
            , ( bp::arg("pPlayer"), bp::arg("pCmd"), bp::arg("pEntityTransmitBits") ) )    
        .def( 
            "WaterMove"
            , (void ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::WaterMove ) )    
        .def( 
            "Weapon_CanUse"
            , (bool ( ::CBasePlayer::* )( ::CBaseCombatWeapon * ) )( &::CBasePlayer::Weapon_CanUse )
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "Weapon_Drop"
            , (void ( ::CBasePlayer::* )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) )( &::CBasePlayer::Weapon_Drop )
            , ( bp::arg("pWeapon"), bp::arg("pvecTarget"), bp::arg("pVelocity") ) )    
        .def( 
            "Weapon_DropSlot"
            , (void ( ::CBasePlayer::* )( int ) )( &::CBasePlayer::Weapon_DropSlot )
            , ( bp::arg("weaponSlot") ) )    
        .def( 
            "Weapon_Equip"
            , (void ( ::CBasePlayer::* )( ::CBaseCombatWeapon * ) )( &::CBasePlayer::Weapon_Equip )
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "Weapon_GetLast"
            , (::CBaseCombatWeapon * ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::Weapon_GetLast )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "Weapon_SetLast"
            , (void ( ::CBasePlayer::* )( ::CBaseCombatWeapon * ) )( &::CBasePlayer::Weapon_SetLast )
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "Weapon_ShootPosition"
            , (::Vector ( ::CBasePlayer::* )(  ) )( &::CBasePlayer::Weapon_ShootPosition ) )    
        .def( 
            "Weapon_ShouldSelectItem"
            , (bool ( ::CBasePlayer::* )( ::CBaseCombatWeapon * ) )( &::CBasePlayer::Weapon_ShouldSelectItem )
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "Weapon_ShouldSetLast"
            , (bool ( ::CBasePlayer::* )( ::CBaseCombatWeapon *,::CBaseCombatWeapon * ) )( &::CBasePlayer::Weapon_ShouldSetLast )
            , ( bp::arg("pOldWeapon"), bp::arg("pNewWeapon") ) )    
        .def( 
            "Weapon_Switch"
            , (bool ( ::CBasePlayer::* )( ::CBaseCombatWeapon *,int ) )( &::CBasePlayer::Weapon_Switch )
            , ( bp::arg("pWeapon"), bp::arg("viewmodelindex")=(int)(0) ) )    
        .def( 
            "BecomeRagdoll"
            , (bool ( ::CBaseCombatCharacter::* )( ::CTakeDamageInfo const &,::Vector const & ) )(&::CBaseCombatCharacter::BecomeRagdoll)
            , (bool ( CBasePlayer_wrapper::* )( ::CTakeDamageInfo const &,::Vector const & ) )(&CBasePlayer_wrapper::default_BecomeRagdoll)
            , ( bp::arg("info"), bp::arg("forceVector") ) )    
        .def( 
            "CanBecomeRagdoll"
            , (bool ( ::CBaseAnimating::* )(  ) )(&::CBaseAnimating::CanBecomeRagdoll)
            , (bool ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_CanBecomeRagdoll) )    
        .def( 
            "CorpseGib"
            , (bool ( ::CBaseCombatCharacter::* )( ::CTakeDamageInfo const & ) )(&::CBaseCombatCharacter::CorpseGib)
            , (bool ( CBasePlayer_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBasePlayer_wrapper::default_CorpseGib)
            , ( bp::arg("info") ) )    
        .def( 
            "CreateVPhysics"
            , (bool ( ::CBaseEntity::* )(  ) )(&::CBaseEntity::CreateVPhysics)
            , (bool ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_CreateVPhysics) )    
        .def( 
            "DrawDebugTextOverlays"
            , (int ( ::CBaseAnimating::* )(  ) )(&::CBaseAnimating::DrawDebugTextOverlays)
            , (int ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_DrawDebugTextOverlays) )    
        .def( 
            "Event_Gibbed"
            , (bool ( ::CBaseCombatCharacter::* )( ::CTakeDamageInfo const & ) )(&::CBaseCombatCharacter::Event_Gibbed)
            , (bool ( CBasePlayer_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBasePlayer_wrapper::default_Event_Gibbed)
            , ( bp::arg("info") ) )    
        .def( 
            "KeyValue"
            , (bool ( ::CBaseEntity::* )( char const *,char const * ) )(&::CBaseEntity::KeyValue)
            , (bool ( CBasePlayer_wrapper::* )( char const *,char const * ) )(&CBasePlayer_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("szValue") ) )    
        .def( 
            "KeyValue"
            , (bool ( ::CBaseEntity::* )( char const *,float ) )(&::CBaseEntity::KeyValue)
            , (bool ( CBasePlayer_wrapper::* )( char const *,float ) )(&CBasePlayer_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("flValue") ) )    
        .def( 
            "KeyValue"
            , (bool ( ::CBaseEntity::* )( char const *,::Vector const & ) )(&::CBaseEntity::KeyValue)
            , (bool ( CBasePlayer_wrapper::* )( char const *,::Vector const & ) )(&CBasePlayer_wrapper::default_KeyValue)
            , ( bp::arg("szKeyName"), bp::arg("vecValue") ) )    
        .def( 
            "PassesDamageFilter"
            , (bool ( ::CBaseEntity::* )( ::CTakeDamageInfo const & ) )(&::CBaseEntity::PassesDamageFilter)
            , (bool ( CBasePlayer_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBasePlayer_wrapper::default_PassesDamageFilter)
            , ( bp::arg("info") ) )    
        .def( 
            "PostClientActive"
            , (void ( ::CBaseEntity::* )(  ) )(&::CBaseEntity::PostClientActive)
            , (void ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_PostClientActive) )    
        .def( 
            "PostConstructor"
            , (void ( ::CBaseEntity::* )( char const * ) )(&::CBaseEntity::PostConstructor)
            , (void ( CBasePlayer_wrapper::* )( char const * ) )(&CBasePlayer_wrapper::default_PostConstructor)
            , ( bp::arg("szClassname") ) )    
        .def( 
            "ShouldGib"
            , (bool ( ::CBaseCombatCharacter::* )( ::CTakeDamageInfo const & ) )(&::CBaseCombatCharacter::ShouldGib)
            , (bool ( CBasePlayer_wrapper::* )( ::CTakeDamageInfo const & ) )(&CBasePlayer_wrapper::default_ShouldGib)
            , ( bp::arg("info") ) )    
        .def( 
            "StopLoopingSounds"
            , (void ( ::CBaseEntity::* )(  ) )(&::CBaseEntity::StopLoopingSounds)
            , (void ( CBasePlayer_wrapper::* )(  ) )(&CBasePlayer_wrapper::default_StopLoopingSounds) )    
        .staticmethod( "CanPickupObject" )    
        .staticmethod( "CreatePlayer" )    
        .staticmethod( "GetOffset_m_Local" )    
        .staticmethod( "GetOffset_pl" )    
        .staticmethod( "GetPyNetworkType" );

}

